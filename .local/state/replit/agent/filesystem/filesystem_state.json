{"file_contents":{"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/pages/admin.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { \n  Users, \n  ClipboardCheck, \n  BarChart3, \n  Gift, \n  Plus,\n  Check,\n  X,\n  Download,\n  Calendar,\n  MapPin,\n  Award,\n  Upload,\n  UserPlus,\n  Trash2,\n  Edit,\n  Settings\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport RewardModal from \"@/components/modals/reward-modal\";\nimport DealModal from \"@/components/modals/deal-modal\";\nimport { CSVUploader } from \"@/components/CSVUploader\";\nimport SupportTicketsTab from \"@/components/admin/SupportTicketsTab\";\nimport PointsConfigTab from \"@/components/admin/PointsConfigTab\";\nimport type { User, Deal, Reward } from \"@shared/schema\";\nimport type { AuthUser } from \"@/lib/auth\";\nimport type { UploadResult } from '@uppy/core';\n\ninterface ReportsData {\n  userCount: number;\n  dealCount: number;\n  totalRevenue: number;\n  redeemedRewards: number;\n}\n\n// User creation form schema\nconst createUserSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  country: z.string().min(1, \"Country is required\"),\n  role: z.enum([\"user\", \"admin\"]).default(\"user\"),\n  isActive: z.boolean().default(true),\n});\n\n// User edit form schema (without password)\nconst editUserSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  country: z.string().min(1, \"Country is required\"),\n  role: z.enum([\"user\", \"admin\"]),\n  isActive: z.boolean(),\n});\n\ntype CreateUserForm = z.infer<typeof createUserSchema>;\ntype EditUserForm = z.infer<typeof editUserSchema>;\n\nexport default function Admin() {\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [isRewardModalOpen, setIsRewardModalOpen] = useState(false);\n  const [selectedReward, setSelectedReward] = useState<Reward | null>(null);\n  const [isCreateUserModalOpen, setIsCreateUserModalOpen] = useState(false);\n  const [isEditUserModalOpen, setIsEditUserModalOpen] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isDealModalOpen, setIsDealModalOpen] = useState(false);\n  const [selectedDeal, setSelectedDeal] = useState<Deal | null>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [reportFilters, setReportFilters] = useState({\n    country: \"all\",\n    startDate: \"\",\n    endDate: \"\",\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // User creation form\n  const createUserForm = useForm<CreateUserForm>({\n    resolver: zodResolver(createUserSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      country: \"\",\n      role: \"user\",\n      isActive: true,\n    },\n  });\n\n  // User edit form\n  const editUserForm = useForm<EditUserForm>({\n    resolver: zodResolver(editUserSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      country: \"\",\n      role: \"user\",\n      isActive: true,\n    },\n  });\n\n  // Check if user is admin\n  const { data: currentUser } = useQuery<AuthUser>({\n    queryKey: [\"/api/auth/me\"],\n  });\n\n  const { data: users, isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n    enabled: currentUser?.role === \"admin\",\n  });\n\n  // Pending users query\n  const { data: pendingUsers, isLoading: pendingUsersLoading } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users/pending\"],\n    enabled: currentUser?.role === \"admin\",\n  });\n\n  // Pending reward redemptions query\n  const { data: pendingRedemptions, isLoading: pendingRedemptionsLoading } = useQuery<Array<any>>({\n    queryKey: [\"/api/admin/rewards/pending\"],\n    enabled: currentUser?.role === \"admin\",\n  });\n\n  // All reward redemptions query\n  const { data: allRedemptions, isLoading: allRedemptionsLoading } = useQuery<Array<any>>({\n    queryKey: [\"/api/admin/rewards/redemptions\"],\n    enabled: currentUser?.role === \"admin\",\n  });\n\n  const { data: dealsData, isLoading: dealsLoading } = useQuery<{ deals: Array<Deal & { userFirstName?: string; userLastName?: string; userName?: string }>, total: number }>({\n    queryKey: [\"/api/admin/deals\", currentPage],\n    enabled: currentUser?.role === \"admin\",\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      params.append(\"page\", currentPage.toString());\n      params.append(\"limit\", \"20\");\n      \n      const url = `/api/admin/deals?${params.toString()}`;\n      const response = await fetch(url, { credentials: \"include\" });\n      \n      if (!response.ok) {\n        throw new Error(`${response.status}: ${response.statusText}`);\n      }\n      \n      return response.json();\n    },\n  });\n\n  const { data: pendingDeals, isLoading: pendingDealsLoading } = useQuery<Array<Deal & { userFirstName?: string; userLastName?: string; userName?: string }>>({\n    queryKey: [\"/api/admin/deals/pending\"],\n    enabled: currentUser?.role === \"admin\",\n  });\n\n  const { data: rewards, isLoading: rewardsLoading } = useQuery<Reward[]>({\n    queryKey: [\"/api/rewards\"],\n    enabled: currentUser?.role === \"admin\",\n  });\n\n  const { data: reportsData, isLoading: reportsLoading } = useQuery<ReportsData>({\n    queryKey: [\"/api/admin/reports\", reportFilters.country, reportFilters.startDate, reportFilters.endDate],\n    enabled: currentUser?.role === \"admin\",\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (reportFilters.country !== \"all\") params.append(\"country\", reportFilters.country);\n      if (reportFilters.startDate) params.append(\"startDate\", reportFilters.startDate);\n      if (reportFilters.endDate) params.append(\"endDate\", reportFilters.endDate);\n      \n      const url = `/api/admin/reports${params.toString() ? `?${params.toString()}` : \"\"}`;\n      const response = await fetch(url, { credentials: \"include\" });\n      \n      if (!response.ok) {\n        throw new Error(`${response.status}: ${response.statusText}`);\n      }\n      \n      return response.json();\n    },\n  });\n\n  const approveDealMutation = useMutation({\n    mutationFn: async (dealId: string) => {\n      return apiRequest(\"POST\", `/api/deals/${dealId}/approve`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Deal approved successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/deals\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/deals/pending\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/reports\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to approve deal\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const rejectDealMutation = useMutation({\n    mutationFn: async (dealId: string) => {\n      return apiRequest(\"POST\", `/api/deals/${dealId}/reject`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Deal rejected\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/deals\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/deals/pending\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/reports\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reject deal\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateUserRoleMutation = useMutation({\n    mutationFn: async ({ userId, role }: { userId: string; role: string }) => {\n      return apiRequest(\"PATCH\", `/api/admin/users/${userId}/role`, { role });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"User role updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update user role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleApproveDeal = (dealId: string) => {\n    approveDealMutation.mutate(dealId);\n  };\n\n  const handleRejectDeal = (dealId: string) => {\n    rejectDealMutation.mutate(dealId);\n  };\n\n  const handleEditDeal = (deal: Deal) => {\n    setSelectedDeal(deal);\n    setIsDealModalOpen(true);\n  };\n\n  const handleUpdateUserRole = (userId: string, role: string) => {\n    updateUserRoleMutation.mutate({ userId, role });\n  };\n\n  // Create user mutation\n  const createUserMutation = useMutation({\n    mutationFn: async (userData: CreateUserForm) => {\n      return apiRequest(\"POST\", \"/api/admin/users\", userData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User created successfully\",\n      });\n      setIsCreateUserModalOpen(false);\n      createUserForm.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateUser = (data: CreateUserForm) => {\n    createUserMutation.mutate(data);\n  };\n\n  // Edit user mutation\n  const editUserMutation = useMutation({\n    mutationFn: async ({ userId, userData }: { userId: string; userData: EditUserForm }) => {\n      return apiRequest(\"PATCH\", `/api/admin/users/${userId}`, userData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User updated successfully\",\n      });\n      setIsEditUserModalOpen(false);\n      setSelectedUser(null);\n      editUserForm.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEditUser = (user: User) => {\n    setSelectedUser(user);\n    editUserForm.reset({\n      username: user.username,\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      country: user.country,\n      role: user.role,\n      isActive: user.isActive,\n    });\n    setIsEditUserModalOpen(true);\n  };\n\n  const handleUpdateUser = (data: EditUserForm) => {\n    if (selectedUser) {\n      editUserMutation.mutate({ userId: selectedUser.id, userData: data });\n    }\n  };\n\n  // Delete user mutation\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      return apiRequest(\"DELETE\", `/api/admin/users/${userId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/reports\"] });\n      toast({\n        title: \"Success\",\n        description: \"User deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeleteUser = (userId: string) => {\n    deleteUserMutation.mutate(userId);\n  };\n\n  // Users CSV processing mutation\n  const processUsersCSVMutation = useMutation({\n    mutationFn: async (csvPath: string) => {\n      return apiRequest(\"POST\", `/api/admin/csv/users/process`, { csvPath });\n    },\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"Success\",\n        description: `${data.message}${data.errors && data.errors.length > 0 ? `. ${data.errorCount} errors occurred.` : ''}`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to process users CSV file\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGetUsersCSVUploadParameters = async () => {\n    const response = await apiRequest(\"POST\", \"/api/admin/csv/users/upload-url\");\n    const data: any = await response.json();\n    return {\n      method: 'PUT' as const,\n      url: data.uploadURL,\n    };\n  };\n\n  const handleUsersCSVUploadComplete = (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful && result.successful.length > 0) {\n      const uploadURL = (result.successful[0] as any).uploadURL;\n      if (uploadURL) {\n        processUsersCSVMutation.mutate(uploadURL);\n      }\n    }\n  };\n\n  // Approve user mutation\n  const approveUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      return apiRequest(\"PUT\", `/api/admin/users/${userId}/approve`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users/pending\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User approved successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to approve user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Reject user mutation\n  const rejectUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      return apiRequest(\"PUT\", `/api/admin/users/${userId}/reject`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users/pending\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User rejected successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reject user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update reward shipment status mutation\n  const updateShipmentStatusMutation = useMutation({\n    mutationFn: async ({ redemptionId, shipmentStatus }: { redemptionId: string; shipmentStatus: string }) => {\n      return apiRequest(\"PUT\", `/api/admin/rewards/${redemptionId}/shipment`, { shipmentStatus });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/rewards/redemptions\"] });\n      toast({\n        title: \"Success\",\n        description: \"Shipment status updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update shipment status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleApproveUser = (userId: string) => {\n    approveUserMutation.mutate(userId);\n  };\n\n  const handleRejectUser = (userId: string) => {\n    rejectUserMutation.mutate(userId);\n  };\n\n  // Approve reward redemption mutation\n  const approveRedemptionMutation = useMutation({\n    mutationFn: async (redemptionId: string) => {\n      return apiRequest(\"POST\", `/api/admin/rewards/${redemptionId}/approve`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/rewards/pending\"] });\n      toast({\n        title: \"Success\",\n        description: \"Reward redemption approved successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to approve redemption\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Reject reward redemption mutation\n  const rejectRedemptionMutation = useMutation({\n    mutationFn: async ({ redemptionId, reason }: { redemptionId: string; reason?: string }) => {\n      return apiRequest(\"POST\", `/api/admin/rewards/${redemptionId}/reject`, { reason });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/rewards/pending\"] });\n      toast({\n        title: \"Success\",\n        description: \"Reward redemption rejected\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reject redemption\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleApproveRedemption = (redemptionId: string) => {\n    approveRedemptionMutation.mutate(redemptionId);\n  };\n\n  const handleRejectRedemption = (redemptionId: string, reason?: string) => {\n    rejectRedemptionMutation.mutate({ redemptionId, reason });\n  };\n\n  // Delete reward mutation\n  const deleteRewardMutation = useMutation({\n    mutationFn: async (rewardId: string) => {\n      return apiRequest(\"DELETE\", `/api/admin/rewards/${rewardId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/rewards\"] });\n      toast({\n        title: \"Success\",\n        description: \"Reward deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete reward\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeleteReward = (rewardId: string) => {\n    if (confirm(\"Are you sure you want to delete this reward? This action cannot be undone.\")) {\n      deleteRewardMutation.mutate(rewardId);\n    }\n  };\n\n  const processCSVMutation = useMutation({\n    mutationFn: async (csvPath: string) => {\n      return apiRequest(\"POST\", `/api/admin/csv/process`, { csvPath });\n    },\n    onSuccess: (data: any) => {\n      toast({\n        title: \"Success\",\n        description: `${data.message}${data.errors ? `. ${data.errors.length} errors occurred.` : ''}`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/deals\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/deals/pending\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to process CSV file\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGetCSVUploadParameters = async () => {\n    try {\n      const response = await apiRequest(\"POST\", \"/api/admin/csv/upload-url\");\n      const data: any = await response.json();\n      \n      if (!data.uploadURL) {\n        console.error(\"No uploadURL in response:\", data);\n        toast({\n          title: \"Error\", \n          description: \"No upload URL received from server\",\n          variant: \"destructive\",\n        });\n        throw new Error(\"No upload URL received\");\n      }\n      \n      return {\n        method: 'PUT' as const,\n        url: data.uploadURL,\n      };\n    } catch (error) {\n      console.error(\"Error getting upload parameters:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to get upload URL\",\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  };\n\n  const handleCSVUploadComplete = (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful && result.successful.length > 0) {\n      const uploadedFile = result.successful[0] as any;\n      \n      // Try different possible properties for the upload URL\n      const uploadURL = uploadedFile.uploadURL || uploadedFile.url || uploadedFile.response?.uploadURL;\n      \n      if (uploadURL) {\n        processCSVMutation.mutate(uploadURL);\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to get upload URL from file upload\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const handleExportRewardRedemptions = async () => {\n    try {\n      toast({\n        title: \"Generating Reward Redemptions Report\",\n        description: \"Creating your Excel report...\",\n      });\n\n      // Build query parameters for the redemptions export\n      const params = new URLSearchParams();\n      if (reportFilters.startDate) params.append(\"startDate\", reportFilters.startDate);\n      if (reportFilters.endDate) params.append(\"endDate\", reportFilters.endDate);\n      \n      const url = `/api/admin/reports/reward-redemptions/export${params.toString() ? `?${params.toString()}` : \"\"}`;\n      \n      // Create a temporary download link\n      const response = await fetch(url, { \n        credentials: \"include\",\n        method: 'GET'\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to generate reward redemptions report');\n      }\n      \n      // Get the blob from the response\n      const blob = await response.blob();\n      \n      // Create download link\n      const downloadUrl = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = downloadUrl;\n      \n      // Set filename from Content-Disposition header or use default\n      const contentDisposition = response.headers.get('Content-Disposition');\n      let filename = `reward-redemptions-${new Date().toISOString().split('T')[0]}.xlsx`;\n      if (contentDisposition) {\n        const filenameMatch = contentDisposition.match(/filename=\"(.+)\"/);\n        if (filenameMatch) {\n          filename = filenameMatch[1];\n        }\n      }\n      \n      link.download = filename;\n      document.body.appendChild(link);\n      link.click();\n      \n      // Clean up\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(downloadUrl);\n      \n      toast({\n        title: \"Report Downloaded\",\n        description: `Your reward redemptions report has been saved as ${filename}`,\n      });\n      \n    } catch (error) {\n      console.error('Error generating reward redemptions Excel report:', error);\n      toast({\n        title: \"Export Failed\",\n        description: \"There was an error generating your reward redemptions report. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleExportDealsPerUser = async () => {\n    try {\n      toast({\n        title: \"Generating Deals per User Report\",\n        description: \"Creating your Excel report...\",\n      });\n\n      // Build query parameters for the deals per user export\n      const params = new URLSearchParams();\n      if (reportFilters.startDate) params.append(\"startDate\", reportFilters.startDate);\n      if (reportFilters.endDate) params.append(\"endDate\", reportFilters.endDate);\n      \n      const url = `/api/admin/reports/deals-per-user/export${params.toString() ? `?${params.toString()}` : \"\"}`;\n      \n      // Create a temporary download link\n      const response = await fetch(url, { \n        credentials: \"include\",\n        method: 'GET'\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to generate deals per user report');\n      }\n      \n      // Get the blob from the response\n      const blob = await response.blob();\n      \n      // Create download link\n      const downloadUrl = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = downloadUrl;\n      \n      // Set filename from Content-Disposition header or use default\n      const contentDisposition = response.headers.get('Content-Disposition');\n      let filename = `deals-per-user-${new Date().toISOString().split('T')[0]}.xlsx`;\n      if (contentDisposition) {\n        const filenameMatch = contentDisposition.match(/filename=\"(.+)\"/);\n        if (filenameMatch) {\n          filename = filenameMatch[1];\n        }\n      }\n      \n      link.download = filename;\n      document.body.appendChild(link);\n      link.click();\n      \n      // Clean up\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(downloadUrl);\n      \n      toast({\n        title: \"Report Downloaded\",\n        description: `Your deals per user report has been saved as ${filename}`,\n      });\n      \n    } catch (error) {\n      console.error('Error generating deals per user Excel report:', error);\n      toast({\n        title: \"Export Failed\",\n        description: \"There was an error generating your deals per user report. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleExportUserRanking = async () => {\n    try {\n      toast({\n        title: \"Generating User Ranking\",\n        description: \"Creating your Excel report...\",\n      });\n\n      // Build query parameters for the ranking export\n      const params = new URLSearchParams();\n      if (reportFilters.startDate) params.append(\"startDate\", reportFilters.startDate);\n      if (reportFilters.endDate) params.append(\"endDate\", reportFilters.endDate);\n      \n      const url = `/api/admin/reports/user-ranking/export${params.toString() ? `?${params.toString()}` : \"\"}`;\n      \n      // Create a temporary download link\n      const response = await fetch(url, { \n        credentials: \"include\",\n        method: 'GET'\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to generate ranking report');\n      }\n      \n      // Get the blob from the response\n      const blob = await response.blob();\n      \n      // Create download link\n      const downloadUrl = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = downloadUrl;\n      \n      // Set filename from Content-Disposition header or use default\n      const contentDisposition = response.headers.get('Content-Disposition');\n      let filename = `user-ranking-${new Date().toISOString().split('T')[0]}.xlsx`;\n      if (contentDisposition) {\n        const filenameMatch = contentDisposition.match(/filename=\"(.+)\"/);\n        if (filenameMatch) {\n          filename = filenameMatch[1];\n        }\n      }\n      \n      link.download = filename;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(downloadUrl);\n      \n      toast({\n        title: \"Ranking Downloaded\",\n        description: `Your user ranking has been saved as ${filename}`,\n      });\n      \n    } catch (error) {\n      console.error('Error generating ranking report:', error);\n      toast({\n        title: \"Export Failed\",\n        description: \"There was an error generating your ranking report. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return \"bg-green-100 text-green-800\";\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"rejected\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const formatCurrency = (value: string | number) => {\n    return new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n    }).format(Number(value));\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  };\n\n  if (currentUser?.role !== \"admin\") {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card className=\"w-full max-w-md mx-4\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <X className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n              <h2 className=\"text-xl font-bold text-gray-900 mb-2\">Access Denied</h2>\n              <p className=\"text-gray-600\">\n                You don't have permission to access the admin panel.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-2\" data-testid=\"text-admin-title\">\n          Administrative Panel\n        </h1>\n        <p className=\"text-gray-600\">\n          Manage users, approve deals, and generate reports\n        </p>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-9\">\n          <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"users\" data-testid=\"tab-users\">Users</TabsTrigger>\n          <TabsTrigger value=\"pending\" data-testid=\"tab-pending\">Pending Users</TabsTrigger>\n          <TabsTrigger value=\"deals\" data-testid=\"tab-deals\">Deals</TabsTrigger>\n          <TabsTrigger value=\"rewards\" data-testid=\"tab-rewards\">Rewards</TabsTrigger>\n          <TabsTrigger value=\"reward-approvals\" data-testid=\"tab-reward-approvals\">Reward Approvals</TabsTrigger>\n          <TabsTrigger value=\"reward-history\" data-testid=\"tab-reward-history\">Reward History</TabsTrigger>\n          <TabsTrigger value=\"support\" data-testid=\"tab-support\">Support</TabsTrigger>\n          <TabsTrigger value=\"points-config\" data-testid=\"tab-points-config\">Points Config</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"mt-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <Card className=\"shadow-material\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-3 rounded-full bg-primary-50\">\n                    <Users className=\"text-primary-600 h-6 w-6\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Total Users</p>\n                    {reportsLoading ? (\n                      <Skeleton className=\"h-8 w-16 mt-1\" />\n                    ) : (\n                      <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"text-total-users\">\n                        {reportsData?.userCount || 0}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"shadow-material\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-3 rounded-full bg-secondary-50\">\n                    <ClipboardCheck className=\"text-secondary-600 h-6 w-6\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Total Deals</p>\n                    {reportsLoading ? (\n                      <Skeleton className=\"h-8 w-16 mt-1\" />\n                    ) : (\n                      <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"text-total-deals\">\n                        {reportsData?.dealCount || 0}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"shadow-material\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-3 rounded-full bg-green-50\">\n                    <BarChart3 className=\"text-green-600 h-6 w-6\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Total Revenue</p>\n                    {reportsLoading ? (\n                      <Skeleton className=\"h-8 w-20 mt-1\" />\n                    ) : (\n                      <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"text-total-revenue\">\n                        {formatCurrency(reportsData?.totalRevenue || 0)}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"shadow-material\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-3 rounded-full bg-accent-50\">\n                    <Gift className=\"text-accent-600 h-6 w-6\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Redeemed Rewards</p>\n                    {reportsLoading ? (\n                      <Skeleton className=\"h-8 w-16 mt-1\" />\n                    ) : (\n                      <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"text-redeemed-rewards\">\n                        {reportsData?.redeemedRewards || 0}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Reports Section */}\n          <Card className=\"shadow-material\">\n            <CardHeader>\n              <CardTitle>Generate Reports</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n                <div>\n                  <Label htmlFor=\"country\">Country</Label>\n                  <Select\n                    value={reportFilters.country}\n                    onValueChange={(value) => setReportFilters(prev => ({ ...prev, country: value }))}\n                  >\n                    <SelectTrigger data-testid=\"select-report-country\">\n                      <SelectValue placeholder=\"All Countries\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Countries</SelectItem>\n                      <SelectItem value=\"US\">United States</SelectItem>\n                      <SelectItem value=\"CA\">Canada</SelectItem>\n                      <SelectItem value=\"MX\">Mexico</SelectItem>\n                      <SelectItem value=\"BR\">Brazil</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"startDate\">Start Date</Label>\n                  <Input\n                    id=\"startDate\"\n                    type=\"date\"\n                    value={reportFilters.startDate}\n                    onChange={(e) => setReportFilters(prev => ({ ...prev, startDate: e.target.value }))}\n                    data-testid=\"input-start-date\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"endDate\">End Date</Label>\n                  <Input\n                    id=\"endDate\"\n                    type=\"date\"\n                    value={reportFilters.endDate}\n                    onChange={(e) => setReportFilters(prev => ({ ...prev, endDate: e.target.value }))}\n                    data-testid=\"input-end-date\"\n                  />\n                </div>\n              </div>\n              <div className=\"flex gap-3\">\n                <Button onClick={handleExportUserRanking} data-testid=\"button-export-user-ranking\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export User Ranking (Excel)\n                </Button>\n                <Button onClick={handleExportRewardRedemptions} variant=\"secondary\" data-testid=\"button-export-reward-redemptions\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export Reward Redemptions (Excel)\n                </Button>\n                <Button onClick={handleExportDealsPerUser} variant=\"outline\" data-testid=\"button-export-deals-per-user\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export Deals per User (Excel)\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Pending Deals Quick View */}\n          <Card className=\"shadow-material mt-6\">\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <CardTitle>Pending Deals</CardTitle>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setActiveTab(\"deals\")}\n                  data-testid=\"button-view-all-pending\"\n                >\n                  View All\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {pendingDealsLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(3)].map((_, i) => (\n                    <Skeleton key={i} className=\"h-16 w-full\" />\n                  ))}\n                </div>\n              ) : pendingDeals && pendingDeals.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {pendingDeals.slice(0, 5).map((deal) => (\n                    <div key={deal.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div>\n                        <h4 className=\"font-medium\">{deal.productName}</h4>\n                        <p className=\"text-sm text-gray-600\">\n                          {deal.userFirstName && deal.userLastName \n                            ? `${deal.userFirstName} ${deal.userLastName}`\n                            : deal.userName || 'Unknown User'} • {formatCurrency(deal.dealValue)} • {formatDate(deal.createdAt.toString())}\n                        </p>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          onClick={() => handleApproveDeal(deal.id)}\n                          disabled={approveDealMutation.isPending}\n                          data-testid={`button-approve-${deal.id}`}\n                        >\n                          <Check className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleRejectDeal(deal.id)}\n                          disabled={rejectDealMutation.isPending}\n                          data-testid={`button-reject-${deal.id}`}\n                        >\n                          <X className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-gray-500 text-center py-8\" data-testid=\"text-no-pending-deals\">\n                  No pending deals to review\n                </p>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Users Tab */}\n        <TabsContent value=\"users\" className=\"mt-6\">\n          <Card className=\"shadow-material\">\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <CardTitle>User Management</CardTitle>\n                <div className=\"flex space-x-2\">\n                  <CSVUploader\n                    onGetUploadParameters={handleGetUsersCSVUploadParameters}\n                    onComplete={handleUsersCSVUploadComplete}\n                    buttonClassName=\"bg-green-600 hover:bg-green-700 text-white\"\n                  >\n                    <Upload className=\"w-4 h-4 mr-2\" />\n                    Import Users CSV\n                  </CSVUploader>\n                  <Dialog open={isCreateUserModalOpen} onOpenChange={setIsCreateUserModalOpen}>\n                    <DialogTrigger asChild>\n                      <Button className=\"bg-blue-600 hover:bg-blue-700 text-white\" data-testid=\"button-create-user\">\n                        <UserPlus className=\"w-4 h-4 mr-2\" />\n                        Create User\n                      </Button>\n                    </DialogTrigger>\n                  <DialogContent className=\"sm:max-w-[600px]\">\n                    <DialogHeader>\n                      <DialogTitle>Create New User</DialogTitle>\n                      <DialogDescription>\n                        Add a new user to the loyalty program platform.\n                      </DialogDescription>\n                    </DialogHeader>\n                    <Form {...createUserForm}>\n                      <form onSubmit={createUserForm.handleSubmit(handleCreateUser)} className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={createUserForm.control}\n                            name=\"firstName\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>First Name</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"John\" {...field} data-testid=\"input-first-name\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={createUserForm.control}\n                            name=\"lastName\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Last Name</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"Doe\" {...field} data-testid=\"input-last-name\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        \n                        <FormField\n                          control={createUserForm.control}\n                          name=\"username\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Username</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"johndoe\" {...field} data-testid=\"input-username\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={createUserForm.control}\n                          name=\"email\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Email</FormLabel>\n                              <FormControl>\n                                <Input type=\"email\" placeholder=\"john@example.com\" {...field} data-testid=\"input-email\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={createUserForm.control}\n                          name=\"password\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Password</FormLabel>\n                              <FormControl>\n                                <Input type=\"password\" placeholder=\"••••••••\" {...field} data-testid=\"input-password\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={createUserForm.control}\n                          name=\"country\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Country</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"United States\" {...field} data-testid=\"input-country\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={createUserForm.control}\n                            name=\"role\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Role</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger data-testid=\"select-role\">\n                                      <SelectValue placeholder=\"Select a role\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"user\">User</SelectItem>\n                                    <SelectItem value=\"admin\">Admin</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          \n                        </div>\n                        \n                        <div className=\"flex justify-end space-x-2 pt-4\">\n                          <Button \n                            type=\"button\" \n                            variant=\"outline\" \n                            onClick={() => setIsCreateUserModalOpen(false)}\n                            data-testid=\"button-cancel-create\"\n                          >\n                            Cancel\n                          </Button>\n                          <Button \n                            type=\"submit\" \n                            disabled={createUserMutation.isPending}\n                            data-testid=\"button-submit-create\"\n                          >\n                            {createUserMutation.isPending ? \"Creating...\" : \"Create User\"}\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n\n                {/* Edit User Modal */}\n                <Dialog open={isEditUserModalOpen} onOpenChange={setIsEditUserModalOpen}>\n                  <DialogContent className=\"sm:max-w-[600px]\">\n                    <DialogHeader>\n                      <DialogTitle>Edit User</DialogTitle>\n                      <DialogDescription>\n                        Update user information for {selectedUser?.firstName} {selectedUser?.lastName}.\n                      </DialogDescription>\n                    </DialogHeader>\n                    <Form {...editUserForm}>\n                      <form onSubmit={editUserForm.handleSubmit(handleUpdateUser)} className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={editUserForm.control}\n                            name=\"firstName\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>First Name</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"John\" {...field} data-testid=\"input-edit-first-name\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={editUserForm.control}\n                            name=\"lastName\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Last Name</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"Doe\" {...field} data-testid=\"input-edit-last-name\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        \n                        <FormField\n                          control={editUserForm.control}\n                          name=\"username\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Username</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"johndoe\" {...field} data-testid=\"input-edit-username\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={editUserForm.control}\n                          name=\"email\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Email</FormLabel>\n                              <FormControl>\n                                <Input type=\"email\" placeholder=\"john@example.com\" {...field} data-testid=\"input-edit-email\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={editUserForm.control}\n                          name=\"country\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Country</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"United States\" {...field} data-testid=\"input-edit-country\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={editUserForm.control}\n                            name=\"role\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Role</FormLabel>\n                                <Select onValueChange={field.onChange} value={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger data-testid=\"select-edit-role\">\n                                      <SelectValue placeholder=\"Select a role\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"user\">User</SelectItem>\n                                    <SelectItem value=\"admin\">Admin</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={editUserForm.control}\n                            name=\"isActive\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Status</FormLabel>\n                                <Select onValueChange={(value) => field.onChange(value === \"true\")} value={field.value ? \"true\" : \"false\"}>\n                                  <FormControl>\n                                    <SelectTrigger data-testid=\"select-edit-status\">\n                                      <SelectValue placeholder=\"Select status\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"true\">Active</SelectItem>\n                                    <SelectItem value=\"false\">Inactive</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        \n                        <div className=\"flex justify-end space-x-2 pt-4\">\n                          <Button \n                            type=\"button\" \n                            variant=\"outline\" \n                            onClick={() => setIsEditUserModalOpen(false)}\n                            data-testid=\"button-cancel-edit\"\n                          >\n                            Cancel\n                          </Button>\n                          <Button \n                            type=\"submit\" \n                            disabled={editUserMutation.isPending}\n                            data-testid=\"button-submit-edit\"\n                          >\n                            {editUserMutation.isPending ? \"Updating...\" : \"Update User\"}\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n                </div>\n              </div>\n              <div className=\"text-sm text-gray-600 mt-2\">\n                CSV format: First Name, Last Name, Username, Email, Password, Country, Role\n              </div>\n            </CardHeader>\n            <CardContent>\n              {usersLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <Skeleton key={i} className=\"h-16 w-full\" />\n                  ))}\n                </div>\n              ) : users && users.length > 0 ? (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          User\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Username\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Role\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Country\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Status\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Joined\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Actions\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {users.map((user) => (\n                        <tr key={user.id} data-testid={`row-user-${user.id}`}>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div>\n                              <div className=\"text-sm font-medium text-gray-900\">\n                                {user.firstName} {user.lastName}\n                              </div>\n                              <div className=\"text-sm text-gray-500\">{user.email}</div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"text-sm font-medium text-gray-900\" data-testid={`text-username-${user.id}`}>\n                              {user.username}\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <Select\n                              value={user.role}\n                              onValueChange={(newRole) => handleUpdateUserRole(user.id, newRole)}\n                              disabled={updateUserRoleMutation.isPending}\n                            >\n                              <SelectTrigger className=\"w-24\" data-testid={`select-role-${user.id}`}>\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"user\">User</SelectItem>\n                                <SelectItem value=\"admin\">Admin</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                            {user.country}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <Badge className={user.isActive ? \"bg-green-100 text-green-800\" : \"bg-red-100 text-red-800\"}>\n                              {user.isActive ? \"Active\" : \"Inactive\"}\n                            </Badge>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                            {formatDate(user.createdAt.toString())}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                            <div className=\"flex items-center space-x-2\">\n                              {updateUserRoleMutation.isPending ? (\n                                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n                              ) : (\n                                <span className=\"text-green-600\">✓</span>\n                              )}\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => handleEditUser(user)}\n                                className=\"text-blue-600 hover:text-blue-700 hover:bg-blue-50\"\n                                data-testid={`button-edit-${user.id}`}\n                              >\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                              <AlertDialog>\n                                <AlertDialogTrigger asChild>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    className=\"text-red-600 hover:text-red-700 hover:bg-red-50 ml-2\"\n                                    data-testid={`button-delete-${user.id}`}\n                                  >\n                                    <Trash2 className=\"w-4 h-4\" />\n                                  </Button>\n                                </AlertDialogTrigger>\n                                <AlertDialogContent>\n                                  <AlertDialogHeader>\n                                    <AlertDialogTitle>Delete User</AlertDialogTitle>\n                                    <AlertDialogDescription>\n                                      Are you sure you want to delete {user.firstName} {user.lastName}? \n                                      This action cannot be undone and will permanently remove the user \n                                      from the system.\n                                    </AlertDialogDescription>\n                                  </AlertDialogHeader>\n                                  <AlertDialogFooter>\n                                    <AlertDialogCancel data-testid=\"button-cancel-delete\">\n                                      Cancel\n                                    </AlertDialogCancel>\n                                    <AlertDialogAction\n                                      onClick={() => handleDeleteUser(user.id)}\n                                      disabled={deleteUserMutation.isPending}\n                                      className=\"bg-red-600 hover:bg-red-700\"\n                                      data-testid=\"button-confirm-delete\"\n                                    >\n                                      {deleteUserMutation.isPending ? \"Deleting...\" : \"Delete\"}\n                                    </AlertDialogAction>\n                                  </AlertDialogFooter>\n                                </AlertDialogContent>\n                              </AlertDialog>\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              ) : (\n                <p className=\"text-gray-500 text-center py-8\" data-testid=\"text-no-users\">\n                  No users found\n                </p>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Pending Approval Tab */}\n        <TabsContent value=\"pending\" className=\"mt-6\">\n          <Card className=\"shadow-material\">\n            <CardHeader>\n              <CardTitle>Pending User Approvals</CardTitle>\n              <div className=\"text-sm text-gray-600 mt-2\">\n                New user registrations awaiting administrator approval\n              </div>\n            </CardHeader>\n            <CardContent>\n              {pendingUsersLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(3)].map((_, i) => (\n                    <Skeleton key={i} className=\"h-20 w-full\" />\n                  ))}\n                </div>\n              ) : pendingUsers && pendingUsers.length > 0 ? (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"min-w-full divide-y divide-gray-200\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          User\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Role\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Country\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Registration Date\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Action\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {pendingUsers.map((user: any) => (\n                        <tr key={user.id} data-testid={`row-pending-user-${user.id}`}>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div>\n                              <div className=\"text-sm font-medium text-gray-900\">\n                                {user.firstName} {user.lastName}\n                              </div>\n                              <div className=\"text-sm text-gray-500\">{user.email}</div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <Badge className={user.role === \"admin\" ? \"bg-purple-100 text-purple-800\" : \"bg-blue-100 text-blue-800\"}>\n                              {user.role}\n                            </Badge>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                            {user.country}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                            {formatDate(user.createdAt.toString())}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                            <div className=\"flex space-x-2\">\n                              <Button\n                                onClick={() => handleApproveUser(user.id)}\n                                disabled={approveUserMutation.isPending || rejectUserMutation.isPending}\n                                className=\"bg-green-600 hover:bg-green-700 text-white\"\n                                data-testid={`button-approve-${user.id}`}\n                              >\n                                {approveUserMutation.isPending ? \"Approving...\" : \"Approve\"}\n                              </Button>\n                              <Button\n                                onClick={() => handleRejectUser(user.id)}\n                                disabled={approveUserMutation.isPending || rejectUserMutation.isPending}\n                                variant=\"outline\"\n                                className=\"text-red-600 hover:text-red-700 hover:bg-red-50 border-red-300\"\n                                data-testid={`button-reject-${user.id}`}\n                              >\n                                {rejectUserMutation.isPending ? \"Rejecting...\" : \"Reject\"}\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              ) : (\n                <p className=\"text-gray-500 text-center py-8\" data-testid=\"text-no-pending-users\">\n                  No pending user approvals\n                </p>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Deals Tab */}\n        <TabsContent value=\"deals\" className=\"mt-6\">\n          <Card className=\"shadow-material\">\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <CardTitle>Deal Management</CardTitle>\n                <CSVUploader\n                  onGetUploadParameters={handleGetCSVUploadParameters}\n                  onComplete={handleCSVUploadComplete}\n                  buttonClassName=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                >\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Import Deals CSV\n                </CSVUploader>\n              </div>\n              <div className=\"text-sm text-gray-600 mt-2\">\n                CSV format: usuario, valor, status, tipo, acuerdo (optional) (where status = pending/approved/rejected, tipo = software/hardware)\n              </div>\n            </CardHeader>\n            <CardContent>\n              {dealsLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <Skeleton key={i} className=\"h-20 w-full\" />\n                  ))}\n                </div>\n              ) : dealsData?.deals && dealsData.deals.length > 0 ? (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          User\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Product\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Value\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Type\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          License Agreement\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Status\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Actions\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {dealsData.deals.map((deal) => (\n                        <tr key={deal.id} data-testid={`row-deal-${deal.id}`}>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div>\n                              <div className=\"text-sm font-medium text-gray-900\">\n                                {deal.userFirstName && deal.userLastName \n                                  ? `${deal.userFirstName} ${deal.userLastName}`\n                                  : deal.userName || 'Unknown User'}\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div>\n                              <div className=\"text-sm font-medium text-gray-900\">\n                                {deal.productName}\n                              </div>\n                              <div className=\"text-sm text-gray-500\">\n                                {deal.quantity} {deal.productType === \"software\" ? \"licenses\" : \"units\"}\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                            {formatCurrency(deal.dealValue)}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <Badge variant=\"outline\">\n                              {deal.productType.charAt(0).toUpperCase() + deal.productType.slice(1)}\n                            </Badge>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\" data-testid={`text-license-agreement-${deal.id}`}>\n                            {deal.licenseAgreementNumber || '-'}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <Badge className={`${getStatusColor(deal.status)} border-0`}>\n                              {deal.status.charAt(0).toUpperCase() + deal.status.slice(1)}\n                            </Badge>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                            <div className=\"flex space-x-2\">\n                              {deal.status === \"pending\" && (\n                                <>\n                                  <Button\n                                    size=\"sm\"\n                                    onClick={() => handleApproveDeal(deal.id)}\n                                    disabled={approveDealMutation.isPending}\n                                    data-testid={`button-approve-deal-${deal.id}`}\n                                  >\n                                    Approve\n                                  </Button>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    onClick={() => handleRejectDeal(deal.id)}\n                                    disabled={rejectDealMutation.isPending}\n                                    data-testid={`button-reject-deal-${deal.id}`}\n                                  >\n                                    Reject\n                                  </Button>\n                                </>\n                              )}\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => handleEditDeal(deal)}\n                                className=\"text-blue-600 hover:text-blue-700 hover:bg-blue-50\"\n                                data-testid={`button-edit-deal-${deal.id}`}\n                              >\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              ) : (\n                <p className=\"text-gray-500 text-center py-8\" data-testid=\"text-no-deals\">\n                  No deals found\n                </p>\n              )}\n            </CardContent>\n            {dealsData && dealsData.total > 20 && (\n              <div className=\"px-6 py-4 border-t\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"text-sm text-gray-600\">\n                    Showing {((currentPage - 1) * 20) + 1} to {Math.min(currentPage * 20, dealsData.total)} of {dealsData.total} deals\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                      disabled={currentPage === 1}\n                      data-testid=\"button-prev-page\"\n                    >\n                      Previous\n                    </Button>\n                    <span className=\"flex items-center px-3 text-sm text-gray-600\">\n                      Page {currentPage} of {Math.ceil(dealsData.total / 20)}\n                    </span>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(prev => prev + 1)}\n                      disabled={currentPage >= Math.ceil(dealsData.total / 20)}\n                      data-testid=\"button-next-page\"\n                    >\n                      Next\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n          </Card>\n        </TabsContent>\n\n        {/* Rewards Tab */}\n        <TabsContent value=\"rewards\" className=\"mt-6\">\n          <Card className=\"shadow-material\">\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <CardTitle>Reward Management</CardTitle>\n                <Button\n                  onClick={() => {\n                    setSelectedReward(null);\n                    setIsRewardModalOpen(true);\n                  }}\n                  data-testid=\"button-add-reward\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Reward\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {rewardsLoading ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {[...Array(6)].map((_, i) => (\n                    <Skeleton key={i} className=\"h-32 w-full\" />\n                  ))}\n                </div>\n              ) : rewards && rewards.length > 0 ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {rewards.map((reward) => (\n                    <Card key={reward.id} className=\"border\" data-testid={`card-admin-reward-${reward.id}`}>\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center space-x-3 mb-3\">\n                          <div className=\"w-10 h-10 bg-gradient-to-br from-accent-400 to-accent-600 rounded-lg flex items-center justify-center\">\n                            <Gift className=\"text-white h-5 w-5\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-medium text-gray-900\">{reward.name}</h4>\n                            <p className=\"text-sm text-gray-600\">\n                              {reward.pointsCost.toLocaleString()} points\n                            </p>\n                          </div>\n                        </div>\n                        \n                        <Badge variant=\"outline\" className=\"mb-3\">\n                          {reward.category}\n                        </Badge>\n                        \n                        {reward.description && (\n                          <p className=\"text-sm text-gray-600 mb-3 line-clamp-2\">\n                            {reward.description}\n                          </p>\n                        )}\n                        \n                        <div className=\"flex justify-between items-center\">\n                          <Badge className={reward.isActive ? \"bg-green-100 text-green-800\" : \"bg-red-100 text-red-800\"}>\n                            {reward.isActive ? \"Active\" : \"Inactive\"}\n                          </Badge>\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => {\n                                setSelectedReward(reward);\n                                setIsRewardModalOpen(true);\n                              }}\n                              data-testid={`button-edit-reward-${reward.id}`}\n                            >\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => handleDeleteReward(reward.id)}\n                              disabled={deleteRewardMutation.isPending}\n                              className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                              data-testid={`button-delete-reward-${reward.id}`}\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <Gift className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-2\" data-testid=\"text-no-rewards-admin\">\n                    No rewards configured\n                  </h3>\n                  <p className=\"text-gray-600 mb-4\">\n                    Add rewards for users to redeem with their points.\n                  </p>\n                  <Button\n                    onClick={() => {\n                      setSelectedReward(null);\n                      setIsRewardModalOpen(true);\n                    }}\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add First Reward\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Reward Approvals Tab */}\n        <TabsContent value=\"reward-approvals\" className=\"mt-6\">\n          <Card className=\"shadow-material\">\n            <CardHeader>\n              <CardTitle>Pending Reward Redemptions</CardTitle>\n              <div className=\"text-sm text-gray-600 mt-2\">\n                User reward redemptions awaiting administrator approval\n              </div>\n            </CardHeader>\n            <CardContent>\n              {pendingRedemptionsLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(3)].map((_, i) => (\n                    <Skeleton key={i} className=\"h-20 w-full\" />\n                  ))}\n                </div>\n              ) : pendingRedemptions && pendingRedemptions.length > 0 ? (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"min-w-full divide-y divide-gray-200\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          User\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Reward\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Requested Date\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Status\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Actions\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {pendingRedemptions.map((redemption: any) => (\n                        <tr key={redemption.id} data-testid={`row-pending-redemption-${redemption.id}`}>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div>\n                              <div className=\"text-sm font-medium text-gray-900\">\n                                {redemption.userFirstName} {redemption.userLastName}\n                              </div>\n                              <div className=\"text-sm text-gray-500\">@{redemption.userName}</div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"text-sm font-medium text-gray-900\">\n                              {redemption.rewardName}\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                            {formatDate(redemption.redeemedAt.toString())}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <Badge className=\"bg-yellow-100 text-yellow-800\">\n                              {redemption.status}\n                            </Badge>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                            <div className=\"flex space-x-2\">\n                              <Button\n                                onClick={() => handleApproveRedemption(redemption.id)}\n                                disabled={approveRedemptionMutation.isPending}\n                                className=\"bg-green-600 hover:bg-green-700 text-white\"\n                                size=\"sm\"\n                                data-testid={`button-approve-redemption-${redemption.id}`}\n                              >\n                                {approveRedemptionMutation.isPending ? \"Approving...\" : \"Approve\"}\n                              </Button>\n                              <Button\n                                onClick={() => handleRejectRedemption(redemption.id, \"Rejected by administrator\")}\n                                disabled={rejectRedemptionMutation.isPending}\n                                variant=\"outline\"\n                                className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                                size=\"sm\"\n                                data-testid={`button-reject-redemption-${redemption.id}`}\n                              >\n                                {rejectRedemptionMutation.isPending ? \"Rejecting...\" : \"Reject\"}\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              ) : (\n                <p className=\"text-gray-500 text-center py-8\" data-testid=\"text-no-pending-redemptions\">\n                  No pending reward redemptions\n                </p>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Reward History Tab */}\n        <TabsContent value=\"reward-history\" className=\"mt-6\">\n          <Card className=\"shadow-material\">\n            <CardHeader>\n              <CardTitle>All Reward Redemptions</CardTitle>\n              <div className=\"text-sm text-gray-600 mt-2\">\n                Complete history of all user reward redemptions\n              </div>\n            </CardHeader>\n            <CardContent>\n              {allRedemptionsLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <Skeleton key={i} className=\"h-20 w-full\" />\n                  ))}\n                </div>\n              ) : allRedemptions && allRedemptions.length > 0 ? (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"min-w-full divide-y divide-gray-200\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          User\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Reward\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Points Cost\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Requested Date\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Status\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Approved By\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Approved Date\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Shipment Status\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Actions\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {allRedemptions.map((redemption: any) => (\n                        <tr key={redemption.id} data-testid={`row-redemption-${redemption.id}`}>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div>\n                              <div className=\"text-sm font-medium text-gray-900\">\n                                {redemption.userFirstName} {redemption.userLastName}\n                              </div>\n                              <div className=\"text-sm text-gray-500\">@{redemption.userName}</div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"text-sm font-medium text-gray-900\">\n                              {redemption.rewardName}\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                            {redemption.pointsCost?.toLocaleString()} points\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                            {formatDate(redemption.redeemedAt.toString())}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <Badge className={`${\n                              redemption.status === 'approved' ? 'bg-green-100 text-green-800' :\n                              redemption.status === 'pending' ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'\n                            }`}>\n                              {redemption.status === 'approved' ? 'Approved' :\n                               redemption.status === 'pending' ? 'Pending' : 'Rejected'}\n                            </Badge>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                            {redemption.approvedBy ? 'Admin' : '-'}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                            {redemption.approvedAt ? formatDate(redemption.approvedAt.toString()) : '-'}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <Badge className={`${\n                              redemption.shipmentStatus === 'delivered' ? 'bg-green-100 text-green-800' :\n                              redemption.shipmentStatus === 'shipped' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'\n                            }`}>\n                              {redemption.shipmentStatus === 'delivered' ? 'Delivered' :\n                               redemption.shipmentStatus === 'shipped' ? 'Shipped' : 'Pending'}\n                            </Badge>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                            {redemption.status === 'approved' && (\n                              <div className=\"flex space-x-2\">\n                                {redemption.shipmentStatus === 'pending' && (\n                                  <Button\n                                    size=\"sm\"\n                                    onClick={() => updateShipmentStatusMutation.mutate({ \n                                      redemptionId: redemption.id, \n                                      shipmentStatus: 'shipped' \n                                    })}\n                                    disabled={updateShipmentStatusMutation.isPending}\n                                    className=\"bg-blue-600 hover:bg-blue-700\"\n                                    data-testid={`button-ship-${redemption.id}`}\n                                  >\n                                    {updateShipmentStatusMutation.isPending ? \"Updating...\" : \"Mark Shipped\"}\n                                  </Button>\n                                )}\n                                {redemption.shipmentStatus === 'shipped' && (\n                                  <Button\n                                    size=\"sm\"\n                                    onClick={() => updateShipmentStatusMutation.mutate({ \n                                      redemptionId: redemption.id, \n                                      shipmentStatus: 'delivered' \n                                    })}\n                                    disabled={updateShipmentStatusMutation.isPending}\n                                    className=\"bg-green-600 hover:bg-green-700\"\n                                    data-testid={`button-deliver-${redemption.id}`}\n                                  >\n                                    {updateShipmentStatusMutation.isPending ? \"Updating...\" : \"Mark Delivered\"}\n                                  </Button>\n                                )}\n                                {redemption.shipmentStatus === 'delivered' && (\n                                  <span className=\"text-green-600 font-medium\">✓ Delivered</span>\n                                )}\n                              </div>\n                            )}\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              ) : (\n                <p className=\"text-gray-500 text-center py-8\" data-testid=\"text-no-redemptions\">\n                  No reward redemptions found\n                </p>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Support Tab */}\n        <TabsContent value=\"support\" className=\"mt-6\">\n          <SupportTicketsTab />\n        </TabsContent>\n\n        {/* Points Config Tab */}\n        <TabsContent value=\"points-config\" className=\"mt-6\">\n          <PointsConfigTab />\n        </TabsContent>\n      </Tabs>\n\n      <RewardModal\n        isOpen={isRewardModalOpen}\n        onClose={() => {\n          setIsRewardModalOpen(false);\n          setSelectedReward(null);\n        }}\n        reward={selectedReward}\n      />\n      \n      <DealModal\n        isOpen={isDealModalOpen}\n        onClose={() => {\n          setIsDealModalOpen(false);\n          setSelectedDeal(null);\n        }}\n        deal={selectedDeal}\n      />\n    </div>\n  );\n}\n","size_bytes":96699},"client/src/components/modals/deal-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Deal } from \"@shared/schema\";\n\nconst dealSchema = z.object({\n  productType: z.enum([\"software\", \"hardware\", \"equipment\"], {\n    required_error: \"Please select a product type\",\n  }),\n  productName: z.string().min(1, \"Product name is required\"),\n  dealValue: z.string().min(1, \"Deal value is required\"),\n  quantity: z.string().min(1, \"Quantity is required\"),\n  closeDate: z.string().min(1, \"Close date is required\"),\n  licenseAgreementNumber: z.string().optional(),\n  clientInfo: z.string().optional(),\n  status: z.enum([\"pending\", \"approved\", \"rejected\"]).optional(),\n});\n\ntype DealForm = z.infer<typeof dealSchema>;\n\ninterface DealModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  deal?: Deal | null;\n}\n\nexport default function DealModal({ isOpen, onClose, deal }: DealModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const isEditing = !!deal;\n\n  const form = useForm<DealForm>({\n    resolver: zodResolver(dealSchema),\n    defaultValues: {\n      productType: undefined,\n      productName: \"\",\n      dealValue: \"\",\n      quantity: \"\",\n      closeDate: \"\",\n      licenseAgreementNumber: \"\",\n      clientInfo: \"\",\n      status: \"pending\",\n    },\n  });\n\n  useEffect(() => {\n    if (deal) {\n      const closeDate = deal.closeDate ? new Date(deal.closeDate).toISOString().split('T')[0] : \"\";\n      form.reset({\n        productType: deal.productType,\n        productName: deal.productName || \"\",\n        dealValue: deal.dealValue?.toString() || \"\",\n        quantity: deal.quantity?.toString() || \"\",\n        closeDate: closeDate,\n        clientInfo: deal.clientInfo || \"\",\n        licenseAgreementNumber: deal.licenseAgreementNumber || \"\",\n        status: deal.status,\n      });\n    } else {\n      form.reset({\n        productType: undefined,\n        productName: \"\",\n        dealValue: \"\",\n        quantity: \"\",\n        closeDate: \"\",\n        licenseAgreementNumber: \"\",\n        clientInfo: \"\",\n        status: \"pending\",\n      });\n    }\n  }, [deal, form]);\n\n  const createDealMutation = useMutation({\n    mutationFn: async (data: DealForm) => {\n      const dealData = {\n        ...data,\n        dealValue: data.dealValue,\n        quantity: parseInt(data.quantity),\n        closeDate: data.closeDate,\n      };\n      \n      if (isEditing) {\n        return apiRequest(\"PATCH\", `/api/admin/deals/${deal?.id}`, dealData);\n      } else {\n        return apiRequest(\"POST\", \"/api/deals\", dealData);\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: isEditing \n          ? \"Deal updated successfully\" \n          : \"Deal registered successfully and is pending approval\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/deals\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/deals/recent\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/deals\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/deals/pending\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/reports\"] });\n      form.reset();\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || `Failed to ${isEditing ? \"update\" : \"register\"} deal`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: DealForm) => {\n    createDealMutation.mutate(data);\n  };\n\n  const handleClose = () => {\n    form.reset();\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-semibold text-gray-900\">\n            {isEditing ? \"Edit Deal\" : \"Register New Deal\"}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"productType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Product Type</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-product-type\">\n                          <SelectValue placeholder=\"Select product type\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"software\">Software</SelectItem>\n                        <SelectItem value=\"hardware\">Hardware</SelectItem>\n                        <SelectItem value=\"equipment\">Equipment</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"dealValue\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Deal Value ($)</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"number\"\n                        placeholder=\"25000\"\n                        data-testid=\"input-deal-value\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"productName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Product Name</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"Enterprise Software License\"\n                      data-testid=\"input-product-name\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"quantity\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Quantity/Licenses</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"number\"\n                        placeholder=\"100\"\n                        data-testid=\"input-quantity\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"closeDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Close Date</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"date\"\n                        data-testid=\"input-close-date\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {isEditing && (\n              <FormField\n                control={form.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-status\">\n                          <SelectValue placeholder=\"Select status\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"pending\">Pending</SelectItem>\n                        <SelectItem value=\"approved\">Approved</SelectItem>\n                        <SelectItem value=\"rejected\">Rejected</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n\n            <FormField\n              control={form.control}\n              name=\"licenseAgreementNumber\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>License Agreement Number (Optional)</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"LA-2024-001234\"\n                      data-testid=\"input-license-agreement-number\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"clientInfo\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Client Information (Optional)</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      {...field}\n                      placeholder=\"Client name and additional details...\"\n                      className=\"h-24\"\n                      data-testid=\"textarea-client-info\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={handleClose} data-testid=\"button-cancel\">\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createDealMutation.isPending}\n                data-testid=\"button-submit-deal\"\n              >\n                {createDealMutation.isPending \n                  ? (isEditing ? \"Updating...\" : \"Submitting...\") \n                  : (isEditing ? \"Update Deal\" : \"Submit Deal\")\n                }\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":11346},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/admin/PointsConfigTab.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Settings, DollarSign, Trophy, Calendar } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { PointsConfig } from \"@shared/schema\";\n\nconst pointsConfigFormSchema = z.object({\n  softwareRate: z.number().min(1, \"Debe ser al menos 1\").max(1000000, \"Valor muy alto\"),\n  hardwareRate: z.number().min(1, \"Debe ser al menos 1\").max(1000000, \"Valor muy alto\"),\n  equipmentRate: z.number().min(1, \"Debe ser al menos 1\").max(1000000, \"Valor muy alto\"),\n  grandPrizeThreshold: z.number().min(1, \"Debe ser al menos 1\").max(10000000, \"Valor muy alto\"),\n  redemptionStartDate: z.string().optional(),\n  redemptionEndDate: z.string().optional(),\n});\n\ntype PointsConfigForm = z.infer<typeof pointsConfigFormSchema>;\n\nexport default function PointsConfigTab() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: config, isLoading } = useQuery<PointsConfig>({\n    queryKey: [\"/api/admin/points-config\"],\n  });\n\n  const form = useForm<PointsConfigForm>({\n    resolver: zodResolver(pointsConfigFormSchema),\n    defaultValues: {\n      softwareRate: 1000,\n      hardwareRate: 5000,\n      equipmentRate: 10000,\n      grandPrizeThreshold: 50000,\n      redemptionStartDate: \"\",\n      redemptionEndDate: \"\",\n    },\n  });\n\n  useEffect(() => {\n    if (config) {\n      form.reset({\n        softwareRate: config.softwareRate,\n        hardwareRate: config.hardwareRate,\n        equipmentRate: config.equipmentRate,\n        grandPrizeThreshold: config.grandPrizeThreshold,\n        redemptionStartDate: config.redemptionStartDate \n          ? new Date(config.redemptionStartDate).toISOString().split('T')[0] \n          : \"\",\n        redemptionEndDate: config.redemptionEndDate \n          ? new Date(config.redemptionEndDate).toISOString().split('T')[0] \n          : \"\",\n      });\n    }\n  }, [config, form]);\n\n  const updateConfigMutation = useMutation({\n    mutationFn: async (data: PointsConfigForm) => {\n      const payload = {\n        softwareRate: data.softwareRate,\n        hardwareRate: data.hardwareRate,\n        equipmentRate: data.equipmentRate,\n        grandPrizeThreshold: data.grandPrizeThreshold,\n        redemptionStartDate: data.redemptionStartDate ? new Date(data.redemptionStartDate).toISOString() : null,\n        redemptionEndDate: data.redemptionEndDate ? new Date(data.redemptionEndDate).toISOString() : null,\n      };\n      const response = await apiRequest(\"PATCH\", \"/api/admin/points-config\", payload);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/points-config\"] });\n      toast({\n        title: \"Configuración actualizada\",\n        description: \"Las reglas de asignación de puntos han sido actualizadas exitosamente\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"No se pudo actualizar la configuración\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: PointsConfigForm) => {\n    updateConfigMutation.mutate(data);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-32 w-full\" />\n        <Skeleton className=\"h-96 w-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"text-2xl font-bold tracking-tight\" data-testid=\"text-points-config-title\">\n          Configuración de Puntos\n        </h2>\n        <p className=\"text-muted-foreground\" data-testid=\"text-points-config-description\">\n          Configura las reglas de asignación de puntos y el umbral del gran premio\n        </p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Settings className=\"h-5 w-5\" />\n            Reglas de Asignación de Puntos\n          </CardTitle>\n          <CardDescription>\n            Define cuántos dólares se necesitan para obtener 1 punto según el tipo de producto\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <div className=\"grid gap-6 md:grid-cols-3\">\n                <FormField\n                  control={form.control}\n                  name=\"softwareRate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center gap-2\">\n                        <DollarSign className=\"h-4 w-4 text-blue-500\" />\n                        Software\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          placeholder=\"1000\"\n                          data-testid=\"input-software-rate\"\n                          {...field}\n                          onChange={(e) => field.onChange(Number(e.target.value))}\n                        />\n                      </FormControl>\n                      <FormDescription>Dólares por 1 punto</FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"hardwareRate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center gap-2\">\n                        <DollarSign className=\"h-4 w-4 text-purple-500\" />\n                        Hardware\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          placeholder=\"5000\"\n                          data-testid=\"input-hardware-rate\"\n                          {...field}\n                          onChange={(e) => field.onChange(Number(e.target.value))}\n                        />\n                      </FormControl>\n                      <FormDescription>Dólares por 1 punto</FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"equipmentRate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center gap-2\">\n                        <DollarSign className=\"h-4 w-4 text-green-500\" />\n                        Equipment\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          placeholder=\"10000\"\n                          data-testid=\"input-equipment-rate\"\n                          {...field}\n                          onChange={(e) => field.onChange(Number(e.target.value))}\n                        />\n                      </FormControl>\n                      <FormDescription>Dólares por 1 punto</FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"border-t pt-6\">\n                <Card className=\"bg-gradient-to-r from-yellow-50 to-orange-50 border-yellow-200\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2 text-lg\">\n                      <Trophy className=\"h-5 w-5 text-yellow-600\" />\n                      Gran Premio\n                    </CardTitle>\n                    <CardDescription>\n                      Puntos necesarios para alcanzar el gran premio\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <FormField\n                      control={form.control}\n                      name=\"grandPrizeThreshold\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Umbral de Puntos</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              placeholder=\"50000\"\n                              data-testid=\"input-grand-prize-threshold\"\n                              {...field}\n                              onChange={(e) => field.onChange(Number(e.target.value))}\n                            />\n                          </FormControl>\n                          <FormDescription>\n                            Los usuarios que alcancen este número de puntos ganarán el gran premio\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </CardContent>\n                </Card>\n              </div>\n\n              <div className=\"border-t pt-6\">\n                <Card className=\"bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2 text-lg\">\n                      <Calendar className=\"h-5 w-5 text-blue-600\" />\n                      Período de Redención\n                    </CardTitle>\n                    <CardDescription>\n                      Define el rango de fechas durante el cual los usuarios pueden redimir sus puntos\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid gap-6 md:grid-cols-2\">\n                      <FormField\n                        control={form.control}\n                        name=\"redemptionStartDate\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Fecha de Inicio</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"date\"\n                                data-testid=\"input-redemption-start-date\"\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormDescription>\n                              Inicio del período de redención\n                            </FormDescription>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"redemptionEndDate\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Fecha de Fin</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"date\"\n                                data-testid=\"input-redemption-end-date\"\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormDescription>\n                              Fin del período de redención\n                            </FormDescription>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <div className=\"flex justify-end gap-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => form.reset()}\n                  disabled={updateConfigMutation.isPending}\n                  data-testid=\"button-reset\"\n                >\n                  Restablecer\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={updateConfigMutation.isPending}\n                  data-testid=\"button-save-config\"\n                >\n                  {updateConfigMutation.isPending ? \"Guardando...\" : \"Guardar Configuración\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n\n      {config?.updatedAt && (\n        <div className=\"text-sm text-muted-foreground text-center\">\n          Última actualización: {new Date(config.updatedAt).toLocaleString(\"es-ES\")}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":13148},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"server/storage.ts":{"content":"// ───────────────────────────────────────────────\n// Database schema and types\n// ───────────────────────────────────────────────\nimport {\n  campaigns,\n  deals,\n  notifications,\n  pointsConfig,\n  pointsHistory,\n  rewards,\n  supportTickets,\n  userRewards,\n  users,\n  type Campaign,\n  type Deal,\n  type DealWithUser,\n  type InsertCampaign,\n  type InsertDeal,\n  type InsertNotification,\n  type InsertPointsHistory,\n  type InsertReward,\n  type InsertSupportTicket,\n  type InsertUser,\n  type InsertUserReward,\n  type Notification,\n  type PointsConfig,\n  type PointsHistory,\n  type Reward,\n  type SupportTicket,\n  type SupportTicketWithUser,\n  type UpdateDeal,\n  type UpdatePointsConfig,\n  type UpdateSupportTicket,\n  type User,\n  type UserReward,\n} from \"@shared/schema\";\n\n// ───────────────────────────────────────────────\n// Database connection and ORM helpers\n// ───────────────────────────────────────────────\nimport { db } from \"./db\";\nimport { and, desc, eq, count, sum, gte, gt, lte, isNotNull, sql } from \"drizzle-orm\";\n\n// ───────────────────────────────────────────────\n// Utilities\n// ───────────────────────────────────────────────\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  getUserStats(userId: string): Promise<{\n    totalPoints: number;\n    availablePoints: number;\n    totalDeals: number;\n    pendingDeals: number;\n    redeemedRewards: number;\n  }>;\n\n  // Deal methods\n  createDeal(deal: InsertDeal): Promise<Deal>;\n  getDeal(id: string): Promise<Deal | undefined>;\n  getUserDeals(userId: string): Promise<Deal[]>;\n  getPendingDeals(): Promise<DealWithUser[]>;\n  approveDeal(id: string, approvedBy: string): Promise<Deal | undefined>;\n  rejectDeal(id: string): Promise<Deal | undefined>;\n  updateDeal(id: string, updates: UpdateDeal): Promise<Deal | undefined>;\n  getRecentDeals(userId: string, limit?: number): Promise<Deal[]>;\n\n  // Reward methods\n  getRewards(): Promise<Reward[]>;\n  getReward(id: string): Promise<Reward | undefined>;\n  createReward(reward: InsertReward): Promise<Reward>;\n  updateReward(\n    id: string,\n    updates: Partial<Reward>,\n  ): Promise<Reward | undefined>;\n  deleteReward(id: string): Promise<Reward | undefined>;\n  redeemReward(userId: string, rewardId: string): Promise<UserReward>;\n  getUserRewards(userId: string): Promise<UserReward[]>;\n  updateRewardShipmentStatus(\n    rewardRedemptionId: string,\n    shipmentStatus: \"pending\" | \"shipped\" | \"delivered\",\n    adminId: string,\n  ): Promise<UserReward | undefined>;\n  approveRewardRedemption(\n    rewardRedemptionId: string,\n    adminId: string,\n  ): Promise<UserReward | undefined>;\n  rejectRewardRedemption(\n    rewardRedemptionId: string,\n    adminId: string,\n    reason?: string,\n  ): Promise<UserReward | undefined>;\n  getPendingRewardRedemptions(): Promise<\n    Array<\n      UserReward & {\n        userName?: string;\n        userFirstName?: string;\n        userLastName?: string;\n        rewardName?: string;\n      }\n    >\n  >;\n  getAllRewardRedemptions(): Promise<\n    Array<\n      UserReward & {\n        userName?: string;\n        userFirstName?: string;\n        userLastName?: string;\n        rewardName?: string;\n        pointsCost?: number;\n      }\n    >\n  >;\n  getUserRewardsWithDetails(\n    userId: string,\n  ): Promise<Array<UserReward & { rewardName?: string; pointsCost?: number }>>;\n\n  // Points methods\n  addPointsHistory(entry: InsertPointsHistory): Promise<PointsHistory>;\n  getUserPointsHistory(userId: string): Promise<PointsHistory[]>;\n  getUserTotalPoints(userId: string): Promise<number>;\n  getUserAvailablePoints(userId: string): Promise<number>;\n  getTopUsersByPoints(limit?: number): Promise<\n    Array<{\n      userId: string;\n      username: string;\n      firstName: string;\n      lastName: string;\n      totalPoints: number;\n    }>\n  >;\n\n  // Campaign methods\n  getCampaigns(): Promise<Campaign[]>;\n  getActiveCampaigns(): Promise<Campaign[]>;\n\n  // Admin methods\n  getAllUsers(): Promise<User[]>;\n  getAllDeals(\n    page?: number,\n    limit?: number,\n  ): Promise<{ deals: DealWithUser[]; total: number }>;\n  getPendingUsers(): Promise<User[]>;\n  approveUser(userId: string, approvedBy: string): Promise<User | undefined>;\n  rejectUser(userId: string): Promise<User | undefined>;\n  deleteUser(id: string): Promise<User | undefined>;\n  getReportsData(filters: {\n    country?: string;\n    startDate?: Date;\n    endDate?: Date;\n  }): Promise<{\n    userCount: number;\n    dealCount: number;\n    totalRevenue: number;\n    redeemedRewards: number;\n  }>;\n\n  getRewardRedemptionsReport(filters: {\n    startDate?: Date;\n    endDate?: Date;\n  }): Promise<\n    Array<{\n      userName: string;\n      userFirstName: string;\n      userLastName: string;\n      userEmail: string;\n      rewardName: string;\n      pointsCost: number;\n      status: string;\n      redeemedAt: Date;\n      approvedAt: Date | null;\n    }>\n  >;\n\n  // Notification methods\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  getUserNotifications(userId: string): Promise<Notification[]>;\n\n  // Support Ticket methods\n  createSupportTicket(ticket: InsertSupportTicket): Promise<SupportTicket>;\n  getSupportTicket(id: string): Promise<SupportTicket | undefined>;\n  getUserSupportTickets(userId: string): Promise<SupportTicket[]>;\n  getAllSupportTickets(): Promise<SupportTicketWithUser[]>;\n  updateSupportTicket(\n    id: string,\n    updates: UpdateSupportTicket,\n  ): Promise<SupportTicket | undefined>;\n\n  // Points Config methods\n  getPointsConfig(): Promise<PointsConfig | undefined>;\n  updatePointsConfig(\n    updates: UpdatePointsConfig,\n    updatedBy: string,\n  ): Promise<PointsConfig | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async updateUser(\n    id: string,\n    updates: Partial<User>,\n  ): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  async getUserStats(userId: string): Promise<{\n    totalPoints: number;\n    availablePoints: number;\n    totalDeals: number;\n    pendingDeals: number;\n    redeemedRewards: number;\n  }> {\n    const [totalPointsResult] = await db\n      .select({ total: sum(pointsHistory.points) })\n      .from(pointsHistory)\n      .where(eq(pointsHistory.userId, userId));\n\n    const [totalDealsResult] = await db\n      .select({ count: count() })\n      .from(deals)\n      .where(eq(deals.userId, userId));\n\n    const [pendingDealsResult] = await db\n      .select({ count: count() })\n      .from(deals)\n      .where(and(eq(deals.userId, userId), eq(deals.status, \"pending\")));\n\n    const [redeemedRewardsResult] = await db\n      .select({ count: count() })\n      .from(pointsHistory)\n      .where(\n        and(\n          eq(pointsHistory.userId, userId),\n          isNotNull(pointsHistory.rewardId),\n        ),\n      );\n\n    const totalPoints = Number(totalPointsResult?.total || 0);\n    const availablePoints = await this.getUserAvailablePoints(userId);\n\n    return {\n      totalPoints,\n      availablePoints,\n      totalDeals: totalDealsResult?.count || 0,\n      pendingDeals: pendingDealsResult?.count || 0,\n      redeemedRewards: redeemedRewardsResult?.count || 0,\n    };\n  }\n\n  async createDeal(deal: InsertDeal): Promise<Deal> {\n    const [createdDeal] = await db.insert(deals).values(deal).returning();\n    return createdDeal;\n  }\n\n  async getDeal(id: string): Promise<Deal | undefined> {\n    const [deal] = await db.select().from(deals).where(eq(deals.id, id));\n    return deal || undefined;\n  }\n\n  async getUserDeals(userId: string): Promise<Deal[]> {\n    return await db\n      .select()\n      .from(deals)\n      .where(eq(deals.userId, userId))\n      .orderBy(desc(deals.createdAt));\n  }\n\n  async getPendingDeals(): Promise<DealWithUser[]> {\n    const result = await db\n      .select({\n        id: deals.id,\n        userId: deals.userId,\n        productType: deals.productType,\n        productName: deals.productName,\n        dealValue: deals.dealValue,\n        quantity: deals.quantity,\n        closeDate: deals.closeDate,\n        clientInfo: deals.clientInfo,\n        licenseAgreementNumber: deals.licenseAgreementNumber,\n        status: deals.status,\n        pointsEarned: deals.pointsEarned,\n        approvedBy: deals.approvedBy,\n        approvedAt: deals.approvedAt,\n        createdAt: deals.createdAt,\n        updatedAt: deals.updatedAt,\n        userFirstName: users.firstName,\n        userLastName: users.lastName,\n        userName: users.username,\n      })\n      .from(deals)\n      .leftJoin(users, eq(deals.userId, users.id))\n      .where(eq(deals.status, \"pending\"))\n      .orderBy(desc(deals.createdAt));\n\n    return result as DealWithUser[];\n  }\n\n  // Calculate points based on product type and deal value using dynamic configuration\n  private async calculatePointsForDeal(\n    productType: string,\n    dealValue: number,\n  ): Promise<number> {\n    const value = Number(dealValue);\n    if (isNaN(value) || value <= 0) return 0;\n\n    const config = await this.getPointsConfig();\n\n    const softwareRate = config?.softwareRate || 1000;\n    const hardwareRate = config?.hardwareRate || 5000;\n    const equipmentRate = config?.equipmentRate || 10000;\n\n    switch (productType) {\n      case \"software\":\n        return Math.floor(value / softwareRate);\n      case \"hardware\":\n        return Math.floor(value / hardwareRate);\n      case \"equipment\":\n        return Math.floor(value / equipmentRate);\n      default:\n        return 0;\n    }\n  }\n\n  async approveDeal(id: string, approvedBy: string): Promise<Deal | undefined> {\n    const deal = await this.getDeal(id);\n    if (!deal) return undefined;\n\n    // Calculate points based on dynamic configuration\n    const pointsEarned = await this.calculatePointsForDeal(\n      deal.productType,\n      Number(deal.dealValue),\n    );\n\n    const [updatedDeal] = await db\n      .update(deals)\n      .set({\n        status: \"approved\",\n        pointsEarned,\n        approvedBy,\n        approvedAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .where(eq(deals.id, id))\n      .returning();\n\n    // Add points to history\n    if (updatedDeal && pointsEarned > 0) {\n      await this.addPointsHistory({\n        userId: updatedDeal.userId,\n        dealId: id,\n        points: pointsEarned,\n        description: `Points earned for deal: ${deal.productName}`,\n      });\n    }\n\n    return updatedDeal || undefined;\n  }\n\n  // Recalculate points for all existing deals based on new formula\n  async recalculateAllDealsPoints(): Promise<{\n    updated: number;\n    errors: string[];\n  }> {\n    const allDeals = await db.select().from(deals);\n    let updated = 0;\n    const errors: string[] = [];\n\n    for (const deal of allDeals) {\n      try {\n        const newPoints = await this.calculatePointsForDeal(\n          deal.productType,\n          Number(deal.dealValue),\n        );\n\n        // Only update if points changed or deal is approved\n        if (\n          (deal.pointsEarned || 0) !== newPoints &&\n          deal.status === \"approved\"\n        ) {\n          await db\n            .update(deals)\n            .set({\n              pointsEarned: newPoints,\n              updatedAt: new Date(),\n            })\n            .where(eq(deals.id, deal.id));\n\n          // Update points history - remove old entry if exists and add new one\n          if (newPoints > 0) {\n            // Remove old points history for this deal\n            await db\n              .delete(pointsHistory)\n              .where(eq(pointsHistory.dealId, deal.id));\n\n            // Add new points history entry\n            await this.addPointsHistory({\n              userId: deal.userId,\n              dealId: deal.id,\n              points: newPoints,\n              description: `Points recalculated for deal: ${deal.productName}`,\n            });\n          }\n\n          updated++;\n        } else if (deal.status !== \"approved\" && (deal.pointsEarned || 0) > 0) {\n          // Reset points for non-approved deals\n          await db\n            .update(deals)\n            .set({\n              pointsEarned: 0,\n              updatedAt: new Date(),\n            })\n            .where(eq(deals.id, deal.id));\n\n          // Remove points history for non-approved deals\n          await db\n            .delete(pointsHistory)\n            .where(eq(pointsHistory.dealId, deal.id));\n\n          updated++;\n        }\n      } catch (error) {\n        errors.push(`Failed to update deal ${deal.id}: ${error}`);\n      }\n    }\n\n    return { updated, errors };\n  }\n\n  async rejectDeal(id: string): Promise<Deal | undefined> {\n    const [updatedDeal] = await db\n      .update(deals)\n      .set({ status: \"rejected\", updatedAt: new Date() })\n      .where(eq(deals.id, id))\n      .returning();\n    return updatedDeal || undefined;\n  }\n\n  async updateDeal(id: string, updates: UpdateDeal): Promise<Deal | undefined> {\n    const [updatedDeal] = await db\n      .update(deals)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(deals.id, id))\n      .returning();\n    return updatedDeal || undefined;\n  }\n\n  async getRecentDeals(userId: string, limit = 10): Promise<Deal[]> {\n    return await db\n      .select()\n      .from(deals)\n      .where(eq(deals.userId, userId))\n      .orderBy(desc(deals.createdAt))\n      .limit(limit);\n  }\n\n  async getRewards(): Promise<Reward[]> {\n    return await db\n      .select()\n      .from(rewards)\n      .where(eq(rewards.isActive, true))\n      .orderBy(rewards.pointsCost);\n  }\n\n  async getReward(id: string): Promise<Reward | undefined> {\n    const [reward] = await db.select().from(rewards).where(eq(rewards.id, id));\n    return reward || undefined;\n  }\n\n  async createReward(reward: InsertReward): Promise<Reward> {\n    const [createdReward] = await db.insert(rewards).values(reward).returning();\n    return createdReward;\n  }\n\n  async updateReward(\n    id: string,\n    updates: Partial<Reward>,\n  ): Promise<Reward | undefined> {\n    const [updatedReward] = await db\n      .update(rewards)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(rewards.id, id))\n      .returning();\n    return updatedReward || undefined;\n  }\n\n  async deleteReward(id: string): Promise<Reward | undefined> {\n    const [deletedReward] = await db\n      .delete(rewards)\n      .where(eq(rewards.id, id))\n      .returning();\n    return deletedReward || undefined;\n  }\n\n  async redeemReward(userId: string, rewardId: string): Promise<UserReward> {\n    const reward = await this.getReward(rewardId);\n    if (!reward) throw new Error(\"Reward not found\");\n\n    // Check if user already has a pending redemption for this reward\n    const [existingRedemption] = await db\n      .select()\n      .from(userRewards)\n      .where(\n        and(\n          eq(userRewards.userId, userId),\n          eq(userRewards.rewardId, rewardId),\n          eq(userRewards.status, \"pending\"),\n        ),\n      );\n\n    if (existingRedemption) {\n      throw new Error(\"You already have a pending redemption for this reward\");\n    }\n\n    const availablePoints = await this.getUserAvailablePoints(userId);\n    if (availablePoints < reward.pointsCost) {\n      throw new Error(\"Insufficient points\");\n    }\n\n    // Create pending redemption record\n    const [userReward] = await db\n      .insert(userRewards)\n      .values({\n        userId,\n        rewardId,\n        status: \"pending\",\n      })\n      .returning();\n\n    // Don't deduct points yet - wait for approval\n    return userReward;\n  }\n\n  async approveRewardRedemption(\n    rewardRedemptionId: string,\n    adminId: string,\n  ): Promise<UserReward | undefined> {\n    // Get the reward redemption\n    const [redemption] = await db\n      .select()\n      .from(userRewards)\n      .where(eq(userRewards.id, rewardRedemptionId));\n    if (!redemption) throw new Error(\"Redemption not found\");\n\n    if (redemption.status !== \"pending\") {\n      throw new Error(\"Redemption is not pending\");\n    }\n\n    const reward = await this.getReward(redemption.rewardId);\n    if (!reward) throw new Error(\"Reward not found\");\n\n    // Update redemption status\n    const [updatedRedemption] = await db\n      .update(userRewards)\n      .set({\n        status: \"approved\",\n        approvedBy: adminId,\n        approvedAt: new Date(),\n      })\n      .where(eq(userRewards.id, rewardRedemptionId))\n      .returning();\n\n    // Now deduct points\n    await this.addPointsHistory({\n      userId: redemption.userId,\n      rewardId: redemption.rewardId,\n      points: -reward.pointsCost,\n      description: `Points redeemed for: ${reward.name}`,\n    });\n\n    return updatedRedemption || undefined;\n  }\n\n  async rejectRewardRedemption(\n    rewardRedemptionId: string,\n    adminId: string,\n    reason?: string,\n  ): Promise<UserReward | undefined> {\n    const [updatedRedemption] = await db\n      .update(userRewards)\n      .set({\n        status: \"rejected\",\n        approvedBy: adminId,\n        approvedAt: new Date(),\n        rejectionReason: reason,\n      })\n      .where(eq(userRewards.id, rewardRedemptionId))\n      .returning();\n\n    return updatedRedemption || undefined;\n  }\n\n  async getPendingRewardRedemptions(): Promise<\n    Array<\n      UserReward & {\n        userName?: string;\n        userFirstName?: string;\n        userLastName?: string;\n        rewardName?: string;\n      }\n    >\n  > {\n    const result = await db\n      .select({\n        id: userRewards.id,\n        userId: userRewards.userId,\n        rewardId: userRewards.rewardId,\n        status: userRewards.status,\n        approvedBy: userRewards.approvedBy,\n        approvedAt: userRewards.approvedAt,\n        rejectionReason: userRewards.rejectionReason,\n        redeemedAt: userRewards.redeemedAt,\n        deliveredAt: userRewards.deliveredAt,\n        deliveryAddress: userRewards.deliveryAddress,\n        userName: users.username,\n        userFirstName: users.firstName,\n        userLastName: users.lastName,\n        rewardName: rewards.name,\n      })\n      .from(userRewards)\n      .leftJoin(users, eq(userRewards.userId, users.id))\n      .leftJoin(rewards, eq(userRewards.rewardId, rewards.id))\n      .where(eq(userRewards.status, \"pending\"))\n      .orderBy(desc(userRewards.redeemedAt));\n\n    return result as Array<\n      UserReward & {\n        userName?: string;\n        userFirstName?: string;\n        userLastName?: string;\n        rewardName?: string;\n      }\n    >;\n  }\n\n  async getUserRewards(userId: string): Promise<UserReward[]> {\n    return await db\n      .select()\n      .from(userRewards)\n      .where(eq(userRewards.userId, userId))\n      .orderBy(desc(userRewards.redeemedAt));\n  }\n\n  async getAllRewardRedemptions(): Promise<\n    Array<\n      UserReward & {\n        userName?: string;\n        userFirstName?: string;\n        userLastName?: string;\n        rewardName?: string;\n        pointsCost?: number;\n      }\n    >\n  > {\n    const result = await db\n      .select({\n        id: userRewards.id,\n        userId: userRewards.userId,\n        rewardId: userRewards.rewardId,\n        status: userRewards.status,\n        shipmentStatus: userRewards.shipmentStatus,\n        approvedBy: userRewards.approvedBy,\n        approvedAt: userRewards.approvedAt,\n        rejectionReason: userRewards.rejectionReason,\n        redeemedAt: userRewards.redeemedAt,\n        deliveredAt: userRewards.deliveredAt,\n        deliveryAddress: userRewards.deliveryAddress,\n        shippedAt: userRewards.shippedAt,\n        shippedBy: userRewards.shippedBy,\n        userName: users.username,\n        userFirstName: users.firstName,\n        userLastName: users.lastName,\n        rewardName: rewards.name,\n        pointsCost: rewards.pointsCost,\n      })\n      .from(userRewards)\n      .leftJoin(users, eq(userRewards.userId, users.id))\n      .leftJoin(rewards, eq(userRewards.rewardId, rewards.id))\n      .orderBy(desc(userRewards.redeemedAt));\n\n    return result as Array<\n      UserReward & {\n        userName?: string;\n        userFirstName?: string;\n        userLastName?: string;\n        rewardName?: string;\n        pointsCost?: number;\n      }\n    >;\n  }\n\n  async getUserRewardsWithDetails(\n    userId: string,\n  ): Promise<Array<UserReward & { rewardName?: string; pointsCost?: number }>> {\n    const result = await db\n      .select({\n        id: userRewards.id,\n        userId: userRewards.userId,\n        rewardId: userRewards.rewardId,\n        status: userRewards.status,\n        shipmentStatus: userRewards.shipmentStatus,\n        approvedBy: userRewards.approvedBy,\n        approvedAt: userRewards.approvedAt,\n        rejectionReason: userRewards.rejectionReason,\n        redeemedAt: userRewards.redeemedAt,\n        deliveredAt: userRewards.deliveredAt,\n        deliveryAddress: userRewards.deliveryAddress,\n        shippedAt: userRewards.shippedAt,\n        shippedBy: userRewards.shippedBy,\n        rewardName: rewards.name,\n        pointsCost: rewards.pointsCost,\n      })\n      .from(userRewards)\n      .leftJoin(rewards, eq(userRewards.rewardId, rewards.id))\n      .where(eq(userRewards.userId, userId))\n      .orderBy(desc(userRewards.redeemedAt));\n\n    return result as Array<\n      UserReward & { rewardName?: string; pointsCost?: number }\n    >;\n  }\n\n  async updateRewardShipmentStatus(\n    rewardRedemptionId: string,\n    shipmentStatus: \"pending\" | \"shipped\" | \"delivered\",\n    adminId: string,\n  ): Promise<UserReward | undefined> {\n    // Get the current redemption to access reward and user info\n    const [currentRedemption] = await db\n      .select({\n        id: userRewards.id,\n        userId: userRewards.userId,\n        rewardId: userRewards.rewardId,\n        rewardName: rewards.name,\n      })\n      .from(userRewards)\n      .leftJoin(rewards, eq(userRewards.rewardId, rewards.id))\n      .where(eq(userRewards.id, rewardRedemptionId));\n\n    if (!currentRedemption) {\n      return undefined;\n    }\n\n    const updateData: any = {\n      shipmentStatus,\n      shippedBy: adminId,\n    };\n\n    if (shipmentStatus === \"shipped\") {\n      updateData.shippedAt = new Date();\n    } else if (shipmentStatus === \"delivered\") {\n      updateData.deliveredAt = new Date();\n    }\n\n    const [updatedRedemption] = await db\n      .update(userRewards)\n      .set(updateData)\n      .where(eq(userRewards.id, rewardRedemptionId))\n      .returning();\n\n    // Create notification for user\n    if (updatedRedemption && currentRedemption.rewardName) {\n      let notificationTitle = \"\";\n      let notificationMessage = \"\";\n      let notificationType = \"info\";\n\n      if (shipmentStatus === \"shipped\") {\n        notificationTitle = \"Reward Shipped! 📦\";\n        notificationMessage = `Your reward \"${currentRedemption.rewardName}\" has been shipped and is on its way to you!`;\n        notificationType = \"success\";\n      } else if (shipmentStatus === \"delivered\") {\n        notificationTitle = \"Reward Delivered! 🎉\";\n        notificationMessage = `Your reward \"${currentRedemption.rewardName}\" has been successfully delivered. Enjoy your reward!`;\n        notificationType = \"success\";\n      }\n\n      if (notificationTitle) {\n        await this.createNotification({\n          userId: currentRedemption.userId,\n          title: notificationTitle,\n          message: notificationMessage,\n          type: notificationType,\n        });\n      }\n    }\n\n    return updatedRedemption || undefined;\n  }\n\n  async addPointsHistory(entry: InsertPointsHistory): Promise<PointsHistory> {\n    const [pointsEntry] = await db\n      .insert(pointsHistory)\n      .values(entry)\n      .returning();\n    return pointsEntry;\n  }\n\n  async getUserPointsHistory(userId: string): Promise<PointsHistory[]> {\n    return await db\n      .select()\n      .from(pointsHistory)\n      .where(eq(pointsHistory.userId, userId))\n      .orderBy(desc(pointsHistory.createdAt));\n  }\n\n  async getUserTotalPoints(userId: string): Promise<number> {\n    const [result] = await db\n      .select({ total: sum(pointsHistory.points) })\n      .from(pointsHistory)\n      .where(eq(pointsHistory.userId, userId));\n    return Number(result?.total || 0);\n  }\n\n  async getUserAvailablePoints(userId: string): Promise<number> {\n    const [result] = await db\n      .select({ total: sum(pointsHistory.points) })\n      .from(pointsHistory)\n      .where(eq(pointsHistory.userId, userId));\n    return Math.max(0, Number(result?.total || 0));\n  }\n\n  async getTopUsersByPoints(limit = 5): Promise<\n    Array<{\n      userId: string;\n      username: string;\n      firstName: string;\n      lastName: string;\n      totalPoints: number;\n    }>\n  > {\n    const result = await db\n      .select({\n        userId: pointsHistory.userId,\n        username: users.username,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        totalPoints: sum(pointsHistory.points),\n      })\n      .from(pointsHistory)\n      .innerJoin(users, eq(pointsHistory.userId, users.id))\n      .groupBy(\n        pointsHistory.userId,\n        users.username,\n        users.firstName,\n        users.lastName,\n      )\n      .having(sql`SUM(${pointsHistory.points}) > 0`)\n      .orderBy(desc(sum(pointsHistory.points)))\n      .limit(limit);\n\n    return result.map((row) => ({\n      userId: row.userId,\n      username: row.username || \"\",\n      firstName: row.firstName || \"\",\n      lastName: row.lastName || \"\",\n      totalPoints: Number(row.totalPoints || 0),\n    }));\n  }\n\n  async getCampaigns(): Promise<Campaign[]> {\n    return await db.select().from(campaigns).orderBy(desc(campaigns.createdAt));\n  }\n\n  async getActiveCampaigns(): Promise<Campaign[]> {\n    const now = new Date();\n    return await db\n      .select()\n      .from(campaigns)\n      .where(\n        and(\n          eq(campaigns.isActive, true),\n          lte(campaigns.startDate, now),\n          gte(campaigns.endDate, now),\n        ),\n      );\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  async getPendingUsers(): Promise<User[]> {\n    return db\n      .select()\n      .from(users)\n      .where(and(eq(users.isActive, true), eq(users.isApproved, false)))\n      .orderBy(desc(users.createdAt));\n  }\n\n  async approveUser(\n    userId: string,\n    approvedBy: string,\n  ): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({\n        isApproved: true,\n        approvedBy: approvedBy,\n        approvedAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user || undefined;\n  }\n\n  async rejectUser(userId: string): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({\n        isActive: false,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user || undefined;\n  }\n\n  async updateUserRole(\n    userId: string,\n    role: \"user\" | \"admin\",\n  ): Promise<User | undefined> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({\n        role,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return updatedUser || undefined;\n  }\n\n  async deleteUser(userId: string): Promise<User | undefined> {\n    // First, delete all points history associated with this user\n    await db.delete(pointsHistory).where(eq(pointsHistory.userId, userId));\n\n    // Delete all user rewards associated with this user\n    await db.delete(userRewards).where(eq(userRewards.userId, userId));\n\n    // Then, delete all deals associated with this user\n    await db.delete(deals).where(eq(deals.userId, userId));\n\n    // Finally, delete the user\n    const [deletedUser] = await db\n      .delete(users)\n      .where(eq(users.id, userId))\n      .returning();\n    return deletedUser || undefined;\n  }\n\n  async getAllDeals(\n    page: number = 1,\n    limit: number = 20,\n  ): Promise<{ deals: DealWithUser[]; total: number }> {\n    // Get total count\n    const [countResult] = await db.select({ count: count() }).from(deals);\n    const totalCount = countResult?.count || 0;\n\n    // Get paginated results\n    const offset = (page - 1) * limit;\n    const result = await db\n      .select({\n        id: deals.id,\n        userId: deals.userId,\n        productType: deals.productType,\n        productName: deals.productName,\n        dealValue: deals.dealValue,\n        quantity: deals.quantity,\n        closeDate: deals.closeDate,\n        clientInfo: deals.clientInfo,\n        licenseAgreementNumber: deals.licenseAgreementNumber,\n        status: deals.status,\n        pointsEarned: deals.pointsEarned,\n        approvedBy: deals.approvedBy,\n        approvedAt: deals.approvedAt,\n        createdAt: deals.createdAt,\n        updatedAt: deals.updatedAt,\n        userFirstName: users.firstName,\n        userLastName: users.lastName,\n        userName: users.username,\n      })\n      .from(deals)\n      .leftJoin(users, eq(deals.userId, users.id))\n      .orderBy(desc(deals.createdAt))\n      .limit(limit)\n      .offset(offset);\n\n    return {\n      deals: result as DealWithUser[],\n      total: totalCount,\n    };\n  }\n\n  async getReportsData(filters: {\n    country?: string;\n    startDate?: Date;\n    endDate?: Date;\n  }): Promise<{\n    userCount: number;\n    dealCount: number;\n    totalRevenue: number;\n    redeemedRewards: number;\n  }> {\n    // Apply filters\n    const userConditions = [];\n    const dealConditions = [];\n\n    if (filters.country) {\n      userConditions.push(eq(users.country, filters.country));\n    }\n    if (filters.startDate) {\n      dealConditions.push(gte(deals.createdAt, filters.startDate));\n    }\n    if (filters.endDate) {\n      dealConditions.push(lte(deals.createdAt, filters.endDate));\n    }\n\n    // Build queries with conditions\n    const userQueryBuilder = db.select({ count: count() }).from(users);\n    const dealQueryBuilder = db\n      .select({\n        count: count(),\n        revenue: sum(deals.dealValue),\n      })\n      .from(deals);\n\n    // Always filter deals by approved status\n    dealConditions.unshift(eq(deals.status, \"approved\"));\n\n    const [userResult] =\n      userConditions.length > 0\n        ? await userQueryBuilder.where(and(...userConditions))\n        : await userQueryBuilder;\n\n    const [dealResult] = await dealQueryBuilder.where(and(...dealConditions));\n\n    const [rewardResult] = await db\n      .select({ count: count() })\n      .from(pointsHistory)\n      .where(isNotNull(pointsHistory.rewardId));\n\n    return {\n      userCount: userResult?.count || 0,\n      dealCount: dealResult?.count || 0,\n      totalRevenue: Number(dealResult?.revenue || 0),\n      redeemedRewards: rewardResult?.count || 0,\n    };\n  }\n\n  async getUserRankingReport(filters: {\n    startDate?: Date;\n    endDate?: Date;\n  }): Promise<\n    Array<{\n      userId: string;\n      username: string;\n      firstName: string;\n      lastName: string;\n      email: string;\n      country: string;\n      totalPoints: number;\n      totalDeals: number;\n      totalSales: number;\n    }>\n  > {\n    const dealConditions = [eq(deals.status, \"approved\")];\n    const pointsConditions = [];\n\n    if (filters.startDate) {\n      dealConditions.push(gte(deals.createdAt, filters.startDate));\n      pointsConditions.push(gte(pointsHistory.createdAt, filters.startDate));\n    }\n    if (filters.endDate) {\n      dealConditions.push(lte(deals.createdAt, filters.endDate));\n      pointsConditions.push(lte(pointsHistory.createdAt, filters.endDate));\n    }\n\n    // Get user points in the date range - only sum POSITIVE points (earned points, not redeemed)\n    // Add condition to only include earned points (positive values), not spent points (negative values)\n    pointsConditions.push(gt(pointsHistory.points, 0));\n\n    const pointsQuery = db\n      .select({\n        userId: pointsHistory.userId,\n        totalPoints: sum(pointsHistory.points).as(\"totalPoints\"),\n      })\n      .from(pointsHistory)\n      .where(pointsConditions.length > 0 ? and(...pointsConditions) : undefined)\n      .groupBy(pointsHistory.userId);\n\n    // Get user deals in the date range\n    const dealsQuery = db\n      .select({\n        userId: deals.userId,\n        totalDeals: count(deals.id).as(\"totalDeals\"),\n        totalSales: sum(deals.dealValue).as(\"totalSales\"),\n      })\n      .from(deals)\n      .where(and(...dealConditions))\n      .groupBy(deals.userId);\n\n    // Get all users with their basic info\n    const usersResult = await db\n      .select({\n        id: users.id,\n        username: users.username,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        email: users.email,\n        country: users.country,\n      })\n      .from(users)\n      .where(eq(users.role, \"user\"));\n\n    const pointsResult = await pointsQuery;\n    const dealsResult = await dealsQuery;\n\n    // Combine all data\n    const userRanking = usersResult.map((user) => {\n      const userPoints = pointsResult.find((p) => p.userId === user.id);\n      const userDeals = dealsResult.find((d) => d.userId === user.id);\n\n      return {\n        userId: user.id,\n        username: user.username || \"\",\n        firstName: user.firstName || \"\",\n        lastName: user.lastName || \"\",\n        email: user.email || \"\",\n        country: user.country || \"\",\n        totalPoints: Number(userPoints?.totalPoints || 0),\n        totalDeals: Number(userDeals?.totalDeals || 0),\n        totalSales: Number(userDeals?.totalSales || 0),\n      };\n    });\n\n    // Sort by points in descending order\n    return userRanking.sort((a, b) => b.totalPoints - a.totalPoints);\n  }\n\n  async getRewardRedemptionsReport(filters: {\n    startDate?: Date;\n    endDate?: Date;\n  }): Promise<\n    Array<{\n      userName: string;\n      userFirstName: string;\n      userLastName: string;\n      userEmail: string;\n      rewardName: string;\n      pointsCost: number;\n      status: string;\n      redeemedAt: Date;\n      approvedAt: Date | null;\n    }>\n  > {\n    const conditions = [];\n\n    if (filters.startDate) {\n      conditions.push(gte(userRewards.redeemedAt, filters.startDate));\n    }\n    if (filters.endDate) {\n      conditions.push(lte(userRewards.redeemedAt, filters.endDate));\n    }\n\n    const result = await db\n      .select({\n        userName: users.username,\n        userFirstName: users.firstName,\n        userLastName: users.lastName,\n        userEmail: users.email,\n        rewardName: rewards.name,\n        pointsCost: rewards.pointsCost,\n        status: userRewards.status,\n        redeemedAt: userRewards.redeemedAt,\n        approvedAt: userRewards.approvedAt,\n      })\n      .from(userRewards)\n      .leftJoin(users, eq(userRewards.userId, users.id))\n      .leftJoin(rewards, eq(userRewards.rewardId, rewards.id))\n      .where(conditions.length > 0 ? and(...conditions) : undefined)\n      .orderBy(desc(userRewards.redeemedAt));\n\n    return result as Array<{\n      userName: string;\n      userFirstName: string;\n      userLastName: string;\n      userEmail: string;\n      rewardName: string;\n      pointsCost: number;\n      status: string;\n      redeemedAt: Date;\n      approvedAt: Date | null;\n    }>;\n  }\n\n  async getDealsPerUserReport(filters: {\n    startDate?: Date;\n    endDate?: Date;\n  }): Promise<\n    Array<{\n      userId: string;\n      username: string;\n      firstName: string;\n      lastName: string;\n      email: string;\n      country: string;\n      totalDeals: number;\n      totalSales: number;\n      averageDealSize: number;\n    }>\n  > {\n    const dealConditions = [eq(deals.status, \"approved\")];\n\n    if (filters.startDate) {\n      dealConditions.push(gte(deals.createdAt, filters.startDate));\n    }\n    if (filters.endDate) {\n      dealConditions.push(lte(deals.createdAt, filters.endDate));\n    }\n\n    // Get user deals in the date range\n    const dealsQuery = db\n      .select({\n        userId: deals.userId,\n        totalDeals: count(deals.id).as(\"totalDeals\"),\n        totalSales: sum(deals.dealValue).as(\"totalSales\"),\n      })\n      .from(deals)\n      .where(and(...dealConditions))\n      .groupBy(deals.userId);\n\n    // Get all users with their basic info\n    const usersResult = await db\n      .select({\n        id: users.id,\n        username: users.username,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        email: users.email,\n        country: users.country,\n      })\n      .from(users)\n      .where(eq(users.role, \"user\"));\n\n    const dealsResult = await dealsQuery;\n\n    // Combine all data\n    const dealsPerUser = usersResult.map((user) => {\n      const userDeals = dealsResult.find((d) => d.userId === user.id);\n      const totalDeals = Number(userDeals?.totalDeals || 0);\n      const totalSales = Number(userDeals?.totalSales || 0);\n      const averageDealSize = totalDeals > 0 ? totalSales / totalDeals : 0;\n\n      return {\n        userId: user.id,\n        username: user.username || \"\",\n        firstName: user.firstName || \"\",\n        lastName: user.lastName || \"\",\n        email: user.email || \"\",\n        country: user.country || \"\",\n        totalDeals: totalDeals,\n        totalSales: totalSales,\n        averageDealSize: Math.round(averageDealSize * 100) / 100, // Round to 2 decimal places\n      };\n    });\n\n    // Sort by total deals in descending order, then by total sales\n    return dealsPerUser.sort((a, b) => {\n      if (b.totalDeals !== a.totalDeals) {\n        return b.totalDeals - a.totalDeals;\n      }\n      return b.totalSales - a.totalSales;\n    });\n  }\n\n  async createNotification(\n    notification: InsertNotification,\n  ): Promise<Notification> {\n    const [newNotification] = await db\n      .insert(notifications)\n      .values(notification)\n      .returning();\n    return newNotification;\n  }\n\n  async getUserNotifications(userId: string): Promise<Notification[]> {\n    const userNotifications = await db\n      .select()\n      .from(notifications)\n      .where(eq(notifications.userId, userId))\n      .orderBy(desc(notifications.createdAt));\n    return userNotifications;\n  }\n\n  async createSupportTicket(\n    ticket: InsertSupportTicket,\n  ): Promise<SupportTicket> {\n    const [newTicket] = await db\n      .insert(supportTickets)\n      .values(ticket)\n      .returning();\n    return newTicket;\n  }\n\n  async getSupportTicket(id: string): Promise<SupportTicket | undefined> {\n    const [ticket] = await db\n      .select()\n      .from(supportTickets)\n      .where(eq(supportTickets.id, id));\n    return ticket || undefined;\n  }\n\n  async getUserSupportTickets(userId: string): Promise<SupportTicket[]> {\n    const tickets = await db\n      .select()\n      .from(supportTickets)\n      .where(eq(supportTickets.userId, userId))\n      .orderBy(desc(supportTickets.createdAt));\n    return tickets;\n  }\n\n  async getAllSupportTickets(): Promise<SupportTicketWithUser[]> {\n    const tickets = await db\n      .select({\n        id: supportTickets.id,\n        userId: supportTickets.userId,\n        subject: supportTickets.subject,\n        message: supportTickets.message,\n        status: supportTickets.status,\n        priority: supportTickets.priority,\n        assignedTo: supportTickets.assignedTo,\n        adminResponse: supportTickets.adminResponse,\n        respondedAt: supportTickets.respondedAt,\n        respondedBy: supportTickets.respondedBy,\n        createdAt: supportTickets.createdAt,\n        updatedAt: supportTickets.updatedAt,\n        userFirstName: users.firstName,\n        userLastName: users.lastName,\n        userName: users.username,\n        userEmail: users.email,\n      })\n      .from(supportTickets)\n      .leftJoin(users, eq(supportTickets.userId, users.id))\n      .orderBy(desc(supportTickets.createdAt));\n\n    return tickets as SupportTicketWithUser[];\n  }\n\n  async updateSupportTicket(\n    id: string,\n    updates: UpdateSupportTicket,\n  ): Promise<SupportTicket | undefined> {\n    const [ticket] = await db\n      .update(supportTickets)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(supportTickets.id, id))\n      .returning();\n    return ticket || undefined;\n  }\n\n  async getPointsConfig(): Promise<PointsConfig | undefined> {\n    const [config] = await db.select().from(pointsConfig).limit(1);\n    return config || undefined;\n  }\n\n  async updatePointsConfig(\n    updates: UpdatePointsConfig,\n    updatedBy: string,\n  ): Promise<PointsConfig | undefined> {\n    const existingConfig = await this.getPointsConfig();\n\n    if (!existingConfig) {\n      const [newConfig] = await db\n        .insert(pointsConfig)\n        .values({\n          ...updates,\n          updatedBy,\n          updatedAt: new Date(),\n        })\n        .returning();\n      return newConfig;\n    }\n\n    const [config] = await db\n      .update(pointsConfig)\n      .set({ ...updates, updatedBy, updatedAt: new Date() })\n      .where(eq(pointsConfig.id, existingConfig.id))\n      .returning();\n    return config || undefined;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":42268},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { getCurrentUser } from \"./lib/auth\";\n\n// Pages\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Deals from \"@/pages/deals\";\nimport Rewards from \"@/pages/rewards\";\nimport Admin from \"@/pages/admin\";\nimport NotFound from \"@/pages/not-found\";\n\n// Layout\nimport Navigation from \"@/components/layout/navigation\";\nimport SupportButton from \"@/components/SupportButton\";\n\nfunction AuthProvider({ children }: { children: React.ReactNode }) {\n  const { data: user, isLoading, error, isFetching } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: getCurrentUser,\n    retry: false,\n    staleTime: 1 * 60 * 1000, // 1 minute (reduced for faster updates)\n    gcTime: 2 * 60 * 1000, // 2 minutes (reduced for faster cleanup)\n    refetchOnWindowFocus: false, // Prevent unnecessary refetches\n    refetchOnReconnect: true,\n  });\n\n  const [location, setLocation] = useLocation();\n\n\n  // Always add header class when user exists or is loading\n  useEffect(() => {\n    if (user || isLoading || isFetching) {\n      document.body.classList.add('with-header');\n    } else {\n      document.body.classList.remove('with-header');\n    }\n    \n    // Cleanup function\n    return () => {\n      document.body.classList.remove('with-header');\n    };\n  }, [user, isLoading, isFetching]);\n\n  // Redirect authenticated users away from login/register pages\n  useEffect(() => {\n    if (user && (location === \"/login\" || location === \"/register\")) {\n      // Use the appropriate redirect based on user role\n      const redirectPath = user.role === \"admin\" ? \"/admin\" : \"/\";\n      setLocation(redirectPath);\n    }\n  }, [user, location, setLocation]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!user && location !== \"/login\" && location !== \"/register\") {\n    return <Login />;\n  }\n\n  return (\n    <div className={user ? \"with-header-container min-h-screen bg-white\" : \"\"}>\n      {user && <Navigation user={user} />}\n      <main className={user ? \"pt-0\" : \"\"}>\n        {children}\n      </main>\n      {user && <SupportButton />}\n    </div>\n  );\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/deals\" component={Deals} />\n      <Route path=\"/rewards\" component={Rewards} />\n      <Route path=\"/admin\" component={Admin} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <AuthProvider>\n          <Router />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3214},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(253, 81%, 33%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(134, 34%, 37%);\n  --secondary-foreground: hsl(60, 9.1%, 97.8%);\n  --accent: hsl(14, 84%, 53%);\n  --accent-foreground: hsl(60, 9.1%, 97.8%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n\n  /* Custom colors matching the design */\n  --primary-50: hsl(253, 81%, 96%);\n  --primary-100: hsl(253, 81%, 90%);\n  --primary-500: hsl(253, 81%, 33%);\n  --primary-600: hsl(253, 81%, 27%);\n  --primary-700: hsl(253, 81%, 20%);\n  \n  --secondary-50: hsl(134, 61%, 95%);\n  --secondary-500: hsl(134, 34%, 37%);\n  --secondary-600: hsl(134, 40%, 31%);\n  --secondary-700: hsl(134, 46%, 25%);\n  \n  --accent-50: hsl(14, 100%, 96%);\n  --accent-500: hsl(14, 84%, 53%);\n  --accent-600: hsl(14, 78%, 46%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(253, 81%, 33%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Raleway', sans-serif;\n  }\n\n  .champion-background {\n    background-image: url('/attached_assets/bg_1758836460974.jpg');\n    background-size: auto 80%;\n    background-position: right center;\n    background-repeat: no-repeat;\n    background-attachment: fixed;\n    background-color: #ffffff;\n  }\n  \n  body.with-header {\n    padding-top: 64px; /* Space for fixed header */\n  }\n  \n  .with-header-container {\n    min-height: 100vh;\n  }\n}\n\n@layer utilities {\n  .shadow-material {\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1), 0 8px 16px rgba(0,0,0,0.1);\n  }\n  \n  .shadow-material-lg {\n    box-shadow: 0 4px 8px rgba(0,0,0,0.12), 0 16px 24px rgba(0,0,0,0.14);\n  }\n}\n","size_bytes":2821},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"server/socket.ts":{"content":"import { Server as SocketServer } from \"socket.io\";\nimport type { Server } from \"http\";\n\nlet io: SocketServer | null = null;\n\nexport function initializeSocket(server: Server) {\n  io = new SocketServer(server, {\n    cors: { origin: \"*\" },\n  });\n\n  io.on(\"connection\", (socket) => {\n    console.log(\"🟢 Socket connected:\", socket.id);\n    \n    socket.on(\"disconnect\", () => {\n      console.log(\"🔴 Socket disconnected:\", socket.id);\n    });\n  });\n\n  return io;\n}\n\nexport function getIO(): SocketServer {\n  if (!io) {\n    throw new Error(\"Socket.IO no está inicializado. Llama initializeSocket() primero.\");\n  }\n  return io;\n}\n","size_bytes":629},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  Coins, \n  Handshake, \n  Gift, \n  DollarSign, \n  Plus, \n  BarChart3,\n  Users,\n  ClipboardCheck,\n  TrendingUp,\n  ChevronLeft,\n  ChevronRight\n} from \"lucide-react\";\nimport DealModal from \"@/components/modals/deal-modal\";\nimport { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport type { AuthUser } from \"@/lib/auth\";\nimport backgroundImage from \"@assets/BANNER-PRINICPAL_1758666220909.jpg\";\n\ninterface UserStats {\n  totalPoints: number;\n  availablePoints: number;\n  totalDeals: number;\n  pendingDeals: number;\n  redeemedRewards: number;\n}\n\ninterface Deal {\n  id: string;\n  productName: string;\n  dealValue: string;\n  pointsEarned: number;\n  status: string;\n  createdAt: string;\n}\n\ninterface Reward {\n  id: string;\n  name: string;\n  pointsCost: number;\n  category: string;\n  imageUrl?: string;\n}\n\nexport default function Dashboard() {\n  const [isDealModalOpen, setIsDealModalOpen] = useState(false);\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const [failedImages, setFailedImages] = useState<Set<string>>(new Set());\n  const [, navigate] = useLocation();\n\n  const { data: user } = useQuery<AuthUser>({\n    queryKey: [\"/api/auth/me\"],\n  });\n\n  // Redirect admin users to admin panel\n  useEffect(() => {\n    if (user && user.role === \"admin\") {\n      navigate(\"/admin\");\n    }\n  }, [user, navigate]);\n\n  const { data: stats, isLoading: statsLoading } = useQuery<UserStats>({\n    queryKey: [\"/api/users/stats\"],\n  });\n\n  const { data: recentDeals, isLoading: dealsLoading } = useQuery<Deal[]>({\n    queryKey: [\"/api/deals/recent\"],\n    select: (data) => data || [],\n  });\n\n  const { data: rewards, isLoading: rewardsLoading } = useQuery<Reward[]>({\n    queryKey: [\"/api/rewards\"],\n    select: (data) => data || [],\n  });\n\n  const { data: leaderboard, isLoading: leaderboardLoading } = useQuery<Array<{\n    userId: string;\n    username: string;\n    firstName: string;\n    lastName: string;\n    totalPoints: number;\n  }>>({\n    queryKey: [\"/api/users/leaderboard\"],\n    select: (data) => data || [],\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return \"bg-green-100 text-green-800\";\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"rejected\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const formatCurrency = (value: string | number) => {\n    return new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n    }).format(Number(value));\n  };\n\n  // Carousel navigation functions\n  const itemsPerSlide = 3;\n  const totalSlides = rewards ? Math.ceil(rewards.length / itemsPerSlide) : 0;\n\n  const nextSlide = () => {\n    setCurrentSlide((prev) => (prev + 1) % totalSlides);\n  };\n\n  const prevSlide = () => {\n    setCurrentSlide((prev) => (prev - 1 + totalSlides) % totalSlides);\n  };\n\n  const getCurrentRewards = () => {\n    if (!rewards) return [];\n    const startIndex = currentSlide * itemsPerSlide;\n    return rewards.slice(startIndex, startIndex + itemsPerSlide);\n  };\n\n  const handleImageError = (rewardId: string) => {\n    setFailedImages(prev => new Set(Array.from(prev).concat(rewardId)));\n  };\n\n  if (!user) return null;\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      {/* Dashboard Header */}\n      <div className=\"mb-8\">\n        <div \n          className=\"relative rounded-xl overflow-hidden shadow-material min-h-[400px] bg-cover bg-center bg-no-repeat\"\n          style={{ backgroundImage: `url(${backgroundImage})` }}\n        >\n          {/* Overlay for better text readability */}\n          <div className=\"absolute inset-0 bg-black/20\"></div>\n          \n          {user.role !== \"admin\" ? (\n            <div className=\"relative z-10 flex flex-col lg:flex-row justify-between items-start p-8 min-h-[400px]\">\n              {/* Left side - Welcome Message */}\n              <div className=\"flex-1 flex flex-col justify-center\">\n                <h1 className=\"text-4xl lg:text-5xl font-bold mb-2 text-white leading-tight\" data-testid=\"text-welcome\">\n                  Welcome back<br />{user.firstName} {user.lastName}!\n                </h1>\n              </div>\n              \n              {/* Right side - Stats Cards */}\n              <div className=\"flex flex-col space-y-4 mt-8 lg:mt-0 lg:ml-8 min-w-[280px]\">\n                {/* Available Points Card */}\n                <div className=\"bg-white/80 backdrop-blur-sm rounded-lg p-4 flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-white rounded-full flex items-center justify-center\">\n                    <Coins className=\"text-gray-700 h-6 w-6\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"text-gray-600 text-sm\">Available Points</div>\n                    <div className=\"text-2xl font-bold text-gray-900\" data-testid=\"text-available-points\">\n                      {statsLoading ? \"...\" : stats?.availablePoints?.toLocaleString() || \"0\"}\n                    </div>\n                    <div className=\"text-gray-500 text-xs\">Ready to redeem</div>\n                  </div>\n                </div>\n\n                {/* Pending Deals Card */}\n                <div className=\"bg-white/80 backdrop-blur-sm rounded-lg p-4 flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-white rounded-full flex items-center justify-center\">\n                    <Handshake className=\"text-gray-700 h-6 w-6\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"text-gray-600 text-sm\">Pending Deals</div>\n                    <div className=\"text-2xl font-bold text-gray-900\" data-testid=\"text-pending-deals\">\n                      {statsLoading ? \"...\" : stats?.pendingDeals || \"0\"}\n                    </div>\n                    <div className=\"text-gray-500 text-xs\">Awaiting approval</div>\n                  </div>\n                </div>\n\n                {/* Redeemed Rewards Card */}\n                <div className=\"bg-white/80 backdrop-blur-sm rounded-lg p-4 flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-white rounded-full flex items-center justify-center\">\n                    <Gift className=\"text-gray-700 h-6 w-6\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"text-gray-600 text-sm\">Redeemed Rewards</div>\n                    <div className=\"text-2xl font-bold text-gray-900\" data-testid=\"text-redeemed-rewards\">\n                      {statsLoading ? \"...\" : stats?.redeemedRewards || \"0\"}\n                    </div>\n                    <div className=\"text-gray-500 text-xs\">Lifetime total</div>\n                  </div>\n                </div>\n\n              </div>\n            </div>\n          ) : (\n            <div className=\"relative z-10 p-8 min-h-[400px] flex items-center\">\n              <div>\n                <h1 className=\"text-4xl font-bold mb-2 text-white\" data-testid=\"text-welcome\">\n                  Welcome back, {user.firstName} {user.lastName}!\n                </h1>\n                <p className=\"text-white text-lg\" data-testid=\"text-admin-role\">\n                  <span className=\"font-medium\">System Administrator</span>\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Contest Rules - Only show for regular users */}\n      {user.role !== \"admin\" && (\n        <div className=\"mb-12\">\n          <Card className=\"shadow-material bg-gradient-to-br from-blue-50 to-indigo-50\">\n            <CardContent className=\"p-8\">\n              {/* Welcome Text */}\n              <div className=\"text-center mb-8\">\n                <h2 className=\"text-3xl font-bold text-blue-900 mb-3\" data-testid=\"text-contest-title\">\n                  Welcome to the Rewards Program!\n                </h2>\n                <p className=\"text-lg text-gray-700 max-w-3xl mx-auto\">\n                  Register your deals and earn points based on their value. The more deals you close, the more rewards you can unlock!\n                </p>\n              </div>\n\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                {/* Points Calculation Box */}\n                <div className=\"bg-white rounded-xl p-6 shadow-md\">\n                  <div className=\"flex items-center space-x-3 mb-4\">\n                    <div className=\"w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center\">\n                      <Coins className=\"text-white h-6 w-6\" />\n                    </div>\n                    <h3 className=\"text-xl font-bold text-gray-900\" data-testid=\"text-points-calculation-title\">\n                      Points Calculation\n                    </h3>\n                  </div>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between p-3 bg-blue-50 rounded-lg\">\n                      <span className=\"font-semibold text-gray-800\">Software</span>\n                      <span className=\"text-blue-600 font-bold\">$1,000 = 1 point</span>\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 bg-purple-50 rounded-lg\">\n                      <span className=\"font-semibold text-gray-800\">Hardware</span>\n                      <span className=\"text-purple-600 font-bold\">$5,000 = 1 point</span>\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 bg-orange-50 rounded-lg\">\n                      <span className=\"font-semibold text-gray-800\">Equipment</span>\n                      <span className=\"text-orange-600 font-bold\">$10,000 = 1 point</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Grand Prize Box */}\n                <div className=\"bg-gradient-to-br from-yellow-400 to-orange-500 rounded-xl p-6 shadow-md text-white\">\n                  <div className=\"flex items-center space-x-3 mb-4\">\n                    <div className=\"w-10 h-10 bg-white/20 rounded-lg flex items-center justify-center\">\n                      <Gift className=\"text-white h-6 w-6\" />\n                    </div>\n                    <h3 className=\"text-xl font-bold\" data-testid=\"text-grand-prize-title\">\n                      Grand Prize\n                    </h3>\n                  </div>\n                  <div className=\"space-y-3\">\n                    <div className=\"bg-white/20 rounded-lg p-4 backdrop-blur-sm\">\n                      <div className=\"text-4xl font-bold mb-2\">50,000 Points</div>\n                      <p className=\"text-sm opacity-90\">\n                        Reach this milestone to unlock our exclusive grand prize!\n                      </p>\n                    </div>\n                    <p className=\"text-sm opacity-90 leading-relaxed\">\n                      Keep registering deals and watch your points grow. Every deal gets you closer to the ultimate reward!\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Leaderboard - Only show for regular users */}\n      {user.role !== \"admin\" && (\n        <div className=\"mb-12\">\n          <Card className=\"shadow-material\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-gradient-to-br from-yellow-400 to-yellow-600 rounded-lg flex items-center justify-center\">\n                    <TrendingUp className=\"text-white h-6 w-6\" />\n                  </div>\n                  <div>\n                    <h2 className=\"text-2xl font-bold text-gray-900\" data-testid=\"text-leaderboard-title\">\n                      Top Performers\n                    </h2>\n                    <p className=\"text-sm text-gray-600\">Users with the most points</p>\n                  </div>\n                </div>\n              </div>\n\n              {leaderboardLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <Skeleton key={i} className=\"h-16 w-full\" />\n                  ))}\n                </div>\n              ) : leaderboard && leaderboard.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {leaderboard.map((leaderUser, index) => {\n                    const isCurrentUser = leaderUser.userId === user.id;\n                    const position = index + 1;\n                    \n                    // Medal colors for top 3\n                    const getMedalColor = () => {\n                      if (position === 1) return \"from-yellow-400 to-yellow-600\";\n                      if (position === 2) return \"from-gray-400 to-gray-600\";\n                      if (position === 3) return \"from-orange-400 to-orange-600\";\n                      return \"from-blue-400 to-blue-600\";\n                    };\n\n                    return (\n                      <div\n                        key={leaderUser.userId}\n                        className={`flex items-center space-x-4 p-4 rounded-lg transition-all ${\n                          isCurrentUser \n                            ? \"bg-gradient-to-r from-blue-50 to-indigo-50 border-2 border-blue-400 shadow-lg transform scale-105\" \n                            : \"bg-gray-50 hover:bg-gray-100\"\n                        }`}\n                        data-testid={`leaderboard-item-${position}`}\n                      >\n                        {/* Position Badge */}\n                        <div className={`w-12 h-12 bg-gradient-to-br ${getMedalColor()} rounded-full flex items-center justify-center flex-shrink-0`}>\n                          <span className=\"text-white font-bold text-lg\">\n                            {position}\n                          </span>\n                        </div>\n\n                        {/* User Info */}\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center space-x-2\">\n                            <h3 className={`font-semibold truncate ${isCurrentUser ? \"text-blue-900\" : \"text-gray-900\"}`}>\n                              {leaderUser.firstName} {leaderUser.lastName}\n                            </h3>\n                            {isCurrentUser && (\n                              <Badge className=\"bg-blue-600 text-white\">You</Badge>\n                            )}\n                          </div>\n                          <p className={`text-sm ${isCurrentUser ? \"text-blue-700\" : \"text-gray-600\"}`}>\n                            @{leaderUser.username}\n                          </p>\n                        </div>\n\n                        {/* Points */}\n                        <div className=\"text-right\">\n                          <div className={`text-2xl font-bold ${isCurrentUser ? \"text-blue-900\" : \"text-gray-900\"}`}>\n                            {leaderUser.totalPoints.toLocaleString()}\n                          </div>\n                          <div className={`text-sm ${isCurrentUser ? \"text-blue-700\" : \"text-gray-600\"}`}>\n                            points\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <Users className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                  <p className=\"text-gray-600\">No leaderboard data available yet</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Available Rewards Carousel - Only show for regular users */}\n      {user.role !== \"admin\" && (\n        <div className=\"mb-12\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-3xl font-bold text-blue-600 mb-2\" data-testid=\"text-available-rewards-title\">\n              Available Rewards\n            </h2>\n          </div>\n          \n          <div className=\"relative px-4 py-4\">\n            {/* Carousel Container */}\n            <div className=\"flex justify-center items-center space-x-6\">\n              {/* Left Arrow */}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={prevSlide}\n                disabled={totalSlides <= 1}\n                className=\"p-2 hover:bg-gray-100 disabled:opacity-50 z-10\"\n                data-testid=\"button-prev-slide\"\n              >\n                <ChevronLeft className=\"h-6 w-6 text-gray-600\" />\n              </Button>\n\n              {/* Rewards Cards */}\n              <div className=\"flex space-x-6 overflow-visible\">\n                {rewardsLoading ? (\n                  // Loading skeleton\n                  Array.from({ length: 3 }).map((_, index) => (\n                    <div\n                      key={index}\n                      className=\"bg-white rounded-2xl shadow-lg p-6 w-80 flex-shrink-0\"\n                    >\n                      <Skeleton className=\"h-32 w-full rounded-lg mb-4\" />\n                      <Skeleton className=\"h-6 w-3/4 mb-2\" />\n                      <Skeleton className=\"h-4 w-1/2\" />\n                    </div>\n                  ))\n                ) : (\n                  getCurrentRewards().map((reward) => (\n                    <div\n                      key={reward.id}\n                      className=\"bg-white rounded-2xl shadow-lg p-6 w-80 flex-shrink-0 hover:shadow-xl transition-shadow cursor-pointer\"\n                      data-testid={`card-featured-reward-${reward.id}`}\n                    >\n                      {/* Reward Image */}\n                      <div className=\"relative mb-4 h-32 rounded-lg overflow-hidden\">\n                        {reward.imageUrl && !failedImages.has(reward.id) ? (\n                          <img\n                            src={reward.imageUrl}\n                            alt={reward.name}\n                            className=\"w-full h-full object-cover\"\n                            onError={() => handleImageError(reward.id)}\n                          />\n                        ) : (\n                          <div className=\"w-full h-full bg-gradient-to-br from-orange-400 to-orange-600 flex items-center justify-center rounded-lg\">\n                            <div className=\"text-white text-center\">\n                              <Gift className=\"w-8 h-8 mx-auto mb-2\" />\n                              <div className=\"text-sm font-medium\">{reward.category}</div>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n\n                      {/* Reward Info */}\n                      <div>\n                        <h3 className=\"text-lg font-bold text-blue-600 mb-2\" data-testid={`text-reward-name-${reward.id}`}>\n                          {reward.name}\n                        </h3>\n                        <p className=\"text-gray-600 text-sm\" data-testid={`text-reward-points-${reward.id}`}>\n                          {reward.pointsCost} points\n                        </p>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n\n              {/* Right Arrow */}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={nextSlide}\n                disabled={totalSlides <= 1}\n                className=\"p-2 hover:bg-gray-100 disabled:opacity-50 z-10\"\n                data-testid=\"button-next-slide\"\n              >\n                <ChevronRight className=\"h-6 w-6 text-gray-600\" />\n              </Button>\n            </div>\n\n            {/* Pagination Dots */}\n            {totalSlides > 1 && (\n              <div className=\"flex justify-center mt-6 space-x-2\">\n                {Array.from({ length: totalSlides }).map((_, index) => (\n                  <button\n                    key={index}\n                    onClick={() => setCurrentSlide(index)}\n                    className={`w-3 h-3 rounded-full transition-colors ${\n                      index === currentSlide\n                        ? 'bg-blue-600'\n                        : 'bg-gray-300 hover:bg-gray-400'\n                    }`}\n                    data-testid={`button-slide-${index}`}\n                  />\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Recent Deals - Only show for regular users */}\n      {user.role !== \"admin\" && (\n        <div className=\"flex justify-center\">\n          <div className=\"w-full max-w-5xl\">\n          <div className=\"bg-blue-900 rounded-2xl shadow-xl overflow-hidden\">\n            <div className=\"px-6 py-5\">\n              <div className=\"flex justify-between items-center\">\n                <h3 className=\"text-xl font-semibold text-white\">Recent Deals</h3>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  className=\"text-white hover:bg-blue-800 hover:text-white\" \n                  data-testid=\"button-view-all-deals\"\n                >\n                  View All\n                </Button>\n              </div>\n            </div>\n            <div className=\"overflow-x-auto\">\n              {dealsLoading ? (\n                <div className=\"p-6 space-y-4\">\n                  {[...Array(3)].map((_, i) => (\n                    <div key={i} className=\"flex items-center space-x-4\">\n                      <Skeleton className=\"h-4 w-20 bg-blue-800\" />\n                      <Skeleton className=\"h-4 w-32 bg-blue-800\" />\n                      <Skeleton className=\"h-4 w-16 bg-blue-800\" />\n                      <Skeleton className=\"h-4 w-16 bg-blue-800\" />\n                      <Skeleton className=\"h-6 w-20 bg-blue-800\" />\n                    </div>\n                  ))}\n                </div>\n              ) : recentDeals && recentDeals.length > 0 ? (\n                <table className=\"w-full\">\n                  <thead className=\"bg-blue-950 border-b border-blue-800\">\n                    <tr>\n                      <th className=\"px-6 py-4 text-left text-sm font-semibold text-white uppercase tracking-wider\">\n                        PRODUCT\n                      </th>\n                      <th className=\"px-6 py-4 text-left text-sm font-semibold text-white uppercase tracking-wider\">\n                        VALUE\n                      </th>\n                      <th className=\"px-6 py-4 text-left text-sm font-semibold text-white uppercase tracking-wider\">\n                        POINTS\n                      </th>\n                      <th className=\"px-6 py-4 text-left text-sm font-semibold text-white uppercase tracking-wider\">\n                        STATUS\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-blue-800\">\n                    {recentDeals.map((deal) => (\n                      <tr key={deal.id} data-testid={`row-deal-${deal.id}`} className=\"hover:bg-blue-800/60 transition-colors\">\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-white font-medium\">\n                          {deal.productName}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-white\">\n                          {formatCurrency(deal.dealValue)}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-white font-medium\">\n                          {deal.pointsEarned?.toLocaleString() || 0}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <span \n                            className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${\n                              deal.status === 'approved' \n                                ? 'bg-green-100 text-green-800' \n                                : deal.status === 'pending' \n                                  ? 'bg-yellow-100 text-yellow-800'\n                                  : 'bg-red-100 text-red-800'\n                            }`}\n                            data-testid={`status-${deal.status}-${deal.id}`}\n                          >\n                            {deal.status.charAt(0).toUpperCase() + deal.status.slice(1)}\n                          </span>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              ) : (\n                <div className=\"p-6 text-center text-white/70\" data-testid=\"text-no-deals\">\n                  No deals found. Register your first deal to get started!\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        </div>\n      )}\n\n      <DealModal\n        isOpen={isDealModalOpen}\n        onClose={() => setIsDealModalOpen(false)}\n      />\n    </div>\n  );\n}\n","size_bytes":25367},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { login, register } from \"@/lib/auth\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport backgroundVideo from \"@assets/social_u8721598234_httpss.mj.run9PeHEv50RaI_Se_mueva_el_humo_--ar_16_859139eb-2b54-44ba-a70e-0b35e099a25c_3_1758640235341.mp4\";\nimport logo from \"@assets/LOGO-FINAL-LOYALTY_1758659070059.png\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nconst registerSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  country: z.string().min(1, \"Country is required\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\ntype RegisterForm = z.infer<typeof registerSchema>;\n\nexport default function Login() {\n  const [isLogin, setIsLogin] = useState(true);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const loginForm = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterForm>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      country: \"\",\n    },\n    mode: \"onChange\",\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: ({ username, password }: LoginForm) => login(username, password),\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Logged in successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Login failed\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: (userData: RegisterForm) => register(userData),\n    onSuccess: (data: any) => {\n      toast({\n        title: \"Success\",\n        description: data.message || \"Account created successfully. Please wait for administrator approval before you can log in.\",\n      });\n      setIsLogin(true);\n      registerForm.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Registration failed\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onLoginSubmit = (data: LoginForm) => {\n    loginMutation.mutate(data);\n  };\n\n  const onRegisterSubmit = (data: RegisterForm) => {\n    registerMutation.mutate(data);\n  };\n\n  const countries = [\n    { value: \"US\", label: \"United States\" },\n    { value: \"CA\", label: \"Canada\" },\n    { value: \"MX\", label: \"Mexico\" },\n    { value: \"BR\", label: \"Brazil\" },\n    { value: \"AR\", label: \"Argentina\" },\n    { value: \"CL\", label: \"Chile\" },\n    { value: \"CO\", label: \"Colombia\" },\n  ];\n\n  return (\n    <div className=\"relative min-h-screen flex items-center justify-center p-4 overflow-hidden\">\n      {/* Video Background */}\n      <video\n        autoPlay\n        loop\n        muted\n        className=\"absolute inset-0 w-full h-full object-cover z-0\"\n      >\n        <source src={backgroundVideo} type=\"video/mp4\" />\n      </video>\n      \n      {/* Overlay for better readability */}\n      <div className=\"absolute inset-0 bg-black/20 z-10\"></div>\n      \n      <Card className=\"relative z-20 w-full max-w-md bg-white/95 backdrop-blur-sm\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-2\">\n            <img src={logo} alt=\"LoyaltyPro\" className=\"h-16 w-auto\" />\n          </div>\n          <p className=\"text-gray-600\">\n            {isLogin ? \"Sign in to your account\" : \"Create your account\"}\n          </p>\n        </CardHeader>\n        <CardContent>\n          {isLogin ? (\n            <Form {...loginForm}>\n              <form onSubmit={loginForm.handleSubmit(onLoginSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={loginForm.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Enter your username\"\n                          data-testid=\"input-username\"\n                          value={field.value}\n                          onChange={field.onChange}\n                          onBlur={field.onBlur}\n                          name={field.name}\n                          ref={field.ref}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={loginForm.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"password\"\n                          placeholder=\"Enter your password\"\n                          data-testid=\"input-password\"\n                          value={field.value}\n                          onChange={field.onChange}\n                          onBlur={field.onBlur}\n                          name={field.name}\n                          ref={field.ref}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={loginMutation.isPending}\n                  data-testid=\"button-login\"\n                >\n                  {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n                </Button>\n              </form>\n            </Form>\n          ) : (\n            <Form {...registerForm}>\n              <form onSubmit={registerForm.handleSubmit(onRegisterSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={registerForm.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"John\"\n                            data-testid=\"input-firstName\"\n                            value={field.value}\n                            onChange={field.onChange}\n                            onBlur={field.onBlur}\n                            name={field.name}\n                            ref={field.ref}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={registerForm.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Smith\"\n                            data-testid=\"input-lastName\"\n                            value={field.value}\n                            onChange={field.onChange}\n                            onBlur={field.onBlur}\n                            name={field.name}\n                            ref={field.ref}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <label htmlFor=\"username\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                    Username\n                  </label>\n                  <Input\n                    id=\"username\"\n                    placeholder=\"johnsmith\"\n                    data-testid=\"input-register-username\"\n                    {...registerForm.register(\"username\")}\n                  />\n                  {registerForm.formState.errors.username && (\n                    <p className=\"text-sm font-medium text-destructive\">\n                      {registerForm.formState.errors.username.message}\n                    </p>\n                  )}\n                </div>\n                <FormField\n                  control={registerForm.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"email\"\n                          placeholder=\"john@example.com\"\n                          data-testid=\"input-email\"\n                          value={field.value}\n                          onChange={field.onChange}\n                          onBlur={field.onBlur}\n                          name={field.name}\n                          ref={field.ref}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={registerForm.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"password\"\n                          placeholder=\"Create a password\"\n                          data-testid=\"input-register-password\"\n                          value={field.value}\n                          onChange={field.onChange}\n                          onBlur={field.onBlur}\n                          name={field.name}\n                          ref={field.ref}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={registerForm.control}\n                  name=\"country\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Country</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-country\">\n                            <SelectValue placeholder=\"Select your country\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {countries.map((country) => (\n                            <SelectItem key={country.value} value={country.value}>\n                              {country.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={registerMutation.isPending}\n                  data-testid=\"button-register\"\n                >\n                  {registerMutation.isPending ? \"Creating account...\" : \"Create Account\"}\n                </Button>\n              </form>\n            </Form>\n          )}\n\n          <div className=\"mt-6 text-center\">\n            <button\n              type=\"button\"\n              onClick={() => setIsLogin(!isLogin)}\n              className=\"text-primary-600 hover:text-primary-700 text-sm\"\n              data-testid=\"button-toggle-auth\"\n            >\n              {isLogin\n                ? \"Don't have an account? Sign up\"\n                : \"Already have an account? Sign in\"}\n            </button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":13198},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/i18n.ts":{"content":"const translations = {\n  en: {\n    common: {\n      dashboard: \"Dashboard\",\n      deals: \"My Deals\",\n      rewards: \"Rewards\",\n      reports: \"Reports\",\n      profile: \"Profile\",\n      logout: \"Logout\",\n      login: \"Login\",\n      register: \"Register\",\n      submit: \"Submit\",\n      cancel: \"Cancel\",\n      save: \"Save\",\n      edit: \"Edit\",\n      delete: \"Delete\",\n      approve: \"Approve\",\n      reject: \"Reject\",\n      loading: \"Loading...\",\n      error: \"Error\",\n      success: \"Success\",\n    },\n    dashboard: {\n      welcome: \"Welcome back\",\n      partnerLevel: \"Partner Level\",\n      totalPoints: \"Total Points\",\n      activeDeals: \"Active Deals\",\n      availablePoints: \"Available Points\",\n      pendingDeals: \"Pending Deals\",\n      redeemedRewards: \"Redeemed Rewards\",\n      monthlyEarnings: \"Monthly Earnings\",\n      recentDeals: \"Recent Deals\",\n      quickActions: \"Quick Actions\",\n      availableRewards: \"Available Rewards\",\n      registerNewDeal: \"Register New Deal\",\n      browseRewards: \"Browse Rewards\",\n      viewReports: \"View Reports\",\n    },\n    deals: {\n      newDeal: \"New Deal\",\n      dealValue: \"Deal Value\",\n      productType: \"Product Type\",\n      productName: \"Product Name\",\n      quantity: \"Quantity/Licenses\",\n      closeDate: \"Close Date\",\n      clientInfo: \"Client Information\",\n      status: \"Status\",\n      points: \"Points\",\n      approved: \"Approved\",\n      pending: \"Pending\",\n      rejected: \"Rejected\",\n    },\n    rewards: {\n      catalog: \"Rewards Catalog\",\n      myRewards: \"My Rewards\",\n      allRewards: \"All\",\n      availableRewards: \"Available\",\n      availablePoints: \"Available Points\",\n      redeemPoints: \"Redeem your points for amazing rewards\",\n      insufficientPoints: \"Insufficient Points\",\n      redeem: \"Redeem\",\n      redeeming: \"Redeeming...\",\n      noRewards: \"No rewards available\",\n      noRewardsDesc: \"Check back soon for new rewards to redeem with your points.\",\n      noAvailableRewards: \"No affordable rewards\",\n      noAvailableRewardsDesc: \"Earn more points to unlock these amazing rewards!\",\n      noUserRewards: \"No rewards redeemed yet\",\n      noUserRewardsDesc: \"Redeem your first reward to see it here!\",\n      redeemed: \"Redeemed\",\n      waitingApproval: \"Waiting for administrator approval\",\n      approvedOn: \"Approved\",\n      rejectedReason: \"Rejected\",\n      shipmentStatus: \"Shipment Status\",\n      pendingShipment: \"Pending Shipment\",\n      shipped: \"Shipped\",\n      delivered: \"Delivered\",\n      shippedOn: \"Shipped\",\n      deliveredOn: \"Delivered\",\n      redemptionSubmitted: \"Redemption Submitted\",\n      redemptionPending: \"Your reward redemption is pending administrator approval. You'll receive notification once approved.\",\n    },\n    admin: {\n      panel: \"Admin Panel\",\n      users: \"Users\",\n      pendingUsers: \"Pending Users\",\n      allUsers: \"All Users\",\n      deals: \"Deals\",\n      pendingDeals: \"Pending Deals\",\n      allDeals: \"All Deals\",\n      rewards: \"Rewards\",\n      pendingRewards: \"Pending Rewards\",\n      rewardHistory: \"Reward History\",\n      reports: \"Reports\",\n      markShipped: \"Mark Shipped\",\n      markDelivered: \"Mark Delivered\",\n      shipmentStatus: \"Shipment Status\",\n    },\n  },\n  es: {\n    common: {\n      dashboard: \"Panel de Control\",\n      deals: \"Mis Tratos\",\n      rewards: \"Recompensas\",\n      reports: \"Reportes\",\n      profile: \"Perfil\",\n      logout: \"Cerrar Sesión\",\n      login: \"Iniciar Sesión\",\n      register: \"Registrarse\",\n      submit: \"Enviar\",\n      cancel: \"Cancelar\",\n      save: \"Guardar\",\n      edit: \"Editar\",\n      delete: \"Eliminar\",\n      approve: \"Aprobar\",\n      reject: \"Rechazar\",\n      loading: \"Cargando...\",\n      error: \"Error\",\n      success: \"Éxito\",\n    },\n    dashboard: {\n      welcome: \"Bienvenido de vuelta\",\n      partnerLevel: \"Nivel de Socio\",\n      totalPoints: \"Puntos Totales\",\n      activeDeals: \"Tratos Activos\",\n      availablePoints: \"Puntos Disponibles\",\n      pendingDeals: \"Tratos Pendientes\",\n      redeemedRewards: \"Recompensas Canjeadas\",\n      monthlyEarnings: \"Ganancias Mensuales\",\n      recentDeals: \"Tratos Recientes\",\n      quickActions: \"Acciones Rápidas\",\n      availableRewards: \"Recompensas Disponibles\",\n      registerNewDeal: \"Registrar Nuevo Trato\",\n      browseRewards: \"Explorar Recompensas\",\n      viewReports: \"Ver Reportes\",\n    },\n    deals: {\n      newDeal: \"Nuevo Trato\",\n      dealValue: \"Valor del Trato\",\n      productType: \"Tipo de Producto\",\n      productName: \"Nombre del Producto\",\n      quantity: \"Cantidad/Licencias\",\n      closeDate: \"Fecha de Cierre\",\n      clientInfo: \"Información del Cliente\",\n      status: \"Estado\",\n      points: \"Puntos\",\n      approved: \"Aprobado\",\n      pending: \"Pendiente\",\n      rejected: \"Rechazado\",\n    },\n    rewards: {\n      catalog: \"Catálogo de Recompensas\",\n      myRewards: \"Mis Recompensas\",\n      allRewards: \"Todas\",\n      availableRewards: \"Disponibles\",\n      availablePoints: \"Puntos Disponibles\",\n      redeemPoints: \"Canjea tus puntos por increíbles recompensas\",\n      insufficientPoints: \"Puntos Insuficientes\",\n      redeem: \"Canjear\",\n      redeeming: \"Canjeando...\",\n      noRewards: \"No hay recompensas disponibles\",\n      noRewardsDesc: \"Vuelve pronto para nuevas recompensas que puedes canjear con tus puntos.\",\n      noAvailableRewards: \"No hay recompensas alcanzables\",\n      noAvailableRewardsDesc: \"¡Gana más puntos para desbloquear estas increíbles recompensas!\",\n      noUserRewards: \"Aún no has canjeado recompensas\",\n      noUserRewardsDesc: \"¡Canjea tu primera recompensa para verla aquí!\",\n      redeemed: \"Canjeado\",\n      waitingApproval: \"Esperando aprobación del administrador\",\n      approvedOn: \"Aprobado\",\n      rejectedReason: \"Rechazado\",\n      shipmentStatus: \"Estado de Envío\",\n      pendingShipment: \"Envío Pendiente\",\n      shipped: \"Enviado\",\n      delivered: \"Entregado\",\n      shippedOn: \"Enviado\",\n      deliveredOn: \"Entregado\",\n      redemptionSubmitted: \"Canje Enviado\",\n      redemptionPending: \"Tu solicitud de canje está pendiente de aprobación del administrador. Recibirás una notificación una vez aprobada.\",\n    },\n    admin: {\n      panel: \"Panel de Administrador\",\n      users: \"Usuarios\",\n      pendingUsers: \"Usuarios Pendientes\",\n      allUsers: \"Todos los Usuarios\",\n      deals: \"Tratos\",\n      pendingDeals: \"Tratos Pendientes\",\n      allDeals: \"Todos los Tratos\",\n      rewards: \"Recompensas\",\n      pendingRewards: \"Recompensas Pendientes\",\n      rewardHistory: \"Historial de Recompensas\",\n      reports: \"Reportes\",\n      markShipped: \"Marcar como Enviado\",\n      markDelivered: \"Marcar como Entregado\",\n      shipmentStatus: \"Estado de Envío\",\n    },\n  },\n  pt: {\n    common: {\n      dashboard: \"Painel de Controle\",\n      deals: \"Meus Negócios\",\n      rewards: \"Recompensas\",\n      reports: \"Relatórios\",\n      profile: \"Perfil\",\n      logout: \"Sair\",\n      login: \"Entrar\",\n      register: \"Registrar\",\n      submit: \"Enviar\",\n      cancel: \"Cancelar\",\n      save: \"Salvar\",\n      edit: \"Editar\",\n      delete: \"Excluir\",\n      approve: \"Aprovar\",\n      reject: \"Rejeitar\",\n      loading: \"Carregando...\",\n      error: \"Erro\",\n      success: \"Sucesso\",\n    },\n    dashboard: {\n      welcome: \"Bem-vindo de volta\",\n      partnerLevel: \"Nível de Parceiro\",\n      totalPoints: \"Pontos Totais\",\n      activeDeals: \"Negócios Ativos\",\n      availablePoints: \"Pontos Disponíveis\",\n      pendingDeals: \"Negócios Pendentes\",\n      redeemedRewards: \"Recompensas Resgatadas\",\n      monthlyEarnings: \"Ganhos Mensais\",\n      recentDeals: \"Negócios Recentes\",\n      quickActions: \"Ações Rápidas\",\n      availableRewards: \"Recompensas Disponíveis\",\n      registerNewDeal: \"Registrar Novo Negócio\",\n      browseRewards: \"Navegar Recompensas\",\n      viewReports: \"Ver Relatórios\",\n    },\n    deals: {\n      newDeal: \"Novo Negócio\",\n      dealValue: \"Valor do Negócio\",\n      productType: \"Tipo de Produto\",\n      productName: \"Nome do Produto\",\n      quantity: \"Quantidade/Licenças\",\n      closeDate: \"Data de Fechamento\",\n      clientInfo: \"Informações do Cliente\",\n      status: \"Status\",\n      points: \"Pontos\",\n      approved: \"Aprovado\",\n      pending: \"Pendente\",\n      rejected: \"Rejeitado\",\n    },\n  },\n};\n\nexport type Language = keyof typeof translations;\n\nlet currentLanguage: Language = \"en\";\n\nexport const setLanguage = (lang: Language) => {\n  currentLanguage = lang;\n  localStorage.setItem(\"preferred-language\", lang);\n};\n\nexport const getLanguage = (): Language => {\n  if (typeof window !== \"undefined\") {\n    const saved = localStorage.getItem(\"preferred-language\") as Language;\n    if (saved && translations[saved]) {\n      currentLanguage = saved;\n      return saved;\n    }\n  }\n  return currentLanguage;\n};\n\nexport const t = (key: string): string => {\n  const keys = key.split(\".\");\n  let result: any = translations[currentLanguage];\n  \n  for (const k of keys) {\n    result = result?.[k];\n  }\n  \n  return result || key;\n};\n","size_bytes":8969},"client/src/components/layout/navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Bell, ChevronDown, Menu, X } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { logout } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useTranslation } from \"@/hooks/useTranslation\";\nimport type { AuthUser } from \"@/lib/auth\";\nimport logo from \"@assets/LOGO-FINAL-LOYALTY_1758720440342.png\";\n\ninterface NavigationProps {\n  user: AuthUser;\n}\n\nexport default function Navigation({ user }: NavigationProps) {\n  const [location, setLocation] = useLocation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const { t, currentLanguage, changeLanguage } = useTranslation();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n\n  // Improved safety check - show loading state instead of null\n  if (!user || !user.id) {\n    return (\n      <header className=\"bg-white shadow-sm border-b border-gray-200 fixed top-0 left-0 right-0 z-[9999] w-full min-h-[64px]\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex-shrink-0\">\n                <img \n                  src={logo} \n                  alt=\"LoyaltyPro\" \n                  className=\"h-8 w-auto\" \n                />\n              </div>\n              <div className=\"animate-pulse bg-gray-200 h-4 w-32 rounded\"></div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"animate-pulse bg-gray-200 h-8 w-24 rounded\"></div>\n            </div>\n          </div>\n        </div>\n      </header>\n    );\n  }\n\n  const logoutMutation = useMutation({\n    mutationFn: logout,\n    onSuccess: () => {\n      // Clear all queries from cache\n      queryClient.clear();\n      toast({\n        title: \"Success\",\n        description: \"Logged out successfully\",\n      });\n      // Immediate redirect to login page - remove timeout\n      setLocation(\"/login\");\n    },\n    onError: () => {\n      // Even if logout fails, redirect to login\n      queryClient.clear();\n      setLocation(\"/login\");\n    },\n  });\n\n  const handleLanguageChange = (lang: string) => {\n    changeLanguage(lang as any);\n  };\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const navItems = user.role === \"admin\" \n    ? [\n        { href: \"/admin\", label: t(\"admin.panel\"), current: location === \"/admin\" },\n      ]\n    : [\n        { href: \"/\", label: t(\"common.dashboard\"), current: location === \"/\" },\n        { href: \"/deals\", label: t(\"common.deals\"), current: location === \"/deals\" },\n        { href: \"/rewards\", label: t(\"common.rewards\"), current: location === \"/rewards\" },\n      ];\n\n  const userInitials = `${user.firstName?.charAt(0) || 'U'}${user.lastName?.charAt(0) || 'U'}`.toUpperCase();\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-gray-200 fixed top-0 left-0 right-0 z-[9999] w-full min-h-[64px]\" style={{ display: 'block', visibility: 'visible' }}>\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo and Navigation */}\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex-shrink-0\">\n              <Link href=\"/\">\n                <img \n                  src={logo} \n                  alt=\"LoyaltyPro\" \n                  className=\"h-8 w-auto cursor-pointer\" \n                  data-testid=\"logo\"\n                />\n              </Link>\n            </div>\n            \n            {/* Desktop Navigation */}\n            <div className=\"hidden md:block\">\n              <div className=\"ml-10 flex items-baseline space-x-4\">\n                {navItems.map((item) => (\n                  <Link key={item.href} href={item.href}>\n                    <button\n                      className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${\n                        item.current\n                          ? \"text-blue-600 bg-blue-50\"\n                          : \"text-gray-700 hover:text-blue-600\"\n                      }`}\n                      data-testid={`nav-${item.label.toLowerCase().replace(\" \", \"-\")}`}\n                    >\n                      {item.label}\n                    </button>\n                  </Link>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Right side - Language, Notifications, User Menu */}\n          <div className=\"flex items-center space-x-4\">\n            {/* Language Selector */}\n            <Select value={currentLanguage} onValueChange={handleLanguageChange}>\n              <SelectTrigger className=\"w-auto border-gray-300\" data-testid=\"select-language\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"en\">English</SelectItem>\n                <SelectItem value=\"es\">Español</SelectItem>\n                <SelectItem value=\"pt\">Português</SelectItem>\n              </SelectContent>\n            </Select>\n\n            {/* Notifications */}\n            <Button variant=\"ghost\" size=\"sm\" className=\"relative\" data-testid=\"button-notifications\">\n              <Bell className=\"h-5 w-5\" />\n              <Badge className=\"absolute -top-1 -right-1 h-5 w-5 rounded-full p-0 flex items-center justify-center bg-accent-500 text-white text-xs\">\n                3\n              </Badge>\n            </Button>\n\n            {/* User Menu */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"flex items-center space-x-2\" data-testid=\"button-user-menu\">\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarFallback className=\"bg-blue-100 text-blue-600\">\n                      {userInitials}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"hidden md:block text-left\">\n                    <div className=\"text-sm font-medium text-gray-900\" data-testid=\"text-user-name\">\n                      {user.firstName} {user.lastName}\n                    </div>\n                  </div>\n                  <ChevronDown className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-48\">\n                <DropdownMenuItem data-testid=\"menu-profile\">{t(\"common.profile\")}</DropdownMenuItem>\n                <DropdownMenuItem data-testid=\"menu-settings\">Settings</DropdownMenuItem>\n                <DropdownMenuItem onClick={handleLogout} data-testid=\"menu-logout\">\n                  {t(\"common.logout\")}\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n\n            {/* Mobile menu button */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"md:hidden\"\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              data-testid=\"button-mobile-menu\"\n            >\n              {isMobileMenuOpen ? <X className=\"h-6 w-6\" /> : <Menu className=\"h-6 w-6\" />}\n            </Button>\n          </div>\n        </div>\n\n        {/* Mobile Navigation */}\n        {isMobileMenuOpen && (\n          <div className=\"md:hidden\">\n            <div className=\"px-2 pt-2 pb-3 space-y-1 sm:px-3\">\n              {navItems.map((item) => (\n                <Link key={item.href} href={item.href}>\n                  <button\n                    className={`block px-3 py-2 rounded-md text-base font-medium w-full text-left ${\n                      item.current\n                        ? \"text-blue-600 bg-blue-50\"\n                        : \"text-gray-700 hover:text-blue-600 hover:bg-gray-50\"\n                    }`}\n                    onClick={() => setIsMobileMenuOpen(false)}\n                    data-testid={`mobile-nav-${item.label.toLowerCase().replace(\" \", \"-\")}`}\n                  >\n                    {item.label}\n                  </button>\n                </Link>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </header>\n  );\n}\n","size_bytes":8650},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/pages/deals.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Plus, Calendar, DollarSign, Package, Users, Trophy } from \"lucide-react\";\nimport DealModal from \"@/components/modals/deal-modal\";\nimport type { Deal } from \"@shared/schema\";\nimport championBackgroundImage from \"@assets/bg_1758836460974.jpg\";\n\nexport default function Deals() {\n  const [isDealModalOpen, setIsDealModalOpen] = useState(false);\n\n  const { data: deals, isLoading } = useQuery<Deal[]>({\n    queryKey: [\"/api/deals\"],\n    select: (data) => data || [],\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return \"bg-green-100 text-green-600 border border-green-200\";\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-600 border border-yellow-200\";\n      case \"rejected\":\n        return \"bg-red-100 text-red-600 border border-red-200\";\n      default:\n        return \"bg-gray-100 text-gray-600 border border-gray-200\";\n    }\n  };\n\n  const formatCurrency = (value: string | number) => {\n    return new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n    }).format(Number(value));\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  };\n\n  return (\n    <div \n      className=\"min-h-screen bg-white relative\"\n      style={{\n        backgroundImage: `url(${championBackgroundImage})`,\n        backgroundSize: 'auto 90%',\n        backgroundPosition: 'right bottom',\n        backgroundRepeat: 'no-repeat',\n        backgroundAttachment: 'fixed',\n        backgroundColor: '#ffffff'\n      }}\n    >\n      {/* Hero Banner */}\n      <div \n        className=\"relative z-10 bg-transparent\"\n        style={{\n          minHeight: '600px',\n          paddingTop: '150px'\n        }}\n      >\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-16\">\n          <div className=\"text-left space-y-6 max-w-lg\">\n            <h1 className=\"text-6xl lg:text-7xl font-bold leading-tight text-blue-600\" data-testid=\"text-page-title\">\n              My Deals\n            </h1>\n            <p className=\"text-xl text-gray-700 leading-relaxed\">\n              Track your sales deals and their approval status\n            </p>\n            <Button\n              onClick={() => setIsDealModalOpen(true)}\n              size=\"lg\"\n              className=\"bg-blue-600 hover:bg-blue-700 text-white font-semibold px-8 py-4 rounded-lg shadow-lg transition-all duration-300 transform hover:scale-105\"\n              data-testid=\"button-new-deal\"\n            >\n              <Plus className=\"w-5 h-5 mr-2\" />\n              Register New Deal\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Deals Content */}\n      <div className=\"relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-12\">\n\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {[...Array(6)].map((_, i) => (\n              <Card key={i} className=\"!bg-white !rounded-xl !shadow-lg !border-0\">\n                <CardContent className=\"p-6\">\n                  <Skeleton className=\"h-6 w-3/4 mb-4\" />\n                  <div className=\"space-y-3\">\n                    <Skeleton className=\"h-4 w-full\" />\n                    <Skeleton className=\"h-4 w-2/3\" />\n                    <Skeleton className=\"h-4 w-1/2\" />\n                    <Skeleton className=\"h-6 w-20\" />\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : deals && deals.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {deals.map((deal) => (\n              <Card key={deal.id} className=\"!bg-white !rounded-xl !shadow-lg !border-0 hover:!shadow-xl transition-all duration-300 transform hover:-translate-y-1\" data-testid={`card-deal-${deal.id}`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex justify-between items-start mb-4\">\n                    <h3 className=\"text-lg font-bold text-gray-900 line-clamp-2 flex-1\">\n                      {deal.productType.charAt(0).toUpperCase() + deal.productType.slice(1)}\n                    </h3>\n                    <Badge className={`${getStatusColor(deal.status)} text-sm font-semibold ml-2 shrink-0 rounded-full px-3 py-1`}>\n                      {deal.status.charAt(0).toUpperCase() + deal.status.slice(1)}\n                    </Badge>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-2xl font-bold text-gray-900\">\n                        {formatCurrency(deal.dealValue)}\n                      </span>\n                    </div>\n                    \n                    <div className=\"flex items-center text-gray-600\">\n                      <Users className=\"w-4 h-4 mr-2\" />\n                      <span className=\"text-sm\">\n                        {deal.quantity} {deal.productType === \"software\" ? \"licenses\" : \"units\"}\n                      </span>\n                    </div>\n                    \n                    <div className=\"flex items-center text-gray-600\">\n                      <Calendar className=\"w-4 h-4 mr-2\" />\n                      <span className=\"text-sm\">Close: {formatDate(deal.closeDate.toString())}</span>\n                    </div>\n                    \n                    {deal.status === \"pending\" && (\n                      <div className=\"bg-gradient-to-r from-yellow-50 to-orange-50 rounded-lg p-3 border border-yellow-200\">\n                        <div className=\"text-sm font-medium text-yellow-700\">\n                          Waiting for admin approval\n                        </div>\n                      </div>\n                    )}\n                    \n                    {(deal.pointsEarned || 0) > 0 && (\n                      <div className=\"bg-gradient-to-r from-green-50 to-emerald-50 rounded-lg p-3 border border-green-200\">\n                        <div className=\"text-sm font-bold text-green-700 flex items-center\">\n                          <Trophy className=\"w-4 h-4 mr-2\" />\n                          Points Earned: {(deal.pointsEarned || 0).toLocaleString()}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"mt-6 pt-4 border-t border-gray-100 text-xs text-gray-500\">\n                    Submitted {formatDate(deal.createdAt.toString())}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card className=\"!bg-white !rounded-xl !shadow-lg !border-0 mx-auto max-w-lg\">\n            <CardContent className=\"p-12 text-center\">\n              <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <Package className=\"w-8 h-8 text-blue-600\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-gray-900 mb-3\" data-testid=\"text-no-deals-title\">\n                No deals yet\n              </h3>\n              <p className=\"text-gray-600 mb-8 leading-relaxed\" data-testid=\"text-no-deals-description\">\n                Register your first deal to start earning points and tracking your sales performance.\n              </p>\n              <Button\n                onClick={() => setIsDealModalOpen(true)}\n                size=\"lg\"\n                className=\"bg-blue-600 hover:bg-blue-700 text-white font-semibold px-8 py-4 rounded-lg shadow-lg transition-all duration-300 transform hover:scale-105\"\n                data-testid=\"button-register-first-deal\"\n              >\n                <Plus className=\"w-5 h-5 mr-2\" />\n                Register Your First Deal\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n\n        <DealModal\n          isOpen={isDealModalOpen}\n          onClose={() => setIsDealModalOpen(false)}\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":8391},"client/src/components/admin/SupportTicketsTab.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { MessageCircle, Clock, CheckCircle, XCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { SupportTicketWithUser } from \"@shared/schema\";\n\nexport default function SupportTicketsTab() {\n  const [selectedTicket, setSelectedTicket] = useState<SupportTicketWithUser | null>(null);\n  const [isResponseDialogOpen, setIsResponseDialogOpen] = useState(false);\n  const [adminResponse, setAdminResponse] = useState(\"\");\n  const [newStatus, setNewStatus] = useState<string>(\"\");\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: tickets, isLoading } = useQuery<SupportTicketWithUser[]>({\n    queryKey: [\"/api/admin/support-tickets\"],\n  });\n\n  const updateTicketMutation = useMutation({\n    mutationFn: async ({\n      id,\n      updates,\n    }: {\n      id: string;\n      updates: {\n        status?: string;\n        adminResponse?: string;\n        priority?: string;\n      };\n    }) => {\n      const response = await apiRequest(\"PATCH\", `/api/admin/support-tickets/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/support-tickets\"] });\n      toast({\n        title: \"Ticket actualizado\",\n        description: \"El ticket ha sido actualizado exitosamente\",\n      });\n      setIsResponseDialogOpen(false);\n      setAdminResponse(\"\");\n      setSelectedTicket(null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"No se pudo actualizar el ticket\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleOpenResponseDialog = (ticket: SupportTicketWithUser) => {\n    setSelectedTicket(ticket);\n    setAdminResponse(ticket.adminResponse || \"\");\n    setNewStatus(ticket.status);\n    setIsResponseDialogOpen(true);\n  };\n\n  const handleSubmitResponse = () => {\n    if (!selectedTicket) return;\n\n    updateTicketMutation.mutate({\n      id: selectedTicket.id,\n      updates: {\n        status: newStatus,\n        adminResponse: adminResponse || undefined,\n      },\n    });\n  };\n\n  const handleQuickStatusUpdate = (ticketId: string, status: string) => {\n    updateTicketMutation.mutate({\n      id: ticketId,\n      updates: { status },\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"open\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"in_progress\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"resolved\":\n        return \"bg-green-100 text-green-800\";\n      case \"closed\":\n        return \"bg-gray-100 text-gray-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"high\":\n        return \"bg-red-100 text-red-800\";\n      case \"medium\":\n        return \"bg-orange-100 text-orange-800\";\n      case \"low\":\n        return \"bg-green-100 text-green-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"open\":\n        return <MessageCircle className=\"h-4 w-4\" />;\n      case \"in_progress\":\n        return <Clock className=\"h-4 w-4\" />;\n      case \"resolved\":\n        return <CheckCircle className=\"h-4 w-4\" />;\n      case \"closed\":\n        return <XCircle className=\"h-4 w-4\" />;\n      default:\n        return <MessageCircle className=\"h-4 w-4\" />;\n    }\n  };\n\n  const formatDate = (dateString: string | Date) => {\n    return new Date(dateString).toLocaleDateString(\"es-ES\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  const formatStatus = (status: string) => {\n    switch (status) {\n      case \"open\":\n        return \"Abierto\";\n      case \"in_progress\":\n        return \"En Progreso\";\n      case \"resolved\":\n        return \"Resuelto\";\n      case \"closed\":\n        return \"Cerrado\";\n      default:\n        return status;\n    }\n  };\n\n  const formatPriority = (priority: string) => {\n    switch (priority) {\n      case \"high\":\n        return \"Alta\";\n      case \"medium\":\n        return \"Media\";\n      case \"low\":\n        return \"Baja\";\n      default:\n        return priority;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <Skeleton className=\"h-32 w-full\" />\n        <Skeleton className=\"h-32 w-full\" />\n        <Skeleton className=\"h-32 w-full\" />\n      </div>\n    );\n  }\n\n  const openTickets = tickets?.filter((t) => t.status === \"open\") || [];\n  const inProgressTickets = tickets?.filter((t) => t.status === \"in_progress\") || [];\n  const resolvedTickets = tickets?.filter((t) => t.status === \"resolved\") || [];\n  const closedTickets = tickets?.filter((t) => t.status === \"closed\") || [];\n\n  return (\n    <>\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Abiertos</p>\n                  <p className=\"text-2xl font-bold\" data-testid=\"text-open-tickets\">\n                    {openTickets.length}\n                  </p>\n                </div>\n                <MessageCircle className=\"h-8 w-8 text-blue-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">En Progreso</p>\n                  <p className=\"text-2xl font-bold\" data-testid=\"text-inprogress-tickets\">\n                    {inProgressTickets.length}\n                  </p>\n                </div>\n                <Clock className=\"h-8 w-8 text-yellow-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Resueltos</p>\n                  <p className=\"text-2xl font-bold\" data-testid=\"text-resolved-tickets\">\n                    {resolvedTickets.length}\n                  </p>\n                </div>\n                <CheckCircle className=\"h-8 w-8 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Cerrados</p>\n                  <p className=\"text-2xl font-bold\" data-testid=\"text-closed-tickets\">\n                    {closedTickets.length}\n                  </p>\n                </div>\n                <XCircle className=\"h-8 w-8 text-gray-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Tickets de Soporte</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {!tickets || tickets.length === 0 ? (\n              <div className=\"text-center py-8 text-gray-500\">\n                No hay tickets de soporte registrados\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {tickets.map((ticket) => (\n                  <Card key={ticket.id} className=\"border-l-4\" style={{\n                    borderLeftColor: ticket.status === \"open\" ? \"#3b82f6\" : \n                                   ticket.status === \"in_progress\" ? \"#eab308\" :\n                                   ticket.status === \"resolved\" ? \"#22c55e\" : \"#6b7280\"\n                  }}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-2\">\n                            {getStatusIcon(ticket.status)}\n                            <h3 className=\"font-semibold text-lg\" data-testid={`ticket-subject-${ticket.id}`}>\n                              {ticket.subject}\n                            </h3>\n                          </div>\n\n                          <p className=\"text-gray-600 mb-3\" data-testid={`ticket-message-${ticket.id}`}>\n                            {ticket.message}\n                          </p>\n\n                          <div className=\"flex flex-wrap gap-2 mb-3\">\n                            <Badge className={getStatusColor(ticket.status)} data-testid={`ticket-status-${ticket.id}`}>\n                              {formatStatus(ticket.status)}\n                            </Badge>\n                            <Badge className={getPriorityColor(ticket.priority)} data-testid={`ticket-priority-${ticket.id}`}>\n                              {formatPriority(ticket.priority)}\n                            </Badge>\n                          </div>\n\n                          <div className=\"text-sm text-gray-500 space-y-1\">\n                            <p>\n                              <span className=\"font-medium\">Usuario:</span>{\" \"}\n                              {ticket.userFirstName} {ticket.userLastName} ({ticket.userName})\n                            </p>\n                            <p>\n                              <span className=\"font-medium\">Email:</span> {ticket.userEmail}\n                            </p>\n                            <p>\n                              <span className=\"font-medium\">Creado:</span>{\" \"}\n                              {formatDate(ticket.createdAt)}\n                            </p>\n                            {ticket.respondedAt && (\n                              <p>\n                                <span className=\"font-medium\">Respondido:</span>{\" \"}\n                                {formatDate(ticket.respondedAt)}\n                              </p>\n                            )}\n                          </div>\n\n                          {ticket.adminResponse && (\n                            <div className=\"mt-3 p-3 bg-blue-50 rounded-md\">\n                              <p className=\"text-sm font-medium text-blue-900 mb-1\">\n                                Respuesta del Admin:\n                              </p>\n                              <p className=\"text-sm text-blue-800\">{ticket.adminResponse}</p>\n                            </div>\n                          )}\n                        </div>\n\n                        <div className=\"flex flex-col gap-2 ml-4\">\n                          <Button\n                            size=\"sm\"\n                            onClick={() => handleOpenResponseDialog(ticket)}\n                            data-testid={`button-respond-${ticket.id}`}\n                          >\n                            Responder\n                          </Button>\n                          {ticket.status === \"open\" && (\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => handleQuickStatusUpdate(ticket.id, \"in_progress\")}\n                              data-testid={`button-start-${ticket.id}`}\n                            >\n                              Iniciar\n                            </Button>\n                          )}\n                          {(ticket.status === \"in_progress\" || ticket.status === \"open\") && (\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => handleQuickStatusUpdate(ticket.id, \"resolved\")}\n                              data-testid={`button-resolve-${ticket.id}`}\n                            >\n                              Resolver\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      <Dialog open={isResponseDialogOpen} onOpenChange={setIsResponseDialogOpen}>\n        <DialogContent className=\"sm:max-w-[600px]\" data-testid=\"dialog-ticket-response\">\n          <DialogHeader>\n            <DialogTitle>Responder Ticket de Soporte</DialogTitle>\n            <DialogDescription>\n              Responde al usuario y actualiza el estado del ticket\n            </DialogDescription>\n          </DialogHeader>\n\n          {selectedTicket && (\n            <div className=\"space-y-4\">\n              <div className=\"p-4 bg-gray-50 rounded-md\">\n                <h4 className=\"font-semibold mb-2\">{selectedTicket.subject}</h4>\n                <p className=\"text-sm text-gray-600 mb-2\">{selectedTicket.message}</p>\n                <p className=\"text-xs text-gray-500\">\n                  Usuario: {selectedTicket.userFirstName} {selectedTicket.userLastName} (\n                  {selectedTicket.userEmail})\n                </p>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Estado</label>\n                <Select value={newStatus} onValueChange={setNewStatus}>\n                  <SelectTrigger data-testid=\"select-ticket-status\">\n                    <SelectValue placeholder=\"Selecciona el estado\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"open\">Abierto</SelectItem>\n                    <SelectItem value=\"in_progress\">En Progreso</SelectItem>\n                    <SelectItem value=\"resolved\">Resuelto</SelectItem>\n                    <SelectItem value=\"closed\">Cerrado</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">\n                  Respuesta (opcional)\n                </label>\n                <Textarea\n                  placeholder=\"Escribe tu respuesta al usuario...\"\n                  value={adminResponse}\n                  onChange={(e) => setAdminResponse(e.target.value)}\n                  className=\"min-h-[120px]\"\n                  data-testid=\"textarea-admin-response\"\n                />\n              </div>\n\n              <div className=\"flex justify-end gap-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setIsResponseDialogOpen(false)}\n                  data-testid=\"button-cancel-response\"\n                >\n                  Cancelar\n                </Button>\n                <Button\n                  onClick={handleSubmitResponse}\n                  disabled={updateTicketMutation.isPending}\n                  data-testid=\"button-submit-response\"\n                >\n                  {updateTicketMutation.isPending ? \"Guardando...\" : \"Guardar\"}\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":15831},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/modals/reward-modal.tsx":{"content":"import { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Reward } from \"@shared/schema\";\n\nconst rewardSchema = z.object({\n  name: z.string().min(1, \"Reward name is required\"),\n  description: z.string().optional(),\n  pointsCost: z.string().min(1, \"Points cost is required\"),\n  category: z.string().min(1, \"Category is required\"),\n  isActive: z.boolean().default(true),\n  stockQuantity: z.string().optional(),\n  imageUrl: z.string().url(\"Invalid URL\").optional().or(z.literal(\"\")),\n});\n\ntype RewardForm = z.infer<typeof rewardSchema>;\n\ninterface RewardModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  reward?: Reward | null;\n}\n\nconst categories = [\n  \"Gift Cards\",\n  \"Electronics\",\n  \"Travel\",\n  \"Accessories\",\n  \"Software\",\n  \"Training\",\n  \"Merchandise\",\n  \"Experiences\"\n];\n\nexport default function RewardModal({ isOpen, onClose, reward }: RewardModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const isEditing = !!reward;\n\n  const form = useForm<RewardForm>({\n    resolver: zodResolver(rewardSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      pointsCost: \"\",\n      category: \"\",\n      isActive: true,\n      stockQuantity: \"\",\n      imageUrl: \"\",\n    },\n  });\n\n  // Reset form when reward prop changes\n  useEffect(() => {\n    if (reward) {\n      form.reset({\n        name: reward.name || \"\",\n        description: reward.description || \"\",\n        pointsCost: reward.pointsCost?.toString() || \"\",\n        category: reward.category || \"\",\n        isActive: reward.isActive ?? true,\n        stockQuantity: reward.stockQuantity?.toString() || \"\",\n        imageUrl: reward.imageUrl || \"\",\n      });\n    } else {\n      form.reset({\n        name: \"\",\n        description: \"\",\n        pointsCost: \"\",\n        category: \"\",\n        isActive: true,\n        stockQuantity: \"\",\n        imageUrl: \"\",\n      });\n    }\n  }, [reward, form]);\n\n  const createRewardMutation = useMutation({\n    mutationFn: async (data: RewardForm) => {\n      const rewardData = {\n        ...data,\n        pointsCost: parseInt(data.pointsCost),\n        stockQuantity: data.stockQuantity ? parseInt(data.stockQuantity) : null,\n        imageUrl: data.imageUrl || null,\n      };\n      \n      if (isEditing) {\n        return apiRequest(\"PATCH\", `/api/admin/rewards/${reward.id}`, rewardData);\n      } else {\n        return apiRequest(\"POST\", \"/api/admin/rewards\", rewardData);\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: `Reward ${isEditing ? \"updated\" : \"created\"} successfully`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/rewards\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/rewards\"] });\n      form.reset();\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || `Failed to ${isEditing ? \"update\" : \"create\"} reward`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: RewardForm) => {\n    createRewardMutation.mutate(data);\n  };\n\n  const handleClose = () => {\n    form.reset();\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-semibold text-gray-900\">\n            {isEditing ? \"Edit Reward\" : \"Create New Reward\"}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Reward Name</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"$100 Amazon Gift Card\"\n                        data-testid=\"input-reward-name\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"pointsCost\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Points Cost</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"number\"\n                        placeholder=\"10000\"\n                        data-testid=\"input-points-cost\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description (Optional)</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      {...field}\n                      placeholder=\"Detailed description of the reward...\"\n                      className=\"h-24\"\n                      data-testid=\"textarea-description\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"category\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Category</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-category\">\n                          <SelectValue placeholder=\"Select category\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {categories.map((category) => (\n                          <SelectItem key={category} value={category}>\n                            {category}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"stockQuantity\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Stock Quantity (Optional)</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"number\"\n                        placeholder=\"100\"\n                        data-testid=\"input-stock-quantity\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"imageUrl\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Image URL (Optional)</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      type=\"url\"\n                      placeholder=\"https://example.com/image.jpg\"\n                      data-testid=\"input-image-url\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"isActive\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                  <div className=\"space-y-0.5\">\n                    <FormLabel className=\"text-base\">Active Status</FormLabel>\n                    <div className=\"text-sm text-gray-500\">\n                      Inactive rewards won't be visible to users\n                    </div>\n                  </div>\n                  <FormControl>\n                    <Switch\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                      data-testid=\"switch-active\"\n                    />\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={handleClose} data-testid=\"button-cancel\">\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createRewardMutation.isPending}\n                data-testid=\"button-submit-reward\"\n              >\n                {createRewardMutation.isPending \n                  ? (isEditing ? \"Updating...\" : \"Creating...\") \n                  : (isEditing ? \"Update Reward\" : \"Create Reward\")\n                }\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":10260},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"replit.md":{"content":"# Overview\n\nThis is a Loyalty Program Platform - a full-stack web application designed to manage reward and loyalty programs for manufacturers, distributors, and partners in the hardware and software industry. The platform enables users to register deals, earn points based on sales performance, and redeem rewards. It includes comprehensive admin functionality for managing users, approving deals, and tracking metrics across different countries and partner levels.\n\nThe application features a React frontend with TypeScript, an Express.js backend, and uses PostgreSQL with Drizzle ORM for data management. It implements role-based authentication, deal management workflows, points tracking, and a rewards redemption system.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for build tooling\n- **UI Library**: Radix UI components with shadcn/ui design system\n- **Styling**: Tailwind CSS with custom CSS variables for theming\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for client-side routing\n- **Forms**: React Hook Form with Zod validation\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Authentication**: Session-based auth with bcrypt for password hashing\n- **API Design**: RESTful API endpoints with structured error handling\n\n## Database Design\n- **Database**: PostgreSQL with connection pooling via Neon serverless\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Core Entities**:\n  - Users with role-based access (user/admin) and partner levels (bronze/silver/gold/platinum)\n  - Deals with approval workflow and points calculation\n  - Rewards catalog with category-based organization\n  - Points history tracking for audit trails\n  - User rewards redemption tracking\n  - Support tickets with status tracking and admin responses\n\n## Authentication & Authorization\n- **Session Management**: Server-side sessions with secure cookie handling\n- **Password Security**: bcrypt hashing with salt rounds\n- **Role-Based Access**: Admin and user roles with different permission levels\n- **Route Protection**: Authentication middleware on protected endpoints\n\n## Key Features\n- **Deal Management**: Users can submit deals for approval, admins can approve/reject and edit deals\n- **Points System**: Automatic points calculation based on deal values and product types\n- **Rewards Catalog**: Categorized rewards with stock management and redemption tracking. Admins can create, edit, and delete rewards\n- **User Statistics**: Real-time dashboard with points, deals, and performance metrics\n- **Admin Dashboard**: User management, deal approval workflows, and system analytics\n- **Multi-language Support**: Internationalization structure with English and Spanish support\n- **Support System**: Floating support button with ticket submission, FAQ section, and admin ticket management\n\n## Support System (Added October 2025)\n\nThe application includes a comprehensive support ticket system that allows users to submit questions and requests, and admins to manage and respond to them.\n\n### User Features\n- **Floating Support Button**: Always visible in the bottom-right corner for authenticated users\n- **Ticket Submission**: Users can create support tickets with subject, message, and priority level\n- **FAQ Section**: Quick access to 8 frequently asked questions covering common topics like deal registration, points, rewards, and shipment tracking\n- **Ticket History**: Users can view their own submitted tickets\n\n### Admin Features\n- **Support Tab**: Dedicated admin panel tab for managing all support tickets\n- **Ticket Dashboard**: Statistics showing counts by status (open, in-progress, resolved, closed)\n- **Response System**: Admins can respond to tickets and update their status\n- **Quick Actions**: One-click status updates (start working, mark as resolved)\n- **User Information**: Each ticket displays full user details including name and email\n\n### Technical Implementation\n- **Database Table**: `support_tickets` with fields for subject, message, status, priority, admin response, and timestamps\n- **Status Enum**: `support_ticket_status` with values: open, in_progress, resolved, closed\n- **API Endpoints**:\n  - POST `/api/support-tickets` - Create ticket (user)\n  - GET `/api/support-tickets` - Get user's tickets (user)\n  - GET `/api/admin/support-tickets` - Get all tickets (admin)\n  - PATCH `/api/admin/support-tickets/:id` - Update ticket (admin)\n- **Components**:\n  - `SupportButton.tsx` - Floating button with dialogs for ticket submission and FAQ\n  - `SupportTicketsTab.tsx` - Admin panel component for ticket management\n\n## Points Configuration System (Added October 2025)\n\nThe platform includes a dynamic points configuration system that allows admins to modify point assignment rules and set redemption periods without code changes.\n\n### Admin Configuration\n- **Points Config Tab**: Dedicated admin panel tab (9th tab) for managing all points-related settings\n- **Editable Rules**: Admins can modify point assignment rates for each product type:\n  - Software: Dollars per 1 point (default: $1000)\n  - Hardware: Dollars per 1 point (default: $5000)\n  - Equipment: Dollars per 1 point (default: $10000)\n- **Grand Prize Threshold**: Configurable point threshold for grand prize eligibility (default: 50,000 points)\n- **Redemption Period**: Admins can set start and end dates for when users can redeem rewards\n  - Start Date: Beginning of redemption period\n  - End Date: End of redemption period\n  - Dates are optional and only displayed to users when both are configured\n\n### User Experience\n- **Dynamic Point Calculation**: All new deals automatically use the current configured rates\n- **Redemption Period Display**: Users see the active redemption period as an alert on the Rewards page\n  - Format: \"Período de Redención: [fecha inicio] - [fecha fin]\"\n  - Dates formatted in Spanish locale (e.g., \"1 de octubre de 2025 - 31 de diciembre de 2025\")\n  - Alert only shows when both dates are configured\n\n### Technical Implementation\n- **Database Table**: `points_config` with fields:\n  - `software_rate`, `hardware_rate`, `equipment_rate`: Integer rates for point calculation\n  - `grand_prize_threshold`: Integer threshold for grand prize\n  - `redemption_start_date`, `redemption_end_date`: Nullable timestamps for redemption period\n  - `updated_at`, `updated_by`: Audit trail fields\n- **API Endpoints**:\n  - GET `/api/points-config` - Public endpoint returning redemption dates and grand prize threshold\n  - GET `/api/admin/points-config` - Admin endpoint returning full configuration\n  - PATCH `/api/admin/points-config` - Admin endpoint for updating configuration\n- **Components**:\n  - `PointsConfigTab.tsx` - Admin panel component with forms for all configuration options\n  - Date pickers for redemption period with HTML5 date inputs\n  - Alert component in `rewards.tsx` displaying redemption period to users\n\n## External Dependencies\n\n- **Database**: Neon PostgreSQL serverless database for production data storage\n- **UI Components**: Radix UI primitives for accessible component foundations\n- **Validation**: Zod for runtime type validation and schema definition\n- **Styling**: Tailwind CSS for utility-first styling approach\n- **Build Tools**: Vite for fast development and production builds\n- **Development**: Replit-specific plugins for development environment integration","size_bytes":7650},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  LayoutDashboard,\n  Users,\n  ClipboardCheck,\n  Gift,\n  BarChart3,\n  Settings,\n  ChevronLeft,\n  ChevronRight\n} from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface SidebarProps {\n  className?: string;\n}\n\ninterface NavItem {\n  href: string;\n  label: string;\n  icon: React.ComponentType<{ className?: string }>;\n  description?: string;\n}\n\nconst adminNavItems: NavItem[] = [\n  {\n    href: \"/admin\",\n    label: \"Overview\",\n    icon: LayoutDashboard,\n    description: \"Dashboard and analytics\"\n  },\n  {\n    href: \"/admin/users\",\n    label: \"Users\",\n    icon: Users,\n    description: \"Manage user accounts\"\n  },\n  {\n    href: \"/admin/deals\",\n    label: \"Deals\",\n    icon: ClipboardCheck,\n    description: \"Review and approve deals\"\n  },\n  {\n    href: \"/admin/rewards\",\n    label: \"Rewards\",\n    icon: Gift,\n    description: \"Manage reward catalog\"\n  },\n  {\n    href: \"/admin/reports\",\n    label: \"Reports\",\n    icon: BarChart3,\n    description: \"Generate analytics reports\"\n  },\n];\n\nexport default function Sidebar({ className }: SidebarProps) {\n  const [location] = useLocation();\n  const [isCollapsed, setIsCollapsed] = useState(false);\n\n  return (\n    <div\n      className={cn(\n        \"relative flex h-screen flex-col border-r bg-white shadow-sm transition-all duration-300\",\n        isCollapsed ? \"w-16\" : \"w-64\",\n        className\n      )}\n    >\n      {/* Header */}\n      <div className=\"flex h-16 items-center justify-between px-4 border-b\">\n        {!isCollapsed && (\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-primary-600 rounded-lg flex items-center justify-center\">\n              <span className=\"text-white font-bold text-sm\">LP</span>\n            </div>\n            <span className=\"font-semibold text-gray-900\">Admin Panel</span>\n          </div>\n        )}\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => setIsCollapsed(!isCollapsed)}\n          className=\"h-8 w-8 p-0\"\n          data-testid=\"button-toggle-sidebar\"\n        >\n          {isCollapsed ? (\n            <ChevronRight className=\"h-4 w-4\" />\n          ) : (\n            <ChevronLeft className=\"h-4 w-4\" />\n          )}\n        </Button>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 space-y-1 p-2\">\n        {adminNavItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.href || \n            (item.href !== \"/admin\" && location.startsWith(item.href));\n\n          return (\n            <Link key={item.href} href={item.href}>\n              <Button\n                variant={isActive ? \"default\" : \"ghost\"}\n                className={cn(\n                  \"w-full justify-start h-12\",\n                  isCollapsed ? \"px-2\" : \"px-3\",\n                  isActive && \"bg-primary-600 text-white hover:bg-primary-700\",\n                  !isActive && \"text-gray-700 hover:text-gray-900 hover:bg-gray-100\"\n                )}\n                data-testid={`nav-${item.label.toLowerCase()}`}\n              >\n                <Icon className={cn(\"h-5 w-5\", isCollapsed ? \"\" : \"mr-3\")} />\n                {!isCollapsed && (\n                  <div className=\"text-left\">\n                    <div className=\"font-medium\">{item.label}</div>\n                    {item.description && (\n                      <div className=\"text-xs opacity-75\">{item.description}</div>\n                    )}\n                  </div>\n                )}\n              </Button>\n            </Link>\n          );\n        })}\n      </nav>\n\n      {/* Footer */}\n      <div className=\"p-2 border-t\">\n        <Link href=\"/admin/settings\">\n          <Button\n            variant=\"ghost\"\n            className={cn(\n              \"w-full justify-start h-12\",\n              isCollapsed ? \"px-2\" : \"px-3\",\n              \"text-gray-700 hover:text-gray-900 hover:bg-gray-100\"\n            )}\n            data-testid=\"nav-settings\"\n          >\n            <Settings className={cn(\"h-5 w-5\", isCollapsed ? \"\" : \"mr-3\")} />\n            {!isCollapsed && (\n              <div className=\"text-left\">\n                <div className=\"font-medium\">Settings</div>\n                <div className=\"text-xs opacity-75\">System configuration</div>\n              </div>\n            )}\n          </Button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4514},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport bcrypt from \"bcryptjs\";\nimport { insertUserSchema, updateUserSchema, insertDealSchema, insertRewardSchema, insertSupportTicketSchema, updateSupportTicketSchema, updatePointsConfigSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport * as XLSX from 'xlsx';\n\n// Extend session data interface\ndeclare module 'express-session' {\n  interface SessionData {\n    userId?: string;\n    userRole?: string;\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      let user = await storage.getUserByUsername(username);\n      \n      // If not found by username, try by email (for flexibility)\n      if (!user) {\n        user = await storage.getUserByEmail(username);\n      }\n      \n      if (!user || !await bcrypt.compare(password, user.password)) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      if (!user.isActive) {\n        return res.status(401).json({ message: \"Account inactive\" });\n      }\n\n      if (!user.isApproved) {\n        return res.status(401).json({ message: \"Account pending approval. Please wait for administrator approval.\" });\n      }\n\n      // Store user in session\n      if (req.session) {\n        req.session.userId = user.id;\n        req.session.userRole = user.role;\n      }\n\n      res.json({ \n        id: user.id, \n        username: user.username,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n        country: user.country\n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      console.error(\"Request body:\", req.body);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const hashedPassword = await bcrypt.hash(userData.password, 10);\n      \n      const user = await storage.createUser({\n        ...userData,\n        password: hashedPassword,\n        isApproved: false, // New users need approval\n      });\n\n      res.status(201).json({ \n        id: user.id, \n        username: user.username,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        message: \"Registration successful. Please wait for administrator approval before you can log in.\"\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Registration failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    if (req.session) {\n      req.session.destroy((err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Could not log out\" });\n        }\n        res.json({ message: \"Logged out\" });\n      });\n    } else {\n      res.json({ message: \"Logged out\" });\n    }\n  });\n\n  app.get(\"/api/auth/me\", async (req, res) => {\n    const userId = req.session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    const user = await storage.getUser(userId);\n    if (!user) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n\n    res.json({\n      id: user.id,\n      username: user.username,\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      role: user.role,\n      country: user.country\n    });\n  });\n\n  // User routes\n  app.get(\"/api/users/stats\", async (req, res) => {\n    const userId = req.session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const stats = await storage.getUserStats(userId);\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user stats\" });\n    }\n  });\n\n  app.get(\"/api/users/leaderboard\", async (req, res) => {\n    const userId = req.session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 5;\n      const topUsers = await storage.getTopUsersByPoints(limit);\n      res.json(topUsers);\n    } catch (error) {\n      console.error(\"Failed to get leaderboard:\", error);\n      res.status(500).json({ message: \"Failed to get leaderboard\" });\n    }\n  });\n\n  // Deal routes\n  app.post(\"/api/deals\", async (req, res) => {\n    const userId = req.session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const dealData = insertDealSchema.parse({ ...req.body, userId });\n      const deal = await storage.createDeal(dealData);\n      res.status(201).json(deal);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create deal\" });\n    }\n  });\n\n  app.get(\"/api/deals\", async (req, res) => {\n    const userId = req.session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const deals = await storage.getUserDeals(userId);\n      res.json(deals);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get deals\" });\n    }\n  });\n\n  app.get(\"/api/deals/recent\", async (req, res) => {\n    const userId = req.session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 5;\n      const deals = await storage.getRecentDeals(userId, limit);\n      res.json(deals);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get recent deals\" });\n    }\n  });\n\n  app.post(\"/api/deals/:id/approve\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    const userId = req.session?.userId;\n    \n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const deal = await storage.approveDeal(req.params.id, userId!);\n      if (!deal) {\n        return res.status(404).json({ message: \"Deal not found\" });\n      }\n      res.json(deal);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to approve deal\" });\n    }\n  });\n\n  app.post(\"/api/deals/:id/reject\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    \n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const deal = await storage.rejectDeal(req.params.id);\n      if (!deal) {\n        return res.status(404).json({ message: \"Deal not found\" });\n      }\n      res.json(deal);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to reject deal\" });\n    }\n  });\n\n  app.patch(\"/api/admin/deals/:id\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    \n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const { updateDealSchema } = await import(\"@shared/schema\");\n      const updates = updateDealSchema.parse(req.body);\n      const deal = await storage.updateDeal(req.params.id, updates);\n      \n      if (!deal) {\n        return res.status(404).json({ message: \"Deal not found\" });\n      }\n      \n      res.json(deal);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update deal\" });\n    }\n  });\n\n  // Reward routes\n  app.get(\"/api/rewards\", async (req, res) => {\n    try {\n      const rewards = await storage.getRewards();\n      res.json(rewards);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get rewards\" });\n    }\n  });\n\n  // Admin reward creation endpoint\n  app.post(\"/api/admin/rewards\", async (req, res) => {\n    console.log(\"POST /api/admin/rewards - Session:\", req.session);\n    console.log(\"POST /api/admin/rewards - Body:\", req.body);\n    \n    const userRole = req.session?.userRole;\n    console.log(\"User role:\", userRole);\n    \n    if (userRole !== \"admin\") {\n      console.log(\"Access denied - not admin\");\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const rewardData = insertRewardSchema.parse(req.body);\n      console.log(\"Parsed reward data:\", rewardData);\n      \n      const newReward = await storage.createReward(rewardData);\n      console.log(\"Created reward:\", newReward);\n      \n      res.status(201).json(newReward);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        console.log(\"Validation error:\", error.errors);\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Create reward error:\", error);\n      res.status(500).json({ message: \"Failed to create reward\" });\n    }\n  });\n\n  // Admin reward update endpoint\n  app.patch(\"/api/admin/rewards/:id\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      const updatedReward = await storage.updateReward(id, updates);\n      if (!updatedReward) {\n        return res.status(404).json({ message: \"Reward not found\" });\n      }\n      \n      res.json(updatedReward);\n    } catch (error) {\n      console.error(\"Update reward error:\", error);\n      res.status(500).json({ message: \"Failed to update reward\" });\n    }\n  });\n\n  // Admin reward delete endpoint\n  app.delete(\"/api/admin/rewards/:id\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const { id } = req.params;\n      \n      const deletedReward = await storage.deleteReward(id);\n      if (!deletedReward) {\n        return res.status(404).json({ message: \"Reward not found\" });\n      }\n      \n      res.json({ message: \"Reward deleted successfully\", reward: deletedReward });\n    } catch (error) {\n      console.error(\"Delete reward error:\", error);\n      res.status(500).json({ message: \"Failed to delete reward\" });\n    }\n  });\n\n  // Admin get all rewards endpoint\n  app.get(\"/api/admin/rewards\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const rewards = await storage.getRewards();\n      res.json(rewards);\n    } catch (error) {\n      console.error(\"Get admin rewards error:\", error);\n      res.status(500).json({ message: \"Failed to get rewards\" });\n    }\n  });\n\n  // Admin endpoints for reward approval - MUST BE BEFORE /:id route\n  app.get(\"/api/admin/rewards/pending\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const pendingRedemptions = await storage.getPendingRewardRedemptions();\n      res.json(pendingRedemptions);\n    } catch (error) {\n      console.error(\"Get pending redemptions error:\", error);\n      res.status(500).json({ message: \"Failed to get pending redemptions\" });\n    }\n  });\n\n  // Admin endpoint to get all reward redemptions - MUST BE BEFORE /:id route\n  app.get(\"/api/admin/rewards/redemptions\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const allRedemptions = await storage.getAllRewardRedemptions();\n      res.json(allRedemptions);\n    } catch (error) {\n      console.error(\"Get all redemptions error:\", error);\n      res.status(500).json({ message: \"Failed to get all redemptions\" });\n    }\n  });\n\n  // Admin get single reward endpoint - MUST BE AFTER specific routes\n  app.get(\"/api/admin/rewards/:id\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const { id } = req.params;\n      const reward = await storage.getReward(id);\n      if (!reward) {\n        return res.status(404).json({ message: \"Reward not found\" });\n      }\n      res.json(reward);\n    } catch (error) {\n      console.error(\"Get admin reward error:\", error);\n      res.status(500).json({ message: \"Failed to get reward\" });\n    }\n  });\n\n  app.post(\"/api/rewards/:id/redeem\", async (req, res) => {\n    const userId = req.session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const userReward = await storage.redeemReward(userId, req.params.id);\n      res.json(userReward);\n    } catch (error) {\n      if (error instanceof Error) {\n        res.status(400).json({ message: error.message });\n      } else {\n        res.status(500).json({ message: \"Failed to redeem reward\" });\n      }\n    }\n  });\n\n  app.get(\"/api/user-rewards\", async (req, res) => {\n    const userId = req.session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const userRewards = await storage.getUserRewardsWithDetails(userId);\n      res.json(userRewards);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user rewards\" });\n    }\n  });\n\n\n  app.post(\"/api/admin/rewards/:redemptionId/approve\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    const adminId = req.session?.userId;\n    \n    if (userRole !== \"admin\" || !adminId) {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const { redemptionId } = req.params;\n      const updatedRedemption = await storage.approveRewardRedemption(redemptionId, adminId);\n      \n      if (!updatedRedemption) {\n        return res.status(404).json({ message: \"Redemption not found\" });\n      }\n      \n      res.json(updatedRedemption);\n    } catch (error) {\n      console.error(\"Approve redemption error:\", error);\n      if (error instanceof Error) {\n        res.status(400).json({ message: error.message });\n      } else {\n        res.status(500).json({ message: \"Failed to approve redemption\" });\n      }\n    }\n  });\n\n  app.post(\"/api/admin/rewards/:redemptionId/reject\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    const adminId = req.session?.userId;\n    \n    if (userRole !== \"admin\" || !adminId) {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const { redemptionId } = req.params;\n      const { reason } = req.body;\n      \n      const updatedRedemption = await storage.rejectRewardRedemption(redemptionId, adminId, reason);\n      \n      if (!updatedRedemption) {\n        return res.status(404).json({ message: \"Redemption not found\" });\n      }\n      \n      res.json(updatedRedemption);\n    } catch (error) {\n      console.error(\"Reject redemption error:\", error);\n      res.status(500).json({ message: \"Failed to reject redemption\" });\n    }\n  });\n\n\n  // Admin endpoint to update reward shipment status\n  app.put(\"/api/admin/rewards/:redemptionId/shipment\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    const adminId = req.session?.userId;\n    \n    if (userRole !== \"admin\" || !adminId) {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const { redemptionId } = req.params;\n      const { shipmentStatus } = req.body;\n\n      // Validate shipment status\n      if (![\"pending\", \"shipped\", \"delivered\"].includes(shipmentStatus)) {\n        return res.status(400).json({ message: \"Invalid shipment status\" });\n      }\n\n      const updatedRedemption = await storage.updateRewardShipmentStatus(redemptionId, shipmentStatus, adminId);\n      \n      if (updatedRedemption) {\n        res.json({ \n          message: `Reward shipment status updated to ${shipmentStatus}`,\n          shipmentStatus: updatedRedemption.shipmentStatus\n        });\n      } else {\n        res.status(404).json({ message: \"Redemption not found\" });\n      }\n    } catch (error) {\n      console.error(\"Update shipment status error:\", error);\n      res.status(500).json({ message: \"Failed to update shipment status\" });\n    }\n  });\n\n  // Points routes\n  app.get(\"/api/points/history\", async (req, res) => {\n    const userId = req.session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const history = await storage.getUserPointsHistory(userId);\n      res.json(history);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get points history\" });\n    }\n  });\n\n  // Admin routes\n  app.get(\"/api/admin/users\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get users\" });\n    }\n  });\n\n  // Admin create user endpoint\n  app.post(\"/api/admin/users\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUserByUsername = await storage.getUserByUsername(userData.username);\n      if (existingUserByUsername) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n\n      const existingUserByEmail = await storage.getUserByEmail(userData.email);\n      if (existingUserByEmail) {\n        return res.status(400).json({ message: \"Email already exists\" });\n      }\n\n      const hashedPassword = await bcrypt.hash(userData.password, 10);\n      \n      const user = await storage.createUser({\n        ...userData,\n        password: hashedPassword,\n      });\n\n      res.status(201).json({ \n        id: user.id, \n        username: user.username,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n        country: user.country,\n        isActive: user.isActive,\n        createdAt: user.createdAt\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Admin user creation error:\", error);\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  app.patch(\"/api/admin/users/:userId/role\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const { userId } = req.params;\n      const { role } = req.body;\n\n      if (!role) {\n        return res.status(400).json({ message: \"Role is required\" });\n      }\n\n      if (![\"user\", \"admin\"].includes(role)) {\n        return res.status(400).json({ message: \"Invalid role\" });\n      }\n\n      const updatedUser = await storage.updateUserRole(userId, role as \"user\" | \"admin\");\n      res.json(updatedUser);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update user role\" });\n    }\n  });\n\n  // Update user information endpoint\n  app.patch(\"/api/admin/users/:userId\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const { userId } = req.params;\n      const updateData = updateUserSchema.parse(req.body);\n\n      // Check if username or email already exists (excluding current user)\n      if (updateData.username) {\n        const existingUserByUsername = await storage.getUserByUsername(updateData.username);\n        if (existingUserByUsername && existingUserByUsername.id !== userId) {\n          return res.status(400).json({ message: \"Username already exists\" });\n        }\n      }\n\n      if (updateData.email) {\n        const existingUserByEmail = await storage.getUserByEmail(updateData.email);\n        if (existingUserByEmail && existingUserByEmail.id !== userId) {\n          return res.status(400).json({ message: \"Email already exists\" });\n        }\n      }\n\n      const updatedUser = await storage.updateUser(userId, updateData);\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json(updatedUser);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Update user error:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  // Delete user endpoint\n  app.delete(\"/api/admin/users/:userId\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const { userId } = req.params;\n      const currentUserId = req.session?.userId;\n\n      // Prevent admin from deleting themselves\n      if (userId === currentUserId) {\n        return res.status(400).json({ message: \"Cannot delete your own account\" });\n      }\n\n      const deletedUser = await storage.deleteUser(userId);\n      if (!deletedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ message: \"User deleted successfully\", userId });\n    } catch (error) {\n      console.error(\"Delete user error:\", error);\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  app.get(\"/api/admin/deals\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 20;\n      \n      const result = await storage.getAllDeals(page, limit);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get all deals\" });\n    }\n  });\n\n  app.get(\"/api/admin/deals/pending\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const deals = await storage.getPendingDeals();\n      res.json(deals);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get pending deals\" });\n    }\n  });\n\n  app.get(\"/api/admin/reports\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const filters = {\n        country: req.query.country === \"all\" ? undefined : req.query.country as string,\n        partnerLevel: req.query.partnerLevel === \"all\" ? undefined : req.query.partnerLevel as string,\n        startDate: req.query.startDate ? new Date(req.query.startDate as string) : undefined,\n        endDate: req.query.endDate ? new Date(req.query.endDate as string) : undefined,\n      };\n\n      const data = await storage.getReportsData(filters);\n      res.json(data);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get reports data\" });\n    }\n  });\n\n  app.get(\"/api/admin/reports/user-ranking\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const filters = {\n        startDate: req.query.startDate ? new Date(req.query.startDate as string) : undefined,\n        endDate: req.query.endDate ? new Date(req.query.endDate as string) : undefined,\n      };\n\n      const data = await storage.getUserRankingReport(filters);\n      res.json(data);\n    } catch (error) {\n      console.error(\"Error getting user ranking report:\", error);\n      res.status(500).json({ message: \"Failed to get user ranking report\" });\n    }\n  });\n\n  app.get(\"/api/admin/reports/user-ranking/export\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      // Using statically imported XLSX\n      \n      const filters = {\n        startDate: req.query.startDate ? new Date(req.query.startDate as string) : undefined,\n        endDate: req.query.endDate ? new Date(req.query.endDate as string) : undefined,\n      };\n\n      const data = await storage.getUserRankingReport(filters);\n      \n      // Create Excel workbook\n      const workbook = XLSX.utils.book_new();\n      \n      // Prepare data for Excel\n      const excelData = data.map((user, index) => ({\n        'Ranking': index + 1,\n        'Username': user.username,\n        'Name': `${user.firstName} ${user.lastName}`.trim(),\n        'Email': user.email,\n        'Country': user.country,\n        'Total Points': user.totalPoints,\n        'Total Deals': user.totalDeals,\n        'Total Sales ($)': user.totalSales.toFixed(2)\n      }));\n      \n      // Create worksheet\n      const worksheet = XLSX.utils.json_to_sheet(excelData);\n      \n      // Auto-size columns\n      const columnWidths = [\n        { wch: 10 }, // Ranking\n        { wch: 15 }, // Username\n        { wch: 25 }, // Name\n        { wch: 30 }, // Email\n        { wch: 15 }, // Country\n        { wch: 15 }, // Total Points\n        { wch: 15 }, // Total Deals\n        { wch: 20 }  // Total Sales\n      ];\n      worksheet['!cols'] = columnWidths;\n      \n      // Add worksheet to workbook\n      const sheetName = `User Ranking ${new Date().toISOString().split('T')[0]}`;\n      XLSX.utils.book_append_sheet(workbook, worksheet, sheetName);\n      \n      // Generate Excel buffer\n      const excelBuffer = XLSX.write(workbook, { \n        type: 'buffer', \n        bookType: 'xlsx',\n        compression: true \n      });\n      \n      // Set response headers for file download\n      const filename = `user-ranking-${new Date().toISOString().split('T')[0]}.xlsx`;\n      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.setHeader('Content-Length', excelBuffer.length);\n      \n      // Send the file\n      res.send(excelBuffer);\n      \n    } catch (error) {\n      console.error(\"Error generating Excel report:\", error);\n      res.status(500).json({ message: \"Failed to generate Excel report\" });\n    }\n  });\n\n  app.get(\"/api/admin/reports/reward-redemptions\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const filters = {\n        startDate: req.query.startDate ? new Date(req.query.startDate as string) : undefined,\n        endDate: req.query.endDate ? new Date(req.query.endDate as string) : undefined,\n      };\n\n      const data = await storage.getRewardRedemptionsReport(filters);\n      res.json(data);\n    } catch (error) {\n      console.error(\"Error getting reward redemptions report:\", error);\n      res.status(500).json({ message: \"Failed to get reward redemptions report\" });\n    }\n  });\n\n  app.get(\"/api/admin/reports/reward-redemptions/export\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const filters = {\n        startDate: req.query.startDate ? new Date(req.query.startDate as string) : undefined,\n        endDate: req.query.endDate ? new Date(req.query.endDate as string) : undefined,\n      };\n\n      const data = await storage.getRewardRedemptionsReport(filters);\n      \n      // Create Excel workbook\n      const workbook = XLSX.utils.book_new();\n      \n      // Prepare data for Excel\n      const excelData = data.map((redemption, index) => ({\n        'No.': index + 1,\n        'Username': redemption.userName || 'N/A',\n        'Name': `${redemption.userFirstName || ''} ${redemption.userLastName || ''}`.trim() || 'N/A',\n        'Email': redemption.userEmail || 'N/A',\n        'Reward': redemption.rewardName || 'N/A',\n        'Points Cost': redemption.pointsCost || 0,\n        'Status': redemption.status || 'N/A',\n        'Redeemed Date': redemption.redeemedAt ? new Date(redemption.redeemedAt).toLocaleDateString() : 'N/A',\n        'Approved Date': redemption.approvedAt ? new Date(redemption.approvedAt).toLocaleDateString() : 'N/A'\n      }));\n      \n      // Create worksheet\n      const worksheet = XLSX.utils.json_to_sheet(excelData);\n      \n      // Auto-size columns\n      const columnWidths = [\n        { wch: 8 },  // No.\n        { wch: 15 }, // Username\n        { wch: 25 }, // Name\n        { wch: 30 }, // Email\n        { wch: 30 }, // Reward\n        { wch: 12 }, // Points Cost\n        { wch: 12 }, // Status\n        { wch: 15 }, // Redeemed Date\n        { wch: 15 }  // Approved Date\n      ];\n      worksheet['!cols'] = columnWidths;\n      \n      // Add worksheet to workbook\n      const sheetName = `Reward Redemptions ${new Date().toISOString().split('T')[0]}`;\n      XLSX.utils.book_append_sheet(workbook, worksheet, sheetName);\n      \n      // Generate Excel buffer\n      const excelBuffer = XLSX.write(workbook, { \n        type: 'buffer', \n        bookType: 'xlsx',\n        compression: true \n      });\n      \n      // Set response headers for file download\n      const filename = `reward-redemptions-${new Date().toISOString().split('T')[0]}.xlsx`;\n      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.setHeader('Content-Length', excelBuffer.length);\n      \n      // Send the file\n      res.send(excelBuffer);\n      \n    } catch (error) {\n      console.error(\"Error generating reward redemptions Excel report:\", error);\n      res.status(500).json({ message: \"Failed to generate reward redemptions Excel report\" });\n    }\n  });\n\n  // CSV upload routes\n  app.post(\"/api/admin/csv/upload-url\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const { ObjectStorageService } = await import(\"./objectStorage\");\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ message: \"Failed to get upload URL\" });\n    }\n  });\n\n  // Users CSV upload URL endpoint\n  app.post(\"/api/admin/csv/users/upload-url\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const { ObjectStorageService } = await import(\"./objectStorage\");\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting users CSV upload URL:\", error);\n      res.status(500).json({ message: \"Failed to get upload URL\" });\n    }\n  });\n\n  // Calculate points based on product type and deal value\n  function calculatePointsForDeal(productType: string, dealValue: number): number {\n    const value = Number(dealValue);\n    if (isNaN(value) || value <= 0) return 0;\n\n    switch (productType) {\n      case \"software\":\n        return Math.floor(value / 1000); // 1 point per $1000\n      case \"hardware\":\n        return Math.floor(value / 5000); // 1 point per $5000\n      case \"equipment\":\n        return Math.floor(value / 10000); // 1 point per $10000\n      default:\n        return 0;\n    }\n  }\n\n  app.post(\"/api/admin/csv/process\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const { csvPath } = req.body;\n      if (!csvPath) {\n        return res.status(400).json({ message: \"CSV path is required\" });\n      }\n\n      const { ObjectStorageService } = await import(\"./objectStorage\");\n      const objectStorageService = new ObjectStorageService();\n      \n      // Download and parse CSV content\n      const objectPath = objectStorageService.normalizeObjectEntityPath(csvPath);\n      const csvContent = await objectStorageService.downloadCSVContent(objectPath);\n      \n      // Parse CSV content\n      const lines = csvContent.trim().split('\\n');\n      if (lines.length < 2) {\n        return res.status(400).json({ message: \"CSV file must have at least a header and one data row\" });\n      }\n\n      const header = lines[0].toLowerCase().split(',').map(h => h.trim());\n      const expectedHeaders = ['usuario', 'valor', 'status', 'tipo'];\n      const optionalHeaders = ['acuerdo']; // License Agreement Number column\n      \n      // Validate required headers\n      const hasAllHeaders = expectedHeaders.every(h => header.includes(h));\n      if (!hasAllHeaders) {\n        return res.status(400).json({ \n          message: `CSV must have columns: ${expectedHeaders.join(', ')}. Optional columns: ${optionalHeaders.join(', ')}. Found: ${header.join(', ')}` \n        });\n      }\n\n      const userIndex = header.indexOf('usuario');\n      const valueIndex = header.indexOf('valor');\n      const statusIndex = header.indexOf('status');\n      const typeIndex = header.indexOf('tipo');\n      const licenseIndex = header.indexOf('acuerdo'); // Optional\n\n      const dealsToInsert = [];\n      const errors = [];\n\n      // Process each data row\n      for (let i = 1; i < lines.length; i++) {\n        const row = lines[i].split(',').map(cell => cell.trim());\n        \n        if (row.length !== header.length) {\n          errors.push(`Row ${i + 1}: Column count mismatch`);\n          continue;\n        }\n\n        const username = row[userIndex];\n        const value = row[valueIndex];\n        const status = row[statusIndex].toLowerCase();\n        const type = row[typeIndex].toLowerCase();\n        const licenseAgreementNumber = licenseIndex >= 0 ? row[licenseIndex] || '' : '';\n\n        // Validate data\n        if (!username) {\n          errors.push(`Row ${i + 1}: Usuario is required`);\n          continue;\n        }\n\n        if (!value || isNaN(parseFloat(value))) {\n          errors.push(`Row ${i + 1}: Valor must be a valid number`);\n          continue;\n        }\n\n        if (!['pending', 'approved', 'rejected'].includes(status)) {\n          errors.push(`Row ${i + 1}: Status must be pending, approved, or rejected`);\n          continue;\n        }\n\n        if (!['software', 'hardware', 'equipment'].includes(type)) {\n          errors.push(`Row ${i + 1}: Tipo must be software, hardware, or equipment`);\n          continue;\n        }\n\n        // Find user by username\n        const user = await storage.getUserByUsername(username);\n        if (!user) {\n          errors.push(`Row ${i + 1}: User '${username}' not found`);\n          continue;\n        }\n\n        dealsToInsert.push({\n          userId: user.id,\n          productType: type as \"software\" | \"hardware\" | \"equipment\",\n          productName: `Imported Deal - ${type}`,\n          dealValue: value, // Keep as string\n          quantity: 1,\n          closeDate: new Date(),\n          clientInfo: `Bulk import from CSV on ${new Date().toISOString()}`,\n          licenseAgreementNumber: licenseAgreementNumber || undefined,\n          status: status as \"pending\" | \"approved\" | \"rejected\",\n          pointsEarned: status === \"approved\" ? calculatePointsForDeal(type, parseFloat(value)) : 0,\n        });\n      }\n\n      if (errors.length > 0 && dealsToInsert.length === 0) {\n        return res.status(400).json({ \n          message: \"No valid deals to import\", \n          errors: errors.slice(0, 10) // Limit error messages\n        });\n      }\n\n      // Insert deals\n      const insertedDeals = [];\n      for (const dealData of dealsToInsert) {\n        try {\n          const deal = await storage.createDeal(dealData);\n          insertedDeals.push(deal);\n          \n          // Add points history for approved deals\n          if (dealData.status === \"approved\" && dealData.pointsEarned > 0) {\n            await storage.addPointsHistory({\n              userId: dealData.userId,\n              dealId: deal.id,\n              points: dealData.pointsEarned,\n              description: `Points earned from bulk imported deal: ${dealData.productName}`,\n            });\n          }\n        } catch (error) {\n          console.error(\"Error inserting deal:\", error);\n          errors.push(`Failed to insert deal for user ${dealData.userId}`);\n        }\n      }\n\n      res.json({\n        message: `Successfully imported ${insertedDeals.length} deals`,\n        imported: insertedDeals.length,\n        errors: errors.length > 0 ? errors.slice(0, 10) : undefined\n      });\n\n    } catch (error) {\n      console.error(\"Error processing CSV:\", error);\n      res.status(500).json({ message: \"Failed to process CSV file\" });\n    }\n  });\n\n  // Users CSV processing endpoint\n  app.post(\"/api/admin/csv/users/process\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const { csvPath } = req.body;\n      if (!csvPath) {\n        return res.status(400).json({ message: \"CSV path is required\" });\n      }\n\n      const { ObjectStorageService } = await import(\"./objectStorage\");\n      const objectStorageService = new ObjectStorageService();\n      \n      // Download and parse CSV content\n      const objectPath = objectStorageService.normalizeObjectEntityPath(csvPath);\n      const csvContent = await objectStorageService.downloadCSVContent(objectPath);\n      \n      // Parse CSV content\n      const lines = csvContent.trim().split('\\n');\n      if (lines.length < 2) {\n        return res.status(400).json({ message: \"CSV file must have at least a header and one data row\" });\n      }\n\n      const header = lines[0].toLowerCase().split(',').map(h => h.trim());\n      const expectedHeaders = ['first name', 'last name', 'username', 'email', 'password', 'country', 'role', 'partner level'];\n      \n      // Validate headers\n      const hasAllHeaders = expectedHeaders.every(h => header.includes(h));\n      if (!hasAllHeaders) {\n        return res.status(400).json({ \n          message: `CSV must have columns: ${expectedHeaders.join(', ')}. Found: ${header.join(', ')}` \n        });\n      }\n\n      const firstNameIndex = header.indexOf('first name');\n      const lastNameIndex = header.indexOf('last name');\n      const usernameIndex = header.indexOf('username');\n      const emailIndex = header.indexOf('email');\n      const passwordIndex = header.indexOf('password');\n      const countryIndex = header.indexOf('country');\n      const roleIndex = header.indexOf('role');\n      const partnerLevelIndex = header.indexOf('partner level');\n\n      const usersToInsert = [];\n      const errors = [];\n\n      // Process each data row\n      for (let i = 1; i < lines.length; i++) {\n        const row = lines[i].split(',').map(cell => cell.trim());\n        \n        if (row.length !== header.length) {\n          errors.push(`Row ${i + 1}: Column count mismatch`);\n          continue;\n        }\n\n        const firstName = row[firstNameIndex];\n        const lastName = row[lastNameIndex];\n        const username = row[usernameIndex];\n        const email = row[emailIndex];\n        const password = row[passwordIndex];\n        const country = row[countryIndex];\n        const role = row[roleIndex].toLowerCase();\n        const partnerLevel = row[partnerLevelIndex].toLowerCase();\n\n        // Validate data\n        if (!firstName) {\n          errors.push(`Row ${i + 1}: First name is required`);\n          continue;\n        }\n\n        if (!lastName) {\n          errors.push(`Row ${i + 1}: Last name is required`);\n          continue;\n        }\n\n        if (!username || username.length < 3) {\n          errors.push(`Row ${i + 1}: Username is required and must be at least 3 characters`);\n          continue;\n        }\n\n        if (!email || !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\n          errors.push(`Row ${i + 1}: Valid email is required`);\n          continue;\n        }\n\n        if (!password || password.length < 6) {\n          errors.push(`Row ${i + 1}: Password is required and must be at least 6 characters`);\n          continue;\n        }\n\n        if (!country) {\n          errors.push(`Row ${i + 1}: Country is required`);\n          continue;\n        }\n\n        if (!['user', 'admin'].includes(role)) {\n          errors.push(`Row ${i + 1}: Role must be either 'user' or 'admin'`);\n          continue;\n        }\n\n        if (!['bronze', 'silver', 'gold', 'platinum'].includes(partnerLevel)) {\n          errors.push(`Row ${i + 1}: Partner level must be bronze, silver, gold, or platinum`);\n          continue;\n        }\n\n        // Check if user already exists\n        try {\n          const existingUserByUsername = await storage.getUserByUsername(username);\n          if (existingUserByUsername) {\n            errors.push(`Row ${i + 1}: Username '${username}' already exists`);\n            continue;\n          }\n\n          const existingUserByEmail = await storage.getUserByEmail(email);\n          if (existingUserByEmail) {\n            errors.push(`Row ${i + 1}: Email '${email}' already exists`);\n            continue;\n          }\n        } catch (error) {\n          errors.push(`Row ${i + 1}: Error checking existing user`);\n          continue;\n        }\n\n        usersToInsert.push({\n          firstName,\n          lastName,\n          username,\n          email,\n          password,\n          country,\n          role: role as \"user\" | \"admin\",\n          partnerLevel: partnerLevel as \"bronze\" | \"silver\" | \"gold\" | \"platinum\",\n          isActive: true,\n        });\n      }\n\n      // Insert users in batch\n      let createdCount = 0;\n      for (const userData of usersToInsert) {\n        try {\n          const hashedPassword = await bcrypt.hash(userData.password, 10);\n          await storage.createUser({\n            ...userData,\n            password: hashedPassword,\n          });\n          createdCount++;\n        } catch (error) {\n          console.error(\"Error creating user:\", error);\n          errors.push(`Failed to create user ${userData.username}`);\n        }\n      }\n\n      res.json({\n        message: `Successfully created ${createdCount} users`,\n        createdCount,\n        errorCount: errors.length,\n        errors: errors.slice(0, 10), // Return first 10 errors only\n      });\n\n    } catch (error) {\n      console.error(\"Users CSV processing error:\", error);\n      res.status(500).json({ message: \"Failed to process CSV file\" });\n    }\n  });\n\n  // Get pending users for approval\n  app.get(\"/api/admin/users/pending\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const pendingUsers = await storage.getPendingUsers();\n      res.json(pendingUsers);\n    } catch (error) {\n      console.error(\"Error fetching pending users:\", error);\n      res.status(500).json({ message: \"Failed to fetch pending users\" });\n    }\n  });\n\n  // Approve user registration\n  app.put(\"/api/admin/users/:userId/approve\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    const adminUserId = req.session?.userId;\n    \n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const { userId } = req.params;\n      const approvedUser = await storage.approveUser(userId, adminUserId!);\n      \n      if (!approvedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n\n      res.json({ \n        message: \"User approved successfully\", \n        user: {\n          id: approvedUser.id,\n          username: approvedUser.username,\n          email: approvedUser.email,\n          firstName: approvedUser.firstName,\n          lastName: approvedUser.lastName,\n          isApproved: approvedUser.isApproved\n        }\n      });\n    } catch (error) {\n      console.error(\"Error approving user:\", error);\n      res.status(500).json({ message: \"Failed to approve user\" });\n    }\n  });\n\n  app.put(\"/api/admin/users/:userId/reject\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    \n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const { userId } = req.params;\n      const rejectedUser = await storage.rejectUser(userId);\n      \n      if (!rejectedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ \n        message: \"User rejected successfully\", \n        user: {\n          id: rejectedUser.id,\n          username: rejectedUser.username,\n          email: rejectedUser.email,\n          firstName: rejectedUser.firstName,\n          lastName: rejectedUser.lastName,\n          isActive: rejectedUser.isActive\n        }\n      });\n    } catch (error) {\n      console.error(\"Error rejecting user:\", error);\n      res.status(500).json({ message: \"Failed to reject user\" });\n    }\n  });\n\n  // Recalculate all deals points endpoint\n  app.post(\"/api/admin/recalculate-points\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    \n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const result = await storage.recalculateAllDealsPoints();\n      \n      res.json({\n        message: `Successfully recalculated points for ${result.updated} deals`,\n        updated: result.updated,\n        errors: result.errors.length > 0 ? result.errors.slice(0, 10) : undefined\n      });\n    } catch (error) {\n      console.error(\"Error recalculating points:\", error);\n      res.status(500).json({ message: \"Failed to recalculate points\" });\n    }\n  });\n\n  // Deals per user report endpoint\n  app.get(\"/api/admin/reports/deals-per-user\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const filters = {\n        startDate: req.query.startDate ? new Date(req.query.startDate as string) : undefined,\n        endDate: req.query.endDate ? new Date(req.query.endDate as string) : undefined,\n      };\n\n      const data = await storage.getDealsPerUserReport(filters);\n      res.json(data);\n    } catch (error) {\n      console.error(\"Error getting deals per user report:\", error);\n      res.status(500).json({ message: \"Failed to get deals per user report\" });\n    }\n  });\n\n  app.get(\"/api/admin/reports/deals-per-user/export\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const filters = {\n        startDate: req.query.startDate ? new Date(req.query.startDate as string) : undefined,\n        endDate: req.query.endDate ? new Date(req.query.endDate as string) : undefined,\n      };\n\n      const data = await storage.getDealsPerUserReport(filters);\n      \n      // Create Excel workbook\n      const workbook = XLSX.utils.book_new();\n      \n      // Prepare data for Excel\n      const excelData = data.map((user, index) => ({\n        'Ranking': index + 1,\n        'Username': user.username,\n        'Name': `${user.firstName} ${user.lastName}`.trim(),\n        'Email': user.email,\n        'Country': user.country,\n        'Total Deals': user.totalDeals,\n        'Total Sales ($)': user.totalSales.toFixed(2),\n        'Average Deal Size ($)': user.averageDealSize.toFixed(2)\n      }));\n      \n      // Create worksheet\n      const worksheet = XLSX.utils.json_to_sheet(excelData);\n      \n      // Auto-size columns\n      const columnWidths = [\n        { wch: 10 }, // Ranking\n        { wch: 15 }, // Username\n        { wch: 25 }, // Name\n        { wch: 30 }, // Email\n        { wch: 15 }, // Country\n        { wch: 15 }, // Total Deals\n        { wch: 20 }, // Total Sales\n        { wch: 20 }  // Average Deal Size\n      ];\n      worksheet['!cols'] = columnWidths;\n      \n      // Add worksheet to workbook\n      const sheetName = `Deals Per User ${new Date().toISOString().split('T')[0]}`;\n      XLSX.utils.book_append_sheet(workbook, worksheet, sheetName);\n      \n      // Generate Excel buffer\n      const excelBuffer = XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });\n      \n      // Set response headers for file download\n      const filename = `deals-per-user-report-${new Date().toISOString().split('T')[0]}.xlsx`;\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n      res.setHeader('Content-Length', excelBuffer.length.toString());\n      \n      // Send the Excel file\n      res.send(excelBuffer);\n      \n    } catch (error) {\n      console.error(\"Error exporting deals per user report:\", error);\n      res.status(500).json({ message: \"Failed to export deals per user report\" });\n    }\n  });\n\n  // Support Ticket routes\n  app.post(\"/api/support-tickets\", async (req, res) => {\n    const userId = req.session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    try {\n      const ticketData = insertSupportTicketSchema.parse({\n        ...req.body,\n        userId,\n      });\n      \n      const ticket = await storage.createSupportTicket(ticketData);\n      res.status(201).json(ticket);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Create support ticket error:\", error);\n      res.status(500).json({ message: \"Failed to create support ticket\" });\n    }\n  });\n\n  app.get(\"/api/support-tickets\", async (req, res) => {\n    const userId = req.session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    try {\n      const tickets = await storage.getUserSupportTickets(userId);\n      res.json(tickets);\n    } catch (error) {\n      console.error(\"Get user support tickets error:\", error);\n      res.status(500).json({ message: \"Failed to get support tickets\" });\n    }\n  });\n\n  app.get(\"/api/support-tickets/:id\", async (req, res) => {\n    const userId = req.session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    try {\n      const { id } = req.params;\n      const ticket = await storage.getSupportTicket(id);\n      \n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n\n      if (ticket.userId !== userId && req.session?.userRole !== \"admin\") {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      res.json(ticket);\n    } catch (error) {\n      console.error(\"Get support ticket error:\", error);\n      res.status(500).json({ message: \"Failed to get support ticket\" });\n    }\n  });\n\n  app.get(\"/api/admin/support-tickets\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const tickets = await storage.getAllSupportTickets();\n      res.json(tickets);\n    } catch (error) {\n      console.error(\"Get all support tickets error:\", error);\n      res.status(500).json({ message: \"Failed to get support tickets\" });\n    }\n  });\n\n  app.patch(\"/api/admin/support-tickets/:id\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    const userId = req.session?.userId;\n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const { id } = req.params;\n      const updates = updateSupportTicketSchema.parse(req.body);\n      \n      if (updates.adminResponse && !updates.respondedBy) {\n        updates.respondedBy = userId;\n        updates.respondedAt = new Date();\n      }\n      \n      const ticket = await storage.updateSupportTicket(id, updates);\n      \n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n\n      res.json(ticket);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Update support ticket error:\", error);\n      res.status(500).json({ message: \"Failed to update support ticket\" });\n    }\n  });\n\n  // Points Configuration routes\n  // Public route for users to view redemption period\n  app.get(\"/api/points-config\", async (req, res) => {\n    try {\n      const config = await storage.getPointsConfig();\n      \n      if (!config) {\n        const defaultConfig = {\n          redemptionStartDate: null,\n          redemptionEndDate: null,\n          grandPrizeThreshold: 50000,\n        };\n        return res.json(defaultConfig);\n      }\n      \n      // Return only public-facing info\n      res.json({\n        redemptionStartDate: config.redemptionStartDate,\n        redemptionEndDate: config.redemptionEndDate,\n        grandPrizeThreshold: config.grandPrizeThreshold,\n      });\n    } catch (error) {\n      console.error(\"Get points config error:\", error);\n      res.status(500).json({ message: \"Failed to get points configuration\" });\n    }\n  });\n\n  app.get(\"/api/admin/points-config\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const config = await storage.getPointsConfig();\n      \n      if (!config) {\n        const defaultConfig = {\n          id: \"\",\n          softwareRate: 1000,\n          hardwareRate: 5000,\n          equipmentRate: 10000,\n          grandPrizeThreshold: 50000,\n          updatedAt: new Date(),\n          updatedBy: null\n        };\n        return res.json(defaultConfig);\n      }\n      \n      res.json(config);\n    } catch (error) {\n      console.error(\"Get points config error:\", error);\n      res.status(500).json({ message: \"Failed to get points configuration\" });\n    }\n  });\n\n  app.patch(\"/api/admin/points-config\", async (req, res) => {\n    const userRole = req.session?.userRole;\n    const userId = req.session?.userId;\n    \n    if (userRole !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    if (!userId) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    try {\n      const updates = updatePointsConfigSchema.parse(req.body);\n      const config = await storage.updatePointsConfig(updates, userId);\n      \n      if (!config) {\n        return res.status(500).json({ message: \"Failed to update points configuration\" });\n      }\n\n      res.json(config);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Update points config error:\", error);\n      res.status(500).json({ message: \"Failed to update points configuration\" });\n    }\n  });\n\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":56760},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { initializeSocket } from \"./socket\";\n\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Session configuration\napp.use(\n  session({\n    secret: process.env.SESSION_SECRET || \"your-secret-key-here\",\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: false, // Set to true in production with HTTPS\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    },\n  }),\n);\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  // Inicializar Socket.IO\n  initializeSocket(server);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || \"5000\", 10);\n  server.listen(\n    {\n      port,\n      host: \"0.0.0.0\",\n      reusePort: true,\n    },\n    () => {\n      log(`serving on port ${port}`);\n    },\n  );\n})();\n","size_bytes":2554},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      \n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `private, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}.csv`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(rawPath: string): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n\n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Download CSV file contents as string\n  async downloadCSVContent(objectPath: string): Promise<string> {\n    const objectFile = await this.getObjectEntityFile(objectPath);\n    const stream = objectFile.createReadStream();\n    \n    return new Promise((resolve, reject) => {\n      let content = '';\n      stream.on('data', (chunk) => {\n        content += chunk.toString();\n      });\n      stream.on('end', () => {\n        resolve(content);\n      });\n      stream.on('error', (error) => {\n        reject(error);\n      });\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":6471},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/rewards.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Gift, CreditCard, Plane, Laptop, Smartphone, Award, Calendar } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useTranslation } from \"@/hooks/useTranslation\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Reward, UserReward, PointsConfig } from \"@shared/schema\";\nimport rewardsBackgroundImage from \"@assets/BANNER-3_1758838053683.jpg\";\n\ninterface UserStats {\n  availablePoints: number;\n}\n\nexport default function Rewards() {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: stats } = useQuery<UserStats>({\n    queryKey: [\"/api/users/stats\"],\n  });\n\n  const { data: rewards, isLoading: rewardsLoading } = useQuery<Reward[]>({\n    queryKey: [\"/api/rewards\"],\n    select: (data) => data || [],\n  });\n\n  const { data: userRewards, isLoading: userRewardsLoading } = useQuery<UserReward[]>({\n    queryKey: [\"/api/user-rewards\"],\n    select: (data) => data || [],\n  });\n\n  const { data: pointsConfig } = useQuery<PointsConfig>({\n    queryKey: [\"/api/points-config\"],\n  });\n\n  const redeemMutation = useMutation({\n    mutationFn: async (rewardId: string) => {\n      return apiRequest(\"POST\", `/api/rewards/${rewardId}/redeem`);\n    },\n    onSuccess: () => {\n      toast({\n        title: t(\"rewards.redemptionSubmitted\"),\n        description: t(\"rewards.redemptionPending\"),\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user-rewards\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/stats\"] });\n    },\n    onError: (error: any) => {\n      const errorMessage = error.message || \"Failed to redeem reward\";\n      const isAlreadyPending = errorMessage.includes(\"already have a pending redemption\");\n      \n      toast({\n        title: isAlreadyPending ? \"Redemption Already Pending\" : \"Error\",\n        description: isAlreadyPending \n          ? \"You already have a pending redemption for this reward. Please wait for admin approval.\"\n          : errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRedeem = (reward: Reward) => {\n    if (!stats || stats.availablePoints < reward.pointsCost) {\n      toast({\n        title: t(\"rewards.insufficientPoints\"),\n        description: `You need ${reward.pointsCost.toLocaleString()} points to redeem this reward.`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Prevent multiple clicks if already pending\n    if (redeemMutation.isPending) {\n      return;\n    }\n    \n    redeemMutation.mutate(reward.id);\n  };\n\n  const getRewardIcon = (category: string) => {\n    switch (category.toLowerCase()) {\n      case \"gift cards\":\n        return <CreditCard className=\"w-6 h-6 text-white\" />;\n      case \"travel\":\n        return <Plane className=\"w-6 h-6 text-white\" />;\n      case \"electronics\":\n        return <Laptop className=\"w-6 h-6 text-white\" />;\n      case \"accessories\":\n        return <Smartphone className=\"w-6 h-6 text-white\" />;\n      default:\n        return <Gift className=\"w-6 h-6 text-white\" />;\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category.toLowerCase()) {\n      case \"gift cards\":\n        return \"from-green-400 to-green-600\";\n      case \"travel\":\n        return \"from-blue-400 to-blue-600\";\n      case \"electronics\":\n        return \"from-purple-400 to-purple-600\";\n      case \"accessories\":\n        return \"from-orange-400 to-orange-600\";\n      default:\n        return \"from-gray-400 to-gray-600\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return \"bg-green-100 text-green-800\";\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"rejected\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getShipmentStatusColor = (shipmentStatus: string) => {\n    switch (shipmentStatus) {\n      case \"pending\":\n        return \"bg-orange-100 text-orange-800\";\n      case \"shipped\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"delivered\":\n        return \"bg-green-100 text-green-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getShipmentStatusLabel = (shipmentStatus: string) => {\n    switch (shipmentStatus) {\n      case \"pending\":\n        return \"Pending Shipment\";\n      case \"shipped\":\n        return \"Shipped\";\n      case \"delivered\":\n        return \"Delivered\";\n      default:\n        return \"Unknown\";\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  };\n\n  const categories = Array.from(new Set(rewards?.map(reward => reward.category) || []));\n\n  const filteredRewards = (category?: string) => {\n    if (!category) return rewards || [];\n    return rewards?.filter(reward => reward.category === category) || [];\n  };\n\n  const availableRewards = () => {\n    if (!rewards || !stats) return [];\n    return rewards.filter(reward => stats.availablePoints >= reward.pointsCost);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Hero Banner */}\n      <div \n        className=\"relative z-10 bg-transparent\"\n        style={{\n          backgroundImage: `url(${rewardsBackgroundImage})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'top center',\n          backgroundRepeat: 'no-repeat',\n          minHeight: '500px',\n          paddingTop: '100px'\n        }}\n      >\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-8\">\n          <div className=\"text-left space-y-4 max-w-lg\">\n            <h1 className=\"text-4xl lg:text-5xl font-bold leading-tight text-white\" data-testid=\"text-page-title\">\n              Rewards<br />Catalog\n            </h1>\n            <p className=\"text-lg text-white leading-relaxed\">\n              Redeem your points for amazing rewards\n            </p>\n            <div className=\"bg-white/10 backdrop-blur-sm rounded-lg px-4 py-2 inline-block\">\n              <span className=\"text-sm text-white font-medium\">\n                Available Points: {stats?.availablePoints?.toLocaleString() || 0}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Content Area */}\n      <div className=\"relative z-10 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n\n      {/* Redemption Period Alert */}\n      {pointsConfig?.redemptionStartDate && pointsConfig?.redemptionEndDate && (\n        <Alert className=\"mb-6 bg-blue-50 border-blue-200\" data-testid=\"alert-redemption-period\">\n          <Calendar className=\"h-4 w-4 text-blue-600\" />\n          <AlertDescription className=\"text-blue-900\">\n            <span className=\"font-semibold\">Período de Redención:</span>{\" \"}\n            {new Date(pointsConfig.redemptionStartDate).toLocaleDateString(\"es-ES\", {\n              year: \"numeric\",\n              month: \"long\",\n              day: \"numeric\",\n            })}{\" \"}\n            -{\" \"}\n            {new Date(pointsConfig.redemptionEndDate).toLocaleDateString(\"es-ES\", {\n              year: \"numeric\",\n              month: \"long\",\n              day: \"numeric\",\n            })}\n          </AlertDescription>\n        </Alert>\n      )}\n\n      <Tabs defaultValue=\"all\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3 lg:grid-cols-7\">\n          <TabsTrigger value=\"all\">{t(\"rewards.allRewards\")}</TabsTrigger>\n          <TabsTrigger value=\"available\">{t(\"rewards.availableRewards\")}</TabsTrigger>\n          {categories.slice(0, 4).map((category) => (\n            <TabsTrigger key={category} value={category}>\n              {category}\n            </TabsTrigger>\n          ))}\n          <TabsTrigger value=\"my-rewards\">{t(\"rewards.myRewards\")}</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"all\" className=\"mt-6\">\n          {rewardsLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"shadow-material\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center space-x-4 mb-4\">\n                      <Skeleton className=\"h-12 w-12 rounded-lg\" />\n                      <div className=\"flex-1\">\n                        <Skeleton className=\"h-5 w-3/4 mb-2\" />\n                        <Skeleton className=\"h-4 w-1/2\" />\n                      </div>\n                    </div>\n                    <Skeleton className=\"h-10 w-full\" />\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : rewards && rewards.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {rewards.map((reward) => (\n                <Card key={reward.id} className=\"shadow-material\" data-testid={`card-reward-${reward.id}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center space-x-4 mb-4\">\n                      {reward.imageUrl ? (\n                        <img \n                          src={reward.imageUrl} \n                          alt={reward.name}\n                          className=\"w-12 h-12 rounded-lg object-cover\"\n                          onError={(e) => {\n                            e.currentTarget.style.display = 'none';\n                            const nextElement = e.currentTarget.nextElementSibling as HTMLElement;\n                            if (nextElement) {\n                              nextElement.style.display = 'flex';\n                            }\n                          }}\n                        />\n                      ) : null}\n                      <div className={`w-12 h-12 bg-gradient-to-br ${getCategoryColor(reward.category)} rounded-lg flex items-center justify-center ${reward.imageUrl ? 'hidden' : ''}`}>\n                        {getRewardIcon(reward.category)}\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-semibold text-gray-900\">{reward.name}</h3>\n                        <p className=\"text-sm text-gray-600\">\n                          {reward.pointsCost.toLocaleString()} points\n                        </p>\n                      </div>\n                    </div>\n                    \n                    {reward.description && (\n                      <p className=\"text-sm text-gray-600 mb-4\">{reward.description}</p>\n                    )}\n                    \n                    <Badge variant=\"outline\" className=\"mb-4\">\n                      {reward.category}\n                    </Badge>\n                    \n                    <Button\n                      className=\"w-full\"\n                      onClick={() => handleRedeem(reward)}\n                      disabled={!stats || stats.availablePoints < reward.pointsCost || redeemMutation.isPending}\n                      data-testid={`button-redeem-${reward.id}`}\n                    >\n                      {!stats || stats.availablePoints < reward.pointsCost\n                        ? t(\"rewards.insufficientPoints\")\n                        : redeemMutation.isPending\n                        ? t(\"rewards.redeeming\")\n                        : t(\"rewards.redeem\")}\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <Card className=\"shadow-material\">\n              <CardContent className=\"p-12 text-center\">\n                <Gift className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\" data-testid=\"text-no-rewards-title\">\n                  {t(\"rewards.noRewards\")}\n                </h3>\n                <p className=\"text-gray-600\" data-testid=\"text-no-rewards-description\">\n                  {t(\"rewards.noRewardsDesc\")}\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"available\" className=\"mt-6\">\n          {rewardsLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"shadow-material\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center space-x-4 mb-4\">\n                      <Skeleton className=\"h-12 w-12 rounded-lg\" />\n                      <div className=\"flex-1\">\n                        <Skeleton className=\"h-5 w-3/4 mb-2\" />\n                        <Skeleton className=\"h-4 w-1/2\" />\n                      </div>\n                    </div>\n                    <Skeleton className=\"h-10 w-full\" />\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : availableRewards().length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {availableRewards().map((reward) => (\n                <Card key={reward.id} className=\"shadow-material border-green-200\" data-testid={`card-available-reward-${reward.id}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center space-x-4 mb-4\">\n                      {reward.imageUrl ? (\n                        <img \n                          src={reward.imageUrl} \n                          alt={reward.name}\n                          className=\"w-12 h-12 rounded-lg object-cover\"\n                          onError={(e) => {\n                            e.currentTarget.style.display = 'none';\n                            const nextElement = e.currentTarget.nextElementSibling as HTMLElement;\n                            if (nextElement) {\n                              nextElement.style.display = 'flex';\n                            }\n                          }}\n                        />\n                      ) : null}\n                      <div className={`w-12 h-12 bg-gradient-to-br ${getCategoryColor(reward.category)} rounded-lg flex items-center justify-center ${reward.imageUrl ? 'hidden' : ''}`}>\n                        {getRewardIcon(reward.category)}\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-semibold text-gray-900\">{reward.name}</h3>\n                        <p className=\"text-sm text-green-600 font-medium\">\n                          {reward.pointsCost.toLocaleString()} points ✓\n                        </p>\n                      </div>\n                    </div>\n                    \n                    {reward.description && (\n                      <p className=\"text-sm text-gray-600 mb-4\">{reward.description}</p>\n                    )}\n                    \n                    <Badge variant=\"outline\" className=\"mb-4 border-green-200 text-green-700\">\n                      {reward.category}\n                    </Badge>\n                    \n                    <Button\n                      className=\"w-full bg-green-600 hover:bg-green-700\"\n                      onClick={() => handleRedeem(reward)}\n                      disabled={redeemMutation.isPending}\n                      data-testid={`button-redeem-available-${reward.id}`}\n                    >\n                      {redeemMutation.isPending\n                        ? t(\"rewards.redeeming\")\n                        : t(\"rewards.redeem\")}\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <Card className=\"shadow-material\">\n              <CardContent className=\"p-12 text-center\">\n                <Gift className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\" data-testid=\"text-no-available-rewards-title\">\n                  {t(\"rewards.noAvailableRewards\")}\n                </h3>\n                <p className=\"text-gray-600\" data-testid=\"text-no-available-rewards-description\">\n                  {t(\"rewards.noAvailableRewardsDesc\")}\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {categories.map((category) => (\n          <TabsContent key={category} value={category} className=\"mt-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredRewards(category).map((reward) => (\n                <Card key={reward.id} className=\"shadow-material\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center space-x-4 mb-4\">\n                      {reward.imageUrl ? (\n                        <img \n                          src={reward.imageUrl} \n                          alt={reward.name}\n                          className=\"w-12 h-12 rounded-lg object-cover\"\n                          onError={(e) => {\n                            e.currentTarget.style.display = 'none';\n                            const nextElement = e.currentTarget.nextElementSibling as HTMLElement;\n                            if (nextElement) {\n                              nextElement.style.display = 'flex';\n                            }\n                          }}\n                        />\n                      ) : null}\n                      <div className={`w-12 h-12 bg-gradient-to-br ${getCategoryColor(reward.category)} rounded-lg flex items-center justify-center ${reward.imageUrl ? 'hidden' : ''}`}>\n                        {getRewardIcon(reward.category)}\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-semibold text-gray-900\">{reward.name}</h3>\n                        <p className=\"text-sm text-gray-600\">\n                          {reward.pointsCost.toLocaleString()} points\n                        </p>\n                      </div>\n                    </div>\n                    \n                    {reward.description && (\n                      <p className=\"text-sm text-gray-600 mb-4\">{reward.description}</p>\n                    )}\n                    \n                    <Button\n                      className=\"w-full\"\n                      onClick={() => handleRedeem(reward)}\n                      disabled={!stats || stats.availablePoints < reward.pointsCost || redeemMutation.isPending}\n                    >\n                      {!stats || stats.availablePoints < reward.pointsCost\n                        ? \"Insufficient Points\"\n                        : redeemMutation.isPending\n                        ? \"Redeeming...\"\n                        : \"Redeem\"}\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n        ))}\n\n        <TabsContent value=\"my-rewards\" className=\"mt-6\">\n          {userRewardsLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(3)].map((_, i) => (\n                <Card key={i} className=\"shadow-material\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center space-x-4 mb-4\">\n                      <Skeleton className=\"h-12 w-12 rounded-lg\" />\n                      <div className=\"flex-1\">\n                        <Skeleton className=\"h-5 w-3/4 mb-2\" />\n                        <Skeleton className=\"h-4 w-1/2\" />\n                      </div>\n                    </div>\n                    <Skeleton className=\"h-6 w-20 mb-2\" />\n                    <Skeleton className=\"h-4 w-full\" />\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : userRewards && userRewards.length > 0 ? (\n            <div className=\"space-y-4\">\n              {userRewards.map((userReward: any) => (\n                <Card key={userReward.id} className=\"shadow-material\" data-testid={`card-user-reward-${userReward.id}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className={`w-12 h-12 ${\n                          userReward.status === 'approved' ? 'bg-green-100' :\n                          userReward.status === 'pending' ? 'bg-yellow-100' : 'bg-red-100'\n                        } rounded-lg flex items-center justify-center`}>\n                          <Award className={`w-6 h-6 ${\n                            userReward.status === 'approved' ? 'text-green-600' :\n                            userReward.status === 'pending' ? 'text-yellow-600' : 'text-red-600'\n                          }`} />\n                        </div>\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-semibold text-gray-900\" data-testid={`text-reward-name-${userReward.id}`}>\n                            {userReward.rewardName || 'Unknown Reward'}\n                          </h3>\n                          <p className=\"text-sm text-gray-600\">\n                            {userReward.pointsCost?.toLocaleString()} points • Redeemed: {new Date(userReward.redeemedAt).toLocaleDateString()}\n                          </p>\n                          \n                          {/* Status Information */}\n                          {userReward.status === 'pending' && (\n                            <p className=\"text-sm text-yellow-600 mt-1\">\n                              {t(\"rewards.waitingApproval\")}\n                            </p>\n                          )}\n                          {userReward.status === 'rejected' && userReward.rejectionReason && (\n                            <p className=\"text-sm text-red-600 mt-1\">\n                              {t(\"rewards.rejectedReason\")}: {userReward.rejectionReason}\n                            </p>\n                          )}\n                          {userReward.status === 'approved' && userReward.approvedAt && (\n                            <p className=\"text-sm text-green-600 mt-1\">\n                              {t(\"rewards.approvedOn\")}: {new Date(userReward.approvedAt).toLocaleDateString()}\n                            </p>\n                          )}\n                          \n                          {/* Shipment Information - Only show if approved */}\n                          {userReward.status === 'approved' && userReward.shipmentStatus && (\n                            <div className=\"mt-2\">\n                              <div className=\"flex items-center space-x-2\">\n                                <Badge className={getShipmentStatusColor(userReward.shipmentStatus)} data-testid={`badge-shipment-${userReward.id}`}>\n                                  {getShipmentStatusLabel(userReward.shipmentStatus)}\n                                </Badge>\n                              </div>\n                              \n                              {/* Shipment dates */}\n                              <div className=\"mt-1 text-xs text-gray-500\">\n                                {userReward.shippedAt && (\n                                  <div>{t(\"rewards.shippedOn\")}: {new Date(userReward.shippedAt).toLocaleDateString()}</div>\n                                )}\n                                {userReward.deliveredAt && (\n                                  <div>{t(\"rewards.deliveredOn\")}: {new Date(userReward.deliveredAt).toLocaleDateString()}</div>\n                                )}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <Badge className={`${\n                          userReward.status === 'approved' ? 'bg-green-100 text-green-800' :\n                          userReward.status === 'pending' ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'\n                        }`} data-testid={`badge-status-${userReward.id}`}>\n                          {userReward.status === 'approved' ? 'Approved' :\n                           userReward.status === 'pending' ? 'Pending' : 'Rejected'}\n                        </Badge>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <Card className=\"shadow-material\">\n              <CardContent className=\"p-12 text-center\">\n                <Award className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\" data-testid=\"text-no-user-rewards-title\">\n                  {t(\"rewards.noUserRewards\")}\n                </h3>\n                <p className=\"text-gray-600\" data-testid=\"text-no-user-rewards-description\">\n                  {t(\"rewards.noUserRewardsDesc\")}\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n      </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":25732},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/SupportButton.tsx":{"content":"import { useState } from \"react\";\nimport { MessageCircle, HelpCircle, X, Send } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst supportTicketSchema = z.object({\n  subject: z.string().min(5, \"El asunto debe tener al menos 5 caracteres\"),\n  message: z.string().min(10, \"El mensaje debe tener al menos 10 caracteres\"),\n  priority: z.enum([\"low\", \"medium\", \"high\"]),\n});\n\ntype SupportTicketForm = z.infer<typeof supportTicketSchema>;\n\nconst faqs = [\n  {\n    question: \"¿Cómo puedo registrar un nuevo deal?\",\n    answer:\n      \"Para registrar un nuevo deal, dirígete a la sección 'Deals' en el menú principal y haz clic en 'Nuevo Deal'. Completa todos los campos requeridos como tipo de producto, nombre, valor, cantidad y fecha de cierre. Una vez enviado, el deal quedará pendiente de aprobación por un administrador.\",\n  },\n  {\n    question: \"¿Cuántos puntos gano por cada deal?\",\n    answer:\n      \"Los puntos se calculan automáticamente basándose en el valor del deal. Normalmente, ganas 1 punto por cada dólar del deal. Los puntos solo se acreditan una vez que el deal es aprobado por un administrador. Algunos productos o campañas especiales pueden tener multiplicadores de puntos.\",\n  },\n  {\n    question: \"¿Cómo canjeo mis puntos por recompensas?\",\n    answer:\n      \"Ve a la sección 'Recompensas' donde podrás ver todas las recompensas disponibles y los puntos necesarios para cada una. Selecciona la recompensa que deseas, verifica que tienes suficientes puntos y haz clic en 'Canjear'. La solicitud será procesada por un administrador y recibirás una notificación cuando sea aprobada.\",\n  },\n  {\n    question: \"¿Cuánto tiempo tarda en aprobarse mi deal?\",\n    answer:\n      \"El tiempo de aprobación de deals varía dependiendo de la complejidad y el volumen de solicitudes. Generalmente, los deals son revisados en un plazo de 24-48 horas hábiles. Recibirás una notificación por correo cuando tu deal sea aprobado o si se requiere información adicional.\",\n  },\n  {\n    question: \"¿Puedo cancelar o modificar un deal después de enviarlo?\",\n    answer:\n      \"Una vez que un deal ha sido enviado, no puedes modificarlo directamente. Si necesitas realizar cambios, contacta al soporte a través de este botón o envía un correo al administrador. Los deals pendientes pueden ser modificados por un administrador antes de su aprobación.\",\n  },\n  {\n    question: \"¿Qué hago si no veo mis puntos reflejados?\",\n    answer:\n      \"Los puntos se acreditan automáticamente cuando tu deal es aprobado. Si tu deal fue aprobado y no ves los puntos, verifica en tu historial de puntos. Si el problema persiste después de 24 horas, contacta al soporte con el número de deal afectado.\",\n  },\n  {\n    question: \"¿Las recompensas tienen fecha de expiración?\",\n    answer:\n      \"Los puntos acumulados no expiran, pero algunas recompensas pueden tener disponibilidad limitada por stock. Las recompensas especiales o de temporada pueden estar disponibles solo por tiempo limitado. Te recomendamos revisar regularmente el catálogo de recompensas.\",\n  },\n  {\n    question: \"¿Cómo puedo rastrear el envío de mi recompensa?\",\n    answer:\n      \"Una vez que tu solicitud de recompensa sea aprobada y enviada, recibirás un correo con la información de seguimiento. También puedes verificar el estado en la sección 'Mis Recompensas' donde verás el estado actual (Pendiente, Aprobado, Enviado, Entregado).\",\n  },\n];\n\nexport default function SupportButton() {\n  const [menuOpen, setMenuOpen] = useState(false);\n  const [ticketDialogOpen, setTicketDialogOpen] = useState(false);\n  const [faqDialogOpen, setFaqDialogOpen] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<SupportTicketForm>({\n    resolver: zodResolver(supportTicketSchema),\n    defaultValues: {\n      subject: \"\",\n      message: \"\",\n      priority: \"medium\",\n    },\n  });\n\n  const createTicketMutation = useMutation({\n    mutationFn: async (data: SupportTicketForm) => {\n      return apiRequest(\"POST\", \"/api/support-tickets\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Ticket enviado\",\n        description:\n          \"Tu solicitud de soporte ha sido enviada. Te contactaremos pronto.\",\n      });\n      setTicketDialogOpen(false);\n      setMenuOpen(false);\n      form.reset();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"No se pudo enviar el ticket de soporte\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: SupportTicketForm) => {\n    createTicketMutation.mutate(data);\n  };\n\n  return (\n    <>\n      <div className=\"fixed bottom-6 right-6 z-50\">\n        {menuOpen && (\n          <div className=\"absolute bottom-16 right-0 bg-white rounded-lg shadow-lg border border-gray-200 p-2 w-48 mb-2\">\n            <button\n              onClick={() => {\n                setTicketDialogOpen(true);\n                setMenuOpen(false);\n              }}\n              className=\"w-full flex items-center gap-2 px-4 py-2 text-left hover:bg-gray-100 rounded-md transition-colors\"\n              data-testid=\"button-open-ticket\"\n            >\n              <MessageCircle className=\"h-4 w-4\" />\n              <span className=\"text-sm\">Enviar Solicitud</span>\n            </button>\n            <button\n              onClick={() => {\n                setFaqDialogOpen(true);\n                setMenuOpen(false);\n              }}\n              className=\"w-full flex items-center gap-2 px-4 py-2 text-left hover:bg-gray-100 rounded-md transition-colors\"\n              data-testid=\"button-open-faq\"\n            >\n              <HelpCircle className=\"h-4 w-4\" />\n              <span className=\"text-sm\">Preguntas Frecuentes</span>\n            </button>\n          </div>\n        )}\n\n        <Button\n          onClick={() => setMenuOpen(!menuOpen)}\n          className=\"rounded-full h-14 w-14 shadow-lg hover:shadow-xl transition-all\"\n          data-testid=\"button-support\"\n        >\n          {menuOpen ? (\n            <X className=\"h-6 w-6\" />\n          ) : (\n            <MessageCircle className=\"h-6 w-6\" />\n          )}\n        </Button>\n      </div>\n\n      <Dialog open={ticketDialogOpen} onOpenChange={setTicketDialogOpen}>\n        <DialogContent className=\"sm:max-w-[500px]\" data-testid=\"dialog-support-ticket\">\n          <DialogHeader>\n            <DialogTitle>Solicitud de Soporte</DialogTitle>\n            <DialogDescription>\n              Describe tu problema o consulta y nos pondremos en contacto\n              contigo lo antes posible.\n            </DialogDescription>\n          </DialogHeader>\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"subject\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Asunto</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Ej: Problema con canje de recompensa\"\n                        {...field}\n                        data-testid=\"input-subject\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"priority\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Prioridad</FormLabel>\n                    <Select\n                      onValueChange={field.onChange}\n                      defaultValue={field.value}\n                    >\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-priority\">\n                          <SelectValue placeholder=\"Selecciona la prioridad\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"low\">Baja</SelectItem>\n                        <SelectItem value=\"medium\">Media</SelectItem>\n                        <SelectItem value=\"high\">Alta</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"message\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Mensaje</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Describe tu problema o consulta...\"\n                        className=\"min-h-[120px]\"\n                        {...field}\n                        data-testid=\"textarea-message\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex gap-2 justify-end\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setTicketDialogOpen(false)}\n                  data-testid=\"button-cancel\"\n                >\n                  Cancelar\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createTicketMutation.isPending}\n                  data-testid=\"button-submit-ticket\"\n                >\n                  {createTicketMutation.isPending ? (\n                    \"Enviando...\"\n                  ) : (\n                    <>\n                      <Send className=\"h-4 w-4 mr-2\" />\n                      Enviar\n                    </>\n                  )}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={faqDialogOpen} onOpenChange={setFaqDialogOpen}>\n        <DialogContent className=\"sm:max-w-[600px] max-h-[80vh] overflow-y-auto\" data-testid=\"dialog-faq\">\n          <DialogHeader>\n            <DialogTitle>Preguntas Frecuentes (FAQ)</DialogTitle>\n            <DialogDescription>\n              Encuentra respuestas rápidas a las preguntas más comunes sobre\n              nuestro programa de lealtad.\n            </DialogDescription>\n          </DialogHeader>\n\n          <Accordion type=\"single\" collapsible className=\"w-full\">\n            {faqs.map((faq, index) => (\n              <AccordionItem key={index} value={`item-${index}`}>\n                <AccordionTrigger className=\"text-left\" data-testid={`faq-question-${index}`}>\n                  {faq.question}\n                </AccordionTrigger>\n                <AccordionContent className=\"text-gray-600\" data-testid={`faq-answer-${index}`}>\n                  {faq.answer}\n                </AccordionContent>\n              </AccordionItem>\n            ))}\n          </Accordion>\n\n          <div className=\"mt-4 p-4 bg-gray-50 rounded-lg\">\n            <p className=\"text-sm text-gray-600\">\n              ¿No encuentras lo que buscas?{\" \"}\n              <button\n                onClick={() => {\n                  setFaqDialogOpen(false);\n                  setTicketDialogOpen(true);\n                }}\n                className=\"text-primary hover:underline font-medium\"\n                data-testid=\"button-contact-support\"\n              >\n                Contacta con soporte\n              </button>\n            </p>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":12477},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/lib/auth.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface AuthUser {\n  id: string;\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n  country: string;\n}\n\nexport const login = async (username: string, password: string): Promise<AuthUser> => {\n  const response = await apiRequest(\"POST\", \"/api/auth/login\", { username, password });\n  return response.json();\n};\n\nexport const register = async (userData: {\n  username: string;\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  country: string;\n}): Promise<AuthUser> => {\n  const response = await apiRequest(\"POST\", \"/api/auth/register\", userData);\n  return response.json();\n};\n\nexport const logout = async (): Promise<void> => {\n  await apiRequest(\"POST\", \"/api/auth/logout\");\n};\n\nexport const getCurrentUser = async (): Promise<AuthUser | null> => {\n  try {\n    const response = await apiRequest(\"GET\", \"/api/auth/me\");\n    return response.json();\n  } catch (error) {\n    return null;\n  }\n};\n","size_bytes":1018},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, boolean, pgEnum } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const userRoleEnum = pgEnum(\"user_role\", [\"user\", \"admin\"]);\nexport const dealStatusEnum = pgEnum(\"deal_status\", [\"pending\", \"approved\", \"rejected\"]);\nexport const productTypeEnum = pgEnum(\"product_type\", [\"software\", \"hardware\", \"equipment\"]);\nexport const rewardStatusEnum = pgEnum(\"reward_status\", [\"pending\", \"approved\", \"rejected\", \"delivered\"]);\nexport const shipmentStatusEnum = pgEnum(\"shipment_status\", [\"pending\", \"shipped\", \"delivered\"]);\nexport const supportTicketStatusEnum = pgEnum(\"support_ticket_status\", [\"open\", \"in_progress\", \"resolved\", \"closed\"]);\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  role: userRoleEnum(\"role\").notNull().default(\"user\"),\n  country: text(\"country\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  isApproved: boolean(\"is_approved\").notNull().default(false),\n  approvedBy: varchar(\"approved_by\"),\n  approvedAt: timestamp(\"approved_at\"),\n  inviteToken: text(\"invite_token\"),\n  resetToken: text(\"reset_token\"),\n  resetTokenExpiry: timestamp(\"reset_token_expiry\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const deals = pgTable(\"deals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  productType: productTypeEnum(\"product_type\").notNull(),\n  productName: text(\"product_name\").notNull(),\n  dealValue: decimal(\"deal_value\", { precision: 12, scale: 2 }).notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  closeDate: timestamp(\"close_date\").notNull(),\n  clientInfo: text(\"client_info\"),\n  licenseAgreementNumber: text(\"license_agreement_number\"),\n  status: dealStatusEnum(\"status\").notNull().default(\"pending\"),\n  pointsEarned: integer(\"points_earned\").default(0),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const rewards = pgTable(\"rewards\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  pointsCost: integer(\"points_cost\").notNull(),\n  category: text(\"category\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  stockQuantity: integer(\"stock_quantity\"),\n  imageUrl: text(\"image_url\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const userRewards = pgTable(\"user_rewards\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  rewardId: varchar(\"reward_id\").notNull().references(() => rewards.id),\n  status: rewardStatusEnum(\"status\").notNull().default(\"pending\"),\n  shipmentStatus: shipmentStatusEnum(\"shipment_status\").notNull().default(\"pending\"),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\"),\n  rejectionReason: text(\"rejection_reason\"),\n  redeemedAt: timestamp(\"redeemed_at\").notNull().default(sql`now()`),\n  deliveredAt: timestamp(\"delivered_at\"),\n  deliveryAddress: text(\"delivery_address\"),\n  shippedAt: timestamp(\"shipped_at\"),\n  shippedBy: varchar(\"shipped_by\").references(() => users.id),\n});\n\nexport const pointsHistory = pgTable(\"points_history\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  dealId: varchar(\"deal_id\").references(() => deals.id),\n  rewardId: varchar(\"reward_id\").references(() => rewards.id),\n  points: integer(\"points\").notNull(),\n  description: text(\"description\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const campaigns = pgTable(\"campaigns\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  multiplier: decimal(\"multiplier\", { precision: 3, scale: 2 }).notNull().default(\"1.00\"),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: text(\"type\").notNull().default(\"info\"), // info, success, warning, error\n  isRead: boolean(\"is_read\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const supportTickets = pgTable(\"support_tickets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  subject: text(\"subject\").notNull(),\n  message: text(\"message\").notNull(),\n  status: supportTicketStatusEnum(\"status\").notNull().default(\"open\"),\n  priority: text(\"priority\").notNull().default(\"medium\"),\n  assignedTo: varchar(\"assigned_to\").references(() => users.id),\n  adminResponse: text(\"admin_response\"),\n  respondedAt: timestamp(\"responded_at\"),\n  respondedBy: varchar(\"responded_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const pointsConfig = pgTable(\"points_config\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  softwareRate: integer(\"software_rate\").notNull().default(1000),\n  hardwareRate: integer(\"hardware_rate\").notNull().default(5000),\n  equipmentRate: integer(\"equipment_rate\").notNull().default(10000),\n  grandPrizeThreshold: integer(\"grand_prize_threshold\").notNull().default(50000),\n  redemptionStartDate: timestamp(\"redemption_start_date\"),\n  redemptionEndDate: timestamp(\"redemption_end_date\"),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n  updatedBy: varchar(\"updated_by\").references(() => users.id),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  deals: many(deals),\n  userRewards: many(userRewards),\n  pointsHistory: many(pointsHistory),\n  notifications: many(notifications),\n  supportTickets: many(supportTickets),\n}));\n\nexport const dealsRelations = relations(deals, ({ one }) => ({\n  user: one(users, {\n    fields: [deals.userId],\n    references: [users.id],\n  }),\n  approver: one(users, {\n    fields: [deals.approvedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const userApprovalRelations = relations(users, ({ one }) => ({\n  approver: one(users, {\n    fields: [users.approvedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const rewardsRelations = relations(rewards, ({ many }) => ({\n  userRewards: many(userRewards),\n}));\n\nexport const userRewardsRelations = relations(userRewards, ({ one }) => ({\n  user: one(users, {\n    fields: [userRewards.userId],\n    references: [users.id],\n  }),\n  reward: one(rewards, {\n    fields: [userRewards.rewardId],\n    references: [rewards.id],\n  }),\n  approver: one(users, {\n    fields: [userRewards.approvedBy],\n    references: [users.id],\n  }),\n  shipper: one(users, {\n    fields: [userRewards.shippedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const pointsHistoryRelations = relations(pointsHistory, ({ one }) => ({\n  user: one(users, {\n    fields: [pointsHistory.userId],\n    references: [users.id],\n  }),\n  deal: one(deals, {\n    fields: [pointsHistory.dealId],\n    references: [deals.id],\n  }),\n  reward: one(rewards, {\n    fields: [pointsHistory.rewardId],\n    references: [rewards.id],\n  }),\n}));\n\nexport const notificationsRelations = relations(notifications, ({ one }) => ({\n  user: one(users, {\n    fields: [notifications.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const supportTicketsRelations = relations(supportTickets, ({ one }) => ({\n  user: one(users, {\n    fields: [supportTickets.userId],\n    references: [users.id],\n  }),\n  assignedAdmin: one(users, {\n    fields: [supportTickets.assignedTo],\n    references: [users.id],\n  }),\n  responder: one(users, {\n    fields: [supportTickets.respondedBy],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateUserSchema = createInsertSchema(users).omit({\n  id: true,\n  password: true,\n  createdAt: true,\n  updatedAt: true,\n  approvedBy: true,\n  approvedAt: true,\n  inviteToken: true,\n  resetToken: true,\n  resetTokenExpiry: true,\n}).partial();\n\nexport const insertDealSchema = createInsertSchema(deals).omit({\n  id: true,\n  pointsEarned: true,\n  approvedBy: true,\n  approvedAt: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  closeDate: z.string().transform((str) => new Date(str)),\n});\n\nexport const updateDealSchema = createInsertSchema(deals).omit({\n  id: true,\n  userId: true,\n  pointsEarned: true,\n  approvedBy: true,\n  approvedAt: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  closeDate: z.string().transform((str) => new Date(str)),\n}).partial();\n\nexport const insertRewardSchema = createInsertSchema(rewards).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserRewardSchema = createInsertSchema(userRewards).omit({\n  id: true,\n  redeemedAt: true,\n});\n\nexport const insertPointsHistorySchema = createInsertSchema(pointsHistory).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCampaignSchema = createInsertSchema(campaigns).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSupportTicketSchema = createInsertSchema(supportTickets).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateSupportTicketSchema = createInsertSchema(supportTickets).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n}).partial();\n\nexport const updatePointsConfigSchema = createInsertSchema(pointsConfig).omit({\n  id: true,\n  updatedAt: true,\n}).extend({\n  redemptionStartDate: z.string().nullable().optional().transform(val => val ? new Date(val) : null),\n  redemptionEndDate: z.string().nullable().optional().transform(val => val ? new Date(val) : null),\n}).partial();\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type UpdateUser = z.infer<typeof updateUserSchema>;\nexport type Deal = typeof deals.$inferSelect;\nexport type InsertDeal = z.infer<typeof insertDealSchema>;\nexport type UpdateDeal = z.infer<typeof updateDealSchema>;\nexport type Reward = typeof rewards.$inferSelect;\nexport type InsertReward = z.infer<typeof insertRewardSchema>;\nexport type UserReward = typeof userRewards.$inferSelect;\nexport type InsertUserReward = z.infer<typeof insertUserRewardSchema>;\nexport type PointsHistory = typeof pointsHistory.$inferSelect;\nexport type InsertPointsHistory = z.infer<typeof insertPointsHistorySchema>;\nexport type Campaign = typeof campaigns.$inferSelect;\nexport type InsertCampaign = z.infer<typeof insertCampaignSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type SupportTicket = typeof supportTickets.$inferSelect;\nexport type InsertSupportTicket = z.infer<typeof insertSupportTicketSchema>;\nexport type UpdateSupportTicket = z.infer<typeof updateSupportTicketSchema>;\nexport type PointsConfig = typeof pointsConfig.$inferSelect;\nexport type UpdatePointsConfig = z.infer<typeof updatePointsConfigSchema>;\n\n// Deal with user information for admin views\nexport type DealWithUser = Deal & {\n  userFirstName: string;\n  userLastName: string;\n  userName: string;\n};\n\n// Support ticket with user information for admin views\nexport type SupportTicketWithUser = SupportTicket & {\n  userFirstName: string;\n  userLastName: string;\n  userName: string;\n  userEmail: string;\n};\n","size_bytes":12796},"client/src/components/CSVUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport \"@uppy/core/dist/style.min.css\";\nimport \"@uppy/dashboard/dist/style.min.css\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\nimport { Upload } from \"lucide-react\";\n\ninterface CSVUploaderProps {\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children?: ReactNode;\n}\n\n/**\n * A CSV file upload component specifically for bulk deal imports.\n * \n * Features:\n * - Accepts only CSV files\n * - Validates file structure\n * - Shows upload progress\n * - Provides feedback on completion\n */\nexport function CSVUploader({\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: CSVUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles: 1,\n        maxFileSize: 5242880, // 5MB\n        allowedFileTypes: ['.csv', 'text/csv', 'application/csv'],\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n        setShowModal(false);\n      })\n  );\n\n  return (\n    <div>\n      <Button \n        onClick={() => setShowModal(true)} \n        className={buttonClassName}\n        data-testid=\"button-upload-csv\"\n      >\n        {children || (\n          <>\n            <Upload className=\"w-4 h-4 mr-2\" />\n            Upload CSV\n          </>\n        )}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n        note=\"Upload a CSV file with columns: usuario, valor, status, tipo. Optional: acuerdo (License Agreement Number)\"\n      />\n    </div>\n  );\n}","size_bytes":2162},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/hooks/useTranslation.ts":{"content":"import { useState, useEffect } from \"react\";\nimport { t, getLanguage, setLanguage, type Language } from \"@/lib/i18n\";\n\nexport function useTranslation() {\n  const [currentLanguage, setCurrentLanguage] = useState<Language>(getLanguage());\n\n  useEffect(() => {\n    // Initialize language from localStorage\n    const savedLanguage = getLanguage();\n    setCurrentLanguage(savedLanguage);\n  }, []);\n\n  const changeLanguage = (newLanguage: Language) => {\n    setLanguage(newLanguage);\n    setCurrentLanguage(newLanguage);\n    // Force a re-render by reloading the page\n    window.location.reload();\n  };\n\n  return {\n    t,\n    currentLanguage,\n    changeLanguage,\n  };\n}","size_bytes":663}},"version":2}